// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.post0.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'ufc'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __P2_TET_STOKES_FULL_TET_H
#define __P2_TET_STOKES_FULL_TET_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include "hyteg/fenics/ufc.h"

class p2_tet_stokes_full_tet_finite_element_0: public ufc::finite_element
{
public:

  p2_tet_stokes_full_tet_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~p2_tet_stokes_full_tet_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 4; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 3] += coefficients3[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 4 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505545, 0.0, 0.0, 0.0 },
            { 5.163977794943224, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[4] = {};
    const std::size_t num_components[4] = { 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 4; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[4 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 4 * num_derivatives, 0.0);
    const std::size_t reference_offsets[4] = {};
    const std::size_t physical_offsets[4] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 4; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[4 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[4 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[4];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[4];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 4, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new p2_tet_stokes_full_tet_finite_element_0();
  }

};


class p2_tet_stokes_full_tet_finite_element_1: public ufc::finite_element
{
public:

  p2_tet_stokes_full_tet_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~p2_tet_stokes_full_tet_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 12 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 4 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 5 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 6 + 1] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 7 + 1] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 8 + 2] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 9 + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 10 + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 11 + 2] += coefficients3[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 3, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505545, 0.0, 0.0, 0.0 },
            { 5.163977794943224, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[36];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[36];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 12, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[9] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 11:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[0];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 5] = coordinate_dofs[3];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 6] = coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 7] = coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 8] = coordinate_dofs[0];
    dof_coordinates[3 * 8 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 8 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 9] = coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 11] = coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[36] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 36, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_finite_element_0();
    case 1:
        return new p2_tet_stokes_full_tet_finite_element_0();
    case 2:
        return new p2_tet_stokes_full_tet_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new p2_tet_stokes_full_tet_finite_element_1();
  }

};


class p2_tet_stokes_full_tet_finite_element_2: public ufc::finite_element
{
public:

  p2_tet_stokes_full_tet_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~p2_tet_stokes_full_tet_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 10;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][10] = { { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 } };
    static const double coefficients1[1][10] = { { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 } };
    static const double coefficients2[1][10] = { { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 } };
    static const double coefficients3[1][10] = { { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 } };
    static const double coefficients4[1][10] = { { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 } };
    static const double coefficients5[1][10] = { { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 } };
    static const double coefficients6[1][10] = { { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 } };
    static const double coefficients7[1][10] = { { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 } };
    static const double coefficients8[1][10] = { { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 } };
    static const double coefficients9[1][10] = { { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 } };
    for (std::size_t k = 0; k < num_points * 10; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[10] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues2[4] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp2_2 * basisvalues2[0];
        basisvalues2[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues2[0];
        basisvalues2[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues2[1];
        const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_2 = 0.5 * (1.0 - Y[2]);
        const double tmp5_2 = tmp4_2 * tmp4_2;
        basisvalues2[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues2[2] - 0.5555555555555556 * tmp5_2 * basisvalues2[0];
        basisvalues2[3] = (2.0 * Y[2] + 1.0) * basisvalues2[0];
        basisvalues2[8] = (3.0 * Y[2] + 2.0) * basisvalues2[2];
        basisvalues2[6] = (3.0 * Y[2] + 2.0) * basisvalues2[1];
        basisvalues2[9] = (0.3125 + 1.875 * Y[2]) * basisvalues2[3] - 0.5625 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.75);
        basisvalues2[3] *= std::sqrt(1.25);
        basisvalues2[9] *= std::sqrt(1.75);
        basisvalues2[2] *= std::sqrt(2.5);
        basisvalues2[8] *= std::sqrt(3.5);
        basisvalues2[7] *= std::sqrt(5.25);
        basisvalues2[1] *= std::sqrt(7.5);
        basisvalues2[6] *= std::sqrt(10.5);
        basisvalues2[5] *= std::sqrt(15.75);
        basisvalues2[4] *= std::sqrt(26.25);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 6] += coefficients6[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 7] += coefficients7[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 8] += coefficients8[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 9] += coefficients9[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 10 * num_derivatives, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][10][10] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][10] = { { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 } };
    static const double coefficients1[1][10] = { { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 } };
    static const double coefficients2[1][10] = { { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 } };
    static const double coefficients3[1][10] = { { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 } };
    static const double coefficients4[1][10] = { { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 } };
    static const double coefficients5[1][10] = { { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 } };
    static const double coefficients6[1][10] = { { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 } };
    static const double coefficients7[1][10] = { { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 } };
    static const double coefficients8[1][10] = { { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 } };
    static const double coefficients9[1][10] = { { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 } };
    const std::size_t reference_offset[10] = {};
    const std::size_t num_components[10] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][9][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 0, 2 },
            { 1, 0 },
            { 1, 1 },
            { 1, 2 },
            { 2, 0 },
            { 2, 1 },
            { 2, 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[10] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues2[4] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp2_2 * basisvalues2[0];
        basisvalues2[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues2[0];
        basisvalues2[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues2[1];
        const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_2 = 0.5 * (1.0 - Y[2]);
        const double tmp5_2 = tmp4_2 * tmp4_2;
        basisvalues2[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues2[2] - 0.5555555555555556 * tmp5_2 * basisvalues2[0];
        basisvalues2[3] = (2.0 * Y[2] + 1.0) * basisvalues2[0];
        basisvalues2[8] = (3.0 * Y[2] + 2.0) * basisvalues2[2];
        basisvalues2[6] = (3.0 * Y[2] + 2.0) * basisvalues2[1];
        basisvalues2[9] = (0.3125 + 1.875 * Y[2]) * basisvalues2[3] - 0.5625 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.75);
        basisvalues2[3] *= std::sqrt(1.25);
        basisvalues2[9] *= std::sqrt(1.75);
        basisvalues2[2] *= std::sqrt(2.5);
        basisvalues2[8] *= std::sqrt(3.5);
        basisvalues2[7] *= std::sqrt(5.25);
        basisvalues2[1] *= std::sqrt(7.5);
        basisvalues2[6] *= std::sqrt(10.5);
        basisvalues2[5] *= std::sqrt(15.75);
        basisvalues2[4] *= std::sqrt(26.25);
        // Loop over all dofs
        for (std::size_t i = 0; i < 10; ++i)
        {
            double derivatives[9] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[10 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[2][9][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 0, 2 },
            { 1, 0 },
            { 1, 1 },
            { 1, 2 },
            { 2, 0 },
            { 2, 1 },
            { 2, 2 } } };
    std::fill_n(values, num_points * 10 * num_derivatives, 0.0);
    const std::size_t reference_offsets[10] = {};
    const std::size_t physical_offsets[10] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[9][9];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 10; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[10 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[10 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[10];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[10];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 10; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][9][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 0, 2 },
            { 1, 0 },
            { 1, 1 },
            { 1, 2 },
            { 2, 0 },
            { 2, 1 },
            { 2, 2 } } };
    // Declare transformation matrix
    double transform[9][9] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 10, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[9] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 10; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 7] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 8 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 8 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 9] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[30] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0 };
    std::copy_n(dof_X, 30, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new p2_tet_stokes_full_tet_finite_element_2();
  }

};


class p2_tet_stokes_full_tet_dofmap_0: public ufc::dofmap
{
public:

  p2_tet_stokes_full_tet_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~p2_tet_stokes_full_tet_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 4;
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 2, 3, 4 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new p2_tet_stokes_full_tet_dofmap_0();
  }

};


class p2_tet_stokes_full_tet_dofmap_1: public ufc::dofmap
{
public:

  p2_tet_stokes_full_tet_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~p2_tet_stokes_full_tet_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 12;
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 6, 9, 12 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 10;
            dofs[5] = 11;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            dofs[4] = 9;
            dofs[5] = 11;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 9;
            dofs[5] = 10;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 11;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 9;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 11;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 10;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_dofmap_0();
    case 1:
        return new p2_tet_stokes_full_tet_dofmap_0();
    case 2:
        return new p2_tet_stokes_full_tet_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new p2_tet_stokes_full_tet_dofmap_1();
  }

};


class p2_tet_stokes_full_tet_dofmap_2: public ufc::dofmap
{
public:

  p2_tet_stokes_full_tet_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~p2_tet_stokes_full_tet_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, true, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0] + num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 10;
  }

  std::size_t num_element_dofs() const final override
  {
    return 10;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 6;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 1, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 3, 6, 10 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[1][0];
    dofs[5] = offset + entity_indices[1][1];
    dofs[6] = offset + entity_indices[1][2];
    dofs[7] = offset + entity_indices[1][3];
    dofs[8] = offset + entity_indices[1][4];
    dofs[9] = offset + entity_indices[1][5];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 7;
        dofs[5] = 8;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 7;
        dofs[5] = 9;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 9;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 4;
            break;
        case 1:
            dofs[0] = 5;
            break;
        case 2:
            dofs[0] = 6;
            break;
        case 3:
            dofs[0] = 7;
            break;
        case 4:
            dofs[0] = 8;
            break;
        case 5:
            dofs[0] = 9;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 4;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 6;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 7;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 8;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 9;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 7;
            dofs[5] = 8;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 7;
            dofs[5] = 9;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new p2_tet_stokes_full_tet_dofmap_2();
  }

};


class p2_tet_stokes_full_tet_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  p2_tet_stokes_full_tet_coordinate_mapping_1() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~p2_tet_stokes_full_tet_coordinate_mapping_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new p2_tet_stokes_full_tet_coordinate_mapping_1();
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new p2_tet_stokes_full_tet_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new p2_tet_stokes_full_tet_dofmap_1();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    p2_tet_stokes_full_tet_finite_element_0 xelement;
    double phi[4];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[3 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t d = 0; d < 4; ++d)
                x[3 * ip + i] += coordinate_dofs[3 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double J[9];
    double detJ[1];
    double K[9];
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    p2_tet_stokes_full_tet_finite_element_0 xelement;
    double dphi[12];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[3 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t j = 0; j < 3; ++j)
                for (std::size_t d = 0; d < 4; ++d)
                    J[3 * 3 * ip + 3 * i + j] += coordinate_dofs[3 * d + i] * dphi[3 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[3 * 3 * ip] * (J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2 + 2] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) + J[3 * 3 * ip + 1] * (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 2]) + J[3 * 3 * ip + 2] * (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2]);
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[3 * 3 * ip] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 1] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2 + 2]) / detJ[ip];
        K[3 * 3 * ip + 2] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 + 2] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3] = (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3]) / detJ[ip];
        K[3 * 3 * ip + 3 + 1] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2]) / detJ[ip];
        K[3 * 3 * ip + 3 + 2] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2] = (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 * 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 1] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 2] = (J[3 * 3 * ip] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3]) / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[4] = { 0.25000000000000006, 0.24999999999999997, 0.25, 0.25 };
    const double dphi_Xm[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t d = 0; d < 4; ++d)
            x[i] += coordinate_dofs[3 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t d = 0; d < 4; ++d)
                J[3 * i + j] += coordinate_dofs[3 * d + i] * dphi_Xm[j][d];
  }

};


class p2_tet_stokes_full_tet_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  p2_tet_stokes_full_tet_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~p2_tet_stokes_full_tet_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE8_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q4[0][0][1];
    alignas(32) double sp[110];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = sp[14] * sp[14];
    sp[20] = sp[14] * sp[17];
    sp[21] = sp[18] * sp[14];
    sp[22] = sp[17] * sp[17];
    sp[23] = sp[18] * sp[17];
    sp[24] = sp[18] * sp[18];
    sp[25] = J_c2 * J_c7;
    sp[26] = J_c8 * (-1 * J_c1);
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[27] / sp[13];
    sp[29] = J_c0 * J_c8;
    sp[30] = J_c6 * (-1 * J_c2);
    sp[31] = sp[29] + sp[30];
    sp[32] = sp[31] / sp[13];
    sp[33] = J_c1 * J_c6;
    sp[34] = J_c0 * J_c7;
    sp[35] = sp[33] + -1 * sp[34];
    sp[36] = sp[35] / sp[13];
    sp[37] = sp[28] * sp[28];
    sp[38] = sp[28] * sp[32];
    sp[39] = sp[28] * sp[36];
    sp[40] = sp[32] * sp[32];
    sp[41] = sp[32] * sp[36];
    sp[42] = sp[36] * sp[36];
    sp[43] = sp[37] + sp[19];
    sp[44] = sp[38] + sp[20];
    sp[45] = sp[39] + sp[21];
    sp[46] = sp[40] + sp[22];
    sp[47] = sp[41] + sp[23];
    sp[48] = sp[24] + sp[42];
    sp[49] = J_c1 * J_c5;
    sp[50] = J_c2 * J_c4;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = J_c2 * J_c3;
    sp[54] = J_c0 * J_c5;
    sp[55] = sp[53] + -1 * sp[54];
    sp[56] = sp[55] / sp[13];
    sp[57] = J_c0 * J_c4;
    sp[58] = J_c1 * J_c3;
    sp[59] = sp[57] + -1 * sp[58];
    sp[60] = sp[59] / sp[13];
    sp[61] = sp[52] * sp[52];
    sp[62] = sp[52] * sp[56];
    sp[63] = sp[60] * sp[52];
    sp[64] = sp[56] * sp[56];
    sp[65] = sp[60] * sp[56];
    sp[66] = sp[60] * sp[60];
    sp[67] = sp[43] + sp[61];
    sp[68] = sp[44] + sp[62];
    sp[69] = sp[45] + sp[63];
    sp[70] = sp[46] + sp[64];
    sp[71] = sp[47] + sp[65];
    sp[72] = sp[48] + sp[66];
    sp[73] = 0.6666666666666666 * sp[14] * sp[14];
    sp[74] = 0.6666666666666666 * sp[17] * sp[14];
    sp[75] = 0.6666666666666666 * sp[18] * sp[14];
    sp[76] = 0.6666666666666666 * sp[14] * sp[17];
    sp[77] = 0.6666666666666666 * sp[17] * sp[17];
    sp[78] = 0.6666666666666666 * sp[18] * sp[17];
    sp[79] = 0.6666666666666666 * sp[14] * sp[18];
    sp[80] = 0.6666666666666666 * sp[17] * sp[18];
    sp[81] = 0.6666666666666666 * sp[18] * sp[18];
    sp[82] = -1 * sp[73] + sp[19];
    sp[83] = -1 * sp[74] + sp[20];
    sp[84] = -1 * sp[75] + sp[21];
    sp[85] = -1 * sp[76] + sp[20];
    sp[86] = -1 * sp[77] + sp[22];
    sp[87] = -1 * sp[78] + sp[23];
    sp[88] = -1 * sp[79] + sp[21];
    sp[89] = -1 * sp[80] + sp[23];
    sp[90] = -1 * sp[81] + sp[24];
    sp[91] = sp[67] + sp[82];
    sp[92] = sp[68] + sp[83];
    sp[93] = sp[69] + sp[84];
    sp[94] = sp[68] + sp[85];
    sp[95] = sp[70] + sp[86];
    sp[96] = sp[71] + sp[87];
    sp[97] = sp[69] + sp[88];
    sp[98] = sp[71] + sp[89];
    sp[99] = sp[72] + sp[90];
    sp[100] = std::abs(sp[13]);
    sp[101] = sp[91] * sp[100];
    sp[102] = sp[92] * sp[100];
    sp[103] = sp[93] * sp[100];
    sp[104] = sp[94] * sp[100];
    sp[105] = sp[95] * sp[100];
    sp[106] = sp[96] * sp[100];
    sp[107] = sp[97] * sp[100];
    sp[108] = sp[98] * sp[100];
    sp[109] = sp[99] * sp[100];
    A[0] = 0.1 * sp[101] + 0.1000000000000001 * sp[102] + 0.1000000000000001 * sp[103] + 0.1000000000000001 * sp[104] + 0.1000000000000001 * sp[105] + 0.1000000000000001 * sp[106] + 0.1000000000000001 * sp[107] + 0.1000000000000001 * sp[108] + 0.1000000000000001 * sp[109];
    A[1] = 0.03333333333333326 * sp[101] + 0.03333333333333329 * sp[104] + 0.0333333333333333 * sp[107];
    A[2] = 0.03333333333333337 * sp[102] + 0.03333333333333337 * sp[105] + 0.03333333333333337 * sp[108];
    A[3] = 0.03333333333333338 * sp[103] + 0.0333333333333334 * sp[106] + 0.03333333333333338 * sp[109];
    A[4] = 0.03333333333333456 * sp[102] + 0.03333333333333449 * sp[103] + 0.03333333333333457 * sp[105] + 0.03333333333333449 * sp[106] + 0.03333333333333447 * sp[108] + 0.03333333333333439 * sp[109];
    A[5] = 0.03333333333333458 * sp[101] + 0.0333333333333346 * sp[103] + 0.03333333333333459 * sp[104] + 0.03333333333333463 * sp[106] + 0.03333333333333448 * sp[107] + 0.03333333333333455 * sp[109];
    A[6] = 0.03333333333333456 * sp[101] + 0.03333333333333452 * sp[102] + 0.03333333333333456 * sp[104] + 0.03333333333333455 * sp[105] + 0.03333333333333445 * sp[107] + 0.03333333333333447 * sp[108];
    A[7] = -0.03333333333333456 * sp[101] + -0.03333333333333456 * sp[102] + -0.1333333333333331 * sp[103] + -0.03333333333333457 * sp[104] + -0.03333333333333457 * sp[105] + -0.1333333333333332 * sp[106] + -0.03333333333333448 * sp[107] + -0.03333333333333446 * sp[108] + -0.1333333333333332 * sp[109];
    A[8] = -0.03333333333333455 * sp[101] + -0.1333333333333331 * sp[102] + -0.03333333333333452 * sp[103] + -0.03333333333333455 * sp[104] + -0.1333333333333331 * sp[105] + -0.03333333333333451 * sp[106] + -0.03333333333333446 * sp[107] + -0.1333333333333331 * sp[108] + -0.03333333333333442 * sp[109];
    A[9] = -0.1333333333333331 * sp[101] + -0.03333333333333451 * sp[102] + -0.03333333333333455 * sp[103] + -0.1333333333333331 * sp[104] + -0.03333333333333453 * sp[105] + -0.03333333333333456 * sp[106] + -0.1333333333333331 * sp[107] + -0.03333333333333442 * sp[108] + -0.03333333333333448 * sp[109];
    A[10] = 0.03333333333333326 * sp[101] + 0.03333333333333329 * sp[102] + 0.0333333333333333 * sp[103];
    A[11] = 0.1000000000000001 * sp[101];
    A[12] = -0.03333333333333341 * sp[102];
    A[13] = -0.03333333333333334 * sp[103];
    A[14] = -0.03333333333333321 * sp[102] + -0.03333333333333321 * sp[103];
    A[15] = -0.03333333333333321 * sp[101] + 0.1000000000000003 * sp[103];
    A[16] = -0.03333333333333328 * sp[101] + 0.1000000000000003 * sp[102];
    A[17] = 0.0333333333333332 * sp[101] + 0.03333333333333319 * sp[102];
    A[18] = 0.0333333333333333 * sp[101] + 0.03333333333333326 * sp[103];
    A[19] = -0.1333333333333336 * sp[101] + -0.1000000000000001 * sp[102] + -0.1000000000000002 * sp[103];
    A[20] = 0.03333333333333337 * sp[104] + 0.03333333333333337 * sp[105] + 0.03333333333333337 * sp[106];
    A[21] = -0.03333333333333341 * sp[104];
    A[22] = 0.09999999999999991 * sp[105];
    A[23] = -0.03333333333333332 * sp[106];
    A[24] = -0.03333333333333342 * sp[105] + 0.09999999999999996 * sp[106];
    A[25] = -0.03333333333333345 * sp[104] + -0.03333333333333358 * sp[106];
    A[26] = 0.09999999999999996 * sp[104] + -0.03333333333333334 * sp[105];
    A[27] = 0.03333333333333344 * sp[104] + 0.03333333333333344 * sp[105];
    A[28] = -0.09999999999999995 * sp[104] + -0.1333333333333337 * sp[105] + -0.09999999999999989 * sp[106];
    A[29] = 0.03333333333333342 * sp[105] + 0.03333333333333349 * sp[106];
    A[30] = 0.03333333333333338 * sp[107] + 0.0333333333333334 * sp[108] + 0.03333333333333338 * sp[109];
    A[31] = -0.03333333333333334 * sp[107];
    A[32] = -0.03333333333333332 * sp[108];
    A[33] = 0.1000000000000002 * sp[109];
    A[34] = 0.09999999999999985 * sp[108] + -0.0333333333333339 * sp[109];
    A[35] = 0.09999999999999991 * sp[107] + -0.03333333333333355 * sp[109];
    A[36] = -0.03333333333333374 * sp[107] + -0.03333333333333384 * sp[108];
    A[37] = -0.09999999999999985 * sp[107] + -0.09999999999999985 * sp[108] + -0.1333333333333338 * sp[109];
    A[38] = 0.03333333333333376 * sp[107] + 0.03333333333333376 * sp[109];
    A[39] = 0.03333333333333367 * sp[108] + 0.0333333333333336 * sp[109];
    A[40] = 0.03333333333333456 * sp[104] + 0.03333333333333457 * sp[105] + 0.03333333333333447 * sp[106] + 0.03333333333333449 * sp[107] + 0.03333333333333449 * sp[108] + 0.03333333333333439 * sp[109];
    A[41] = -0.03333333333333321 * sp[104] + -0.03333333333333321 * sp[107];
    A[42] = -0.03333333333333342 * sp[105] + 0.09999999999999996 * sp[108];
    A[43] = 0.09999999999999985 * sp[106] + -0.0333333333333339 * sp[109];
    A[44] = 0.2666666666666679 * sp[105] + 0.1333333333333341 * sp[106] + 0.1333333333333341 * sp[108] + 0.266666666666668 * sp[109];
    A[45] = 0.2666666666666679 * sp[104] + 0.1333333333333353 * sp[106] + 0.1333333333333341 * sp[107] + 0.1333333333333352 * sp[109];
    A[46] = 0.1333333333333342 * sp[104] + 0.1333333333333349 * sp[105] + 0.2666666666666679 * sp[107] + 0.1333333333333352 * sp[108];
    A[47] = -0.2666666666666678 * sp[104] + -0.2666666666666678 * sp[105] + -0.1333333333333345 * sp[106] + -0.133333333333334 * sp[107] + -0.133333333333334 * sp[108];
    A[48] = -0.1333333333333343 * sp[104] + -0.1333333333333341 * sp[106] + -0.2666666666666681 * sp[107] + -0.1333333333333345 * sp[108] + -0.2666666666666678 * sp[109];
    A[49] = -0.1333333333333342 * sp[105] + -0.1333333333333342 * sp[106] + -0.1333333333333343 * sp[108] + -0.1333333333333342 * sp[109];
    A[50] = 0.03333333333333458 * sp[101] + 0.03333333333333459 * sp[102] + 0.03333333333333448 * sp[103] + 0.0333333333333346 * sp[107] + 0.03333333333333463 * sp[108] + 0.03333333333333455 * sp[109];
    A[51] = -0.03333333333333321 * sp[101] + 0.1000000000000003 * sp[107];
    A[52] = -0.03333333333333345 * sp[102] + -0.03333333333333358 * sp[108];
    A[53] = 0.09999999999999991 * sp[103] + -0.03333333333333355 * sp[109];
    A[54] = 0.2666666666666679 * sp[102] + 0.1333333333333341 * sp[103] + 0.1333333333333353 * sp[108] + 0.1333333333333352 * sp[109];
    A[55] = 0.2666666666666679 * sp[101] + 0.1333333333333353 * sp[103] + 0.1333333333333353 * sp[107] + 0.2666666666666697 * sp[109];
    A[56] = 0.1333333333333342 * sp[101] + 0.1333333333333349 * sp[102] + 0.133333333333335 * sp[107] + 0.2666666666666695 * sp[108];
    A[57] = -0.2666666666666678 * sp[101] + -0.2666666666666678 * sp[102] + -0.1333333333333345 * sp[103] + -0.1333333333333352 * sp[107] + -0.1333333333333352 * sp[108];
    A[58] = -0.1333333333333342 * sp[101] + -0.1333333333333341 * sp[103] + -0.1333333333333351 * sp[107] + -0.1333333333333349 * sp[109];
    A[59] = -0.1333333333333342 * sp[102] + -0.1333333333333342 * sp[103] + -0.1333333333333346 * sp[107] + -0.2666666666666686 * sp[108] + -0.2666666666666686 * sp[109];
    A[60] = 0.03333333333333456 * sp[101] + 0.03333333333333456 * sp[102] + 0.03333333333333445 * sp[103] + 0.03333333333333452 * sp[104] + 0.03333333333333455 * sp[105] + 0.03333333333333447 * sp[106];
    A[61] = -0.03333333333333328 * sp[101] + 0.1000000000000003 * sp[104];
    A[62] = 0.09999999999999996 * sp[102] + -0.03333333333333334 * sp[105];
    A[63] = -0.03333333333333374 * sp[103] + -0.03333333333333384 * sp[106];
    A[64] = 0.1333333333333342 * sp[102] + 0.2666666666666679 * sp[103] + 0.1333333333333349 * sp[105] + 0.1333333333333352 * sp[106];
    A[65] = 0.1333333333333342 * sp[101] + 0.133333333333335 * sp[103] + 0.1333333333333349 * sp[104] + 0.2666666666666695 * sp[106];
    A[66] = 0.2666666666666678 * sp[101] + 0.1333333333333351 * sp[102] + 0.1333333333333351 * sp[104] + 0.2666666666666693 * sp[105];
    A[67] = -0.1333333333333341 * sp[101] + -0.1333333333333342 * sp[102] + -0.1333333333333348 * sp[104] + -0.1333333333333348 * sp[105];
    A[68] = -0.2666666666666679 * sp[101] + -0.1333333333333345 * sp[102] + -0.2666666666666676 * sp[103] + -0.1333333333333352 * sp[104] + -0.133333333333335 * sp[106];
    A[69] = -0.1333333333333342 * sp[102] + -0.1333333333333341 * sp[103] + -0.1333333333333344 * sp[104] + -0.2666666666666684 * sp[105] + -0.2666666666666684 * sp[106];
    A[70] = -0.03333333333333456 * sp[101] + -0.03333333333333457 * sp[102] + -0.03333333333333448 * sp[103] + -0.03333333333333456 * sp[104] + -0.03333333333333457 * sp[105] + -0.03333333333333446 * sp[106] + -0.1333333333333331 * sp[107] + -0.1333333333333332 * sp[108] + -0.1333333333333332 * sp[109];
    A[71] = 0.0333333333333332 * sp[101] + 0.03333333333333319 * sp[104];
    A[72] = 0.03333333333333344 * sp[102] + 0.03333333333333344 * sp[105];
    A[73] = -0.09999999999999985 * sp[103] + -0.09999999999999985 * sp[106] + -0.1333333333333338 * sp[109];
    A[74] = -0.2666666666666678 * sp[102] + -0.133333333333334 * sp[103] + -0.2666666666666678 * sp[105] + -0.133333333333334 * sp[106] + -0.1333333333333345 * sp[108];
    A[75] = -0.2666666666666678 * sp[101] + -0.1333333333333352 * sp[103] + -0.2666666666666678 * sp[104] + -0.1333333333333352 * sp[106] + -0.1333333333333345 * sp[107];
    A[76] = -0.1333333333333341 * sp[101] + -0.1333333333333348 * sp[102] + -0.1333333333333342 * sp[104] + -0.1333333333333348 * sp[105];
    A[77] = 0.2666666666666677 * sp[101] + 0.2666666666666677 * sp[102] + 0.1333333333333344 * sp[103] + 0.2666666666666677 * sp[104] + 0.2666666666666677 * sp[105] + 0.1333333333333344 * sp[106] + 0.1333333333333344 * sp[107] + 0.1333333333333344 * sp[108] + 0.2666666666666669 * sp[109];
    A[78] = 0.1333333333333342 * sp[101] + 0.133333333333334 * sp[103] + 0.1333333333333342 * sp[104] + 0.133333333333334 * sp[106] + 0.1333333333333322 * sp[108];
    A[79] = 0.1333333333333341 * sp[102] + 0.1333333333333342 * sp[103] + 0.1333333333333342 * sp[105] + 0.1333333333333342 * sp[106] + 0.1333333333333322 * sp[107];
    A[80] = -0.03333333333333455 * sp[101] + -0.03333333333333455 * sp[102] + -0.03333333333333446 * sp[103] + -0.1333333333333331 * sp[104] + -0.1333333333333331 * sp[105] + -0.1333333333333331 * sp[106] + -0.03333333333333452 * sp[107] + -0.03333333333333451 * sp[108] + -0.03333333333333442 * sp[109];
    A[81] = 0.0333333333333333 * sp[101] + 0.03333333333333326 * sp[107];
    A[82] = -0.09999999999999995 * sp[102] + -0.1333333333333337 * sp[105] + -0.09999999999999989 * sp[108];
    A[83] = 0.03333333333333376 * sp[103] + 0.03333333333333376 * sp[109];
    A[84] = -0.1333333333333343 * sp[102] + -0.2666666666666681 * sp[103] + -0.1333333333333345 * sp[106] + -0.1333333333333341 * sp[108] + -0.2666666666666678 * sp[109];
    A[85] = -0.1333333333333342 * sp[101] + -0.1333333333333351 * sp[103] + -0.1333333333333341 * sp[107] + -0.1333333333333349 * sp[109];
    A[86] = -0.2666666666666679 * sp[101] + -0.1333333333333352 * sp[102] + -0.1333333333333345 * sp[104] + -0.2666666666666676 * sp[107] + -0.133333333333335 * sp[108];
    A[87] = 0.1333333333333342 * sp[101] + 0.1333333333333342 * sp[102] + 0.1333333333333322 * sp[106] + 0.133333333333334 * sp[107] + 0.133333333333334 * sp[108];
    A[88] = 0.2666666666666681 * sp[101] + 0.1333333333333345 * sp[102] + 0.2666666666666677 * sp[103] + 0.1333333333333345 * sp[104] + 0.2666666666666668 * sp[105] + 0.1333333333333344 * sp[106] + 0.2666666666666677 * sp[107] + 0.1333333333333344 * sp[108] + 0.2666666666666674 * sp[109];
    A[89] = 0.1333333333333343 * sp[102] + 0.1333333333333341 * sp[103] + 0.1333333333333321 * sp[104] + 0.1333333333333341 * sp[108] + 0.133333333333334 * sp[109];
    A[90] = -0.1333333333333331 * sp[101] + -0.1333333333333331 * sp[102] + -0.1333333333333331 * sp[103] + -0.03333333333333451 * sp[104] + -0.03333333333333453 * sp[105] + -0.03333333333333442 * sp[106] + -0.03333333333333455 * sp[107] + -0.03333333333333456 * sp[108] + -0.03333333333333448 * sp[109];
    A[91] = -0.1333333333333336 * sp[101] + -0.1000000000000001 * sp[104] + -0.1000000000000002 * sp[107];
    A[92] = 0.03333333333333342 * sp[105] + 0.03333333333333349 * sp[108];
    A[93] = 0.03333333333333367 * sp[106] + 0.0333333333333336 * sp[109];
    A[94] = -0.1333333333333342 * sp[105] + -0.1333333333333343 * sp[106] + -0.1333333333333342 * sp[108] + -0.1333333333333342 * sp[109];
    A[95] = -0.1333333333333346 * sp[103] + -0.1333333333333342 * sp[104] + -0.2666666666666686 * sp[106] + -0.1333333333333342 * sp[107] + -0.2666666666666686 * sp[109];
    A[96] = -0.1333333333333344 * sp[102] + -0.1333333333333342 * sp[104] + -0.2666666666666684 * sp[105] + -0.1333333333333341 * sp[107] + -0.2666666666666684 * sp[108];
    A[97] = 0.1333333333333322 * sp[103] + 0.1333333333333341 * sp[104] + 0.1333333333333342 * sp[105] + 0.1333333333333342 * sp[107] + 0.1333333333333342 * sp[108];
    A[98] = 0.1333333333333321 * sp[102] + 0.1333333333333343 * sp[104] + 0.1333333333333341 * sp[106] + 0.1333333333333341 * sp[107] + 0.133333333333334 * sp[109];
    A[99] = 0.2666666666666667 * sp[101] + 0.1333333333333343 * sp[102] + 0.1333333333333344 * sp[103] + 0.1333333333333343 * sp[104] + 0.2666666666666674 * sp[105] + 0.2666666666666674 * sp[106] + 0.1333333333333344 * sp[107] + 0.2666666666666674 * sp[108] + 0.2666666666666674 * sp[109];
  }

};


class p2_tet_stokes_full_tet_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  p2_tet_stokes_full_tet_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~p2_tet_stokes_full_tet_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE8_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q4[0][0][1];
    alignas(32) double sp[68];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = sp[22] * sp[14];
    sp[32] = sp[26] * sp[14];
    sp[33] = sp[30] * sp[14];
    sp[34] = sp[22] * sp[17];
    sp[35] = sp[26] * sp[17];
    sp[36] = sp[30] * sp[17];
    sp[37] = sp[22] * sp[18];
    sp[38] = sp[26] * sp[18];
    sp[39] = sp[18] * sp[30];
    sp[40] = 0.6666666666666666 * sp[22] * sp[14];
    sp[41] = 0.6666666666666666 * sp[26] * sp[14];
    sp[42] = 0.6666666666666666 * sp[30] * sp[14];
    sp[43] = 0.6666666666666666 * sp[22] * sp[17];
    sp[44] = 0.6666666666666666 * sp[26] * sp[17];
    sp[45] = 0.6666666666666666 * sp[30] * sp[17];
    sp[46] = 0.6666666666666666 * sp[22] * sp[18];
    sp[47] = 0.6666666666666666 * sp[26] * sp[18];
    sp[48] = 0.6666666666666666 * sp[30] * sp[18];
    sp[49] = -1 * sp[40] + sp[31];
    sp[50] = -1 * sp[43] + sp[32];
    sp[51] = -1 * sp[46] + sp[33];
    sp[52] = -1 * sp[41] + sp[34];
    sp[53] = -1 * sp[44] + sp[35];
    sp[54] = -1 * sp[47] + sp[36];
    sp[55] = -1 * sp[42] + sp[37];
    sp[56] = -1 * sp[45] + sp[38];
    sp[57] = -1 * sp[48] + sp[39];
    sp[58] = std::abs(sp[13]);
    sp[59] = sp[49] * sp[58];
    sp[60] = sp[50] * sp[58];
    sp[61] = sp[51] * sp[58];
    sp[62] = sp[52] * sp[58];
    sp[63] = sp[53] * sp[58];
    sp[64] = sp[54] * sp[58];
    sp[65] = sp[55] * sp[58];
    sp[66] = sp[56] * sp[58];
    sp[67] = sp[57] * sp[58];
    A[0] = 0.1 * sp[59] + 0.1000000000000001 * sp[62] + 0.1000000000000001 * sp[65] + 0.1000000000000001 * sp[60] + 0.1000000000000001 * sp[63] + 0.1000000000000001 * sp[66] + 0.1000000000000001 * sp[61] + 0.1000000000000001 * sp[64] + 0.1000000000000001 * sp[67];
    A[1] = 0.03333333333333326 * sp[59] + 0.03333333333333329 * sp[60] + 0.0333333333333333 * sp[61];
    A[2] = 0.03333333333333337 * sp[62] + 0.03333333333333337 * sp[63] + 0.03333333333333337 * sp[64];
    A[3] = 0.03333333333333338 * sp[65] + 0.0333333333333334 * sp[66] + 0.03333333333333338 * sp[67];
    A[4] = 0.03333333333333456 * sp[62] + 0.03333333333333449 * sp[65] + 0.03333333333333457 * sp[63] + 0.03333333333333449 * sp[66] + 0.03333333333333447 * sp[64] + 0.03333333333333439 * sp[67];
    A[5] = 0.03333333333333458 * sp[59] + 0.0333333333333346 * sp[65] + 0.03333333333333459 * sp[60] + 0.03333333333333463 * sp[66] + 0.03333333333333448 * sp[61] + 0.03333333333333455 * sp[67];
    A[6] = 0.03333333333333456 * sp[59] + 0.03333333333333452 * sp[62] + 0.03333333333333456 * sp[60] + 0.03333333333333455 * sp[63] + 0.03333333333333445 * sp[61] + 0.03333333333333447 * sp[64];
    A[7] = -0.03333333333333456 * sp[59] + -0.03333333333333456 * sp[62] + -0.1333333333333331 * sp[65] + -0.03333333333333457 * sp[60] + -0.03333333333333457 * sp[63] + -0.1333333333333332 * sp[66] + -0.03333333333333448 * sp[61] + -0.03333333333333446 * sp[64] + -0.1333333333333332 * sp[67];
    A[8] = -0.03333333333333455 * sp[59] + -0.1333333333333331 * sp[62] + -0.03333333333333452 * sp[65] + -0.03333333333333455 * sp[60] + -0.1333333333333331 * sp[63] + -0.03333333333333451 * sp[66] + -0.03333333333333446 * sp[61] + -0.1333333333333331 * sp[64] + -0.03333333333333442 * sp[67];
    A[9] = -0.1333333333333331 * sp[59] + -0.03333333333333451 * sp[62] + -0.03333333333333455 * sp[65] + -0.1333333333333331 * sp[60] + -0.03333333333333453 * sp[63] + -0.03333333333333456 * sp[66] + -0.1333333333333331 * sp[61] + -0.03333333333333442 * sp[64] + -0.03333333333333448 * sp[67];
    A[10] = 0.03333333333333326 * sp[59] + 0.03333333333333329 * sp[62] + 0.0333333333333333 * sp[65];
    A[11] = 0.1000000000000001 * sp[59];
    A[12] = -0.03333333333333341 * sp[62];
    A[13] = -0.03333333333333334 * sp[65];
    A[14] = -0.03333333333333321 * sp[62] + -0.03333333333333321 * sp[65];
    A[15] = -0.03333333333333321 * sp[59] + 0.1000000000000003 * sp[65];
    A[16] = -0.03333333333333328 * sp[59] + 0.1000000000000003 * sp[62];
    A[17] = 0.0333333333333332 * sp[59] + 0.03333333333333319 * sp[62];
    A[18] = 0.0333333333333333 * sp[59] + 0.03333333333333326 * sp[65];
    A[19] = -0.1333333333333336 * sp[59] + -0.1000000000000001 * sp[62] + -0.1000000000000002 * sp[65];
    A[20] = 0.03333333333333337 * sp[60] + 0.03333333333333337 * sp[63] + 0.03333333333333337 * sp[66];
    A[21] = -0.03333333333333341 * sp[60];
    A[22] = 0.09999999999999991 * sp[63];
    A[23] = -0.03333333333333332 * sp[66];
    A[24] = -0.03333333333333342 * sp[63] + 0.09999999999999996 * sp[66];
    A[25] = -0.03333333333333345 * sp[60] + -0.03333333333333358 * sp[66];
    A[26] = 0.09999999999999996 * sp[60] + -0.03333333333333334 * sp[63];
    A[27] = 0.03333333333333344 * sp[60] + 0.03333333333333344 * sp[63];
    A[28] = -0.09999999999999995 * sp[60] + -0.1333333333333337 * sp[63] + -0.09999999999999989 * sp[66];
    A[29] = 0.03333333333333342 * sp[63] + 0.03333333333333349 * sp[66];
    A[30] = 0.03333333333333338 * sp[61] + 0.0333333333333334 * sp[64] + 0.03333333333333338 * sp[67];
    A[31] = -0.03333333333333334 * sp[61];
    A[32] = -0.03333333333333332 * sp[64];
    A[33] = 0.1000000000000002 * sp[67];
    A[34] = 0.09999999999999985 * sp[64] + -0.0333333333333339 * sp[67];
    A[35] = 0.09999999999999991 * sp[61] + -0.03333333333333355 * sp[67];
    A[36] = -0.03333333333333374 * sp[61] + -0.03333333333333384 * sp[64];
    A[37] = -0.09999999999999985 * sp[61] + -0.09999999999999985 * sp[64] + -0.1333333333333338 * sp[67];
    A[38] = 0.03333333333333376 * sp[61] + 0.03333333333333376 * sp[67];
    A[39] = 0.03333333333333367 * sp[64] + 0.0333333333333336 * sp[67];
    A[40] = 0.03333333333333456 * sp[60] + 0.03333333333333457 * sp[63] + 0.03333333333333447 * sp[66] + 0.03333333333333449 * sp[61] + 0.03333333333333449 * sp[64] + 0.03333333333333439 * sp[67];
    A[41] = -0.03333333333333321 * sp[60] + -0.03333333333333321 * sp[61];
    A[42] = -0.03333333333333342 * sp[63] + 0.09999999999999996 * sp[64];
    A[43] = 0.09999999999999985 * sp[66] + -0.0333333333333339 * sp[67];
    A[44] = 0.2666666666666679 * sp[63] + 0.1333333333333341 * sp[66] + 0.1333333333333341 * sp[64] + 0.266666666666668 * sp[67];
    A[45] = 0.2666666666666679 * sp[60] + 0.1333333333333353 * sp[66] + 0.1333333333333341 * sp[61] + 0.1333333333333352 * sp[67];
    A[46] = 0.1333333333333342 * sp[60] + 0.1333333333333349 * sp[63] + 0.2666666666666679 * sp[61] + 0.1333333333333352 * sp[64];
    A[47] = -0.2666666666666678 * sp[60] + -0.2666666666666678 * sp[63] + -0.1333333333333345 * sp[66] + -0.133333333333334 * sp[61] + -0.133333333333334 * sp[64];
    A[48] = -0.1333333333333343 * sp[60] + -0.1333333333333341 * sp[66] + -0.2666666666666681 * sp[61] + -0.1333333333333345 * sp[64] + -0.2666666666666678 * sp[67];
    A[49] = -0.1333333333333342 * sp[63] + -0.1333333333333342 * sp[66] + -0.1333333333333343 * sp[64] + -0.1333333333333342 * sp[67];
    A[50] = 0.03333333333333458 * sp[59] + 0.03333333333333459 * sp[62] + 0.03333333333333448 * sp[65] + 0.0333333333333346 * sp[61] + 0.03333333333333463 * sp[64] + 0.03333333333333455 * sp[67];
    A[51] = -0.03333333333333321 * sp[59] + 0.1000000000000003 * sp[61];
    A[52] = -0.03333333333333345 * sp[62] + -0.03333333333333358 * sp[64];
    A[53] = 0.09999999999999991 * sp[65] + -0.03333333333333355 * sp[67];
    A[54] = 0.2666666666666679 * sp[62] + 0.1333333333333341 * sp[65] + 0.1333333333333353 * sp[64] + 0.1333333333333352 * sp[67];
    A[55] = 0.2666666666666679 * sp[59] + 0.1333333333333353 * sp[65] + 0.1333333333333353 * sp[61] + 0.2666666666666697 * sp[67];
    A[56] = 0.1333333333333342 * sp[59] + 0.1333333333333349 * sp[62] + 0.133333333333335 * sp[61] + 0.2666666666666695 * sp[64];
    A[57] = -0.2666666666666678 * sp[59] + -0.2666666666666678 * sp[62] + -0.1333333333333345 * sp[65] + -0.1333333333333352 * sp[61] + -0.1333333333333352 * sp[64];
    A[58] = -0.1333333333333342 * sp[59] + -0.1333333333333341 * sp[65] + -0.1333333333333351 * sp[61] + -0.1333333333333349 * sp[67];
    A[59] = -0.1333333333333342 * sp[62] + -0.1333333333333342 * sp[65] + -0.1333333333333346 * sp[61] + -0.2666666666666686 * sp[64] + -0.2666666666666686 * sp[67];
    A[60] = 0.03333333333333456 * sp[59] + 0.03333333333333456 * sp[62] + 0.03333333333333445 * sp[65] + 0.03333333333333452 * sp[60] + 0.03333333333333455 * sp[63] + 0.03333333333333447 * sp[66];
    A[61] = -0.03333333333333328 * sp[59] + 0.1000000000000003 * sp[60];
    A[62] = 0.09999999999999996 * sp[62] + -0.03333333333333334 * sp[63];
    A[63] = -0.03333333333333374 * sp[65] + -0.03333333333333384 * sp[66];
    A[64] = 0.1333333333333342 * sp[62] + 0.2666666666666679 * sp[65] + 0.1333333333333349 * sp[63] + 0.1333333333333352 * sp[66];
    A[65] = 0.1333333333333342 * sp[59] + 0.133333333333335 * sp[65] + 0.1333333333333349 * sp[60] + 0.2666666666666695 * sp[66];
    A[66] = 0.2666666666666678 * sp[59] + 0.1333333333333351 * sp[62] + 0.1333333333333351 * sp[60] + 0.2666666666666693 * sp[63];
    A[67] = -0.1333333333333341 * sp[59] + -0.1333333333333342 * sp[62] + -0.1333333333333348 * sp[60] + -0.1333333333333348 * sp[63];
    A[68] = -0.2666666666666679 * sp[59] + -0.1333333333333345 * sp[62] + -0.2666666666666676 * sp[65] + -0.1333333333333352 * sp[60] + -0.133333333333335 * sp[66];
    A[69] = -0.1333333333333342 * sp[62] + -0.1333333333333341 * sp[65] + -0.1333333333333344 * sp[60] + -0.2666666666666684 * sp[63] + -0.2666666666666684 * sp[66];
    A[70] = -0.03333333333333456 * sp[59] + -0.03333333333333457 * sp[62] + -0.03333333333333448 * sp[65] + -0.03333333333333456 * sp[60] + -0.03333333333333457 * sp[63] + -0.03333333333333446 * sp[66] + -0.1333333333333331 * sp[61] + -0.1333333333333332 * sp[64] + -0.1333333333333332 * sp[67];
    A[71] = 0.0333333333333332 * sp[59] + 0.03333333333333319 * sp[60];
    A[72] = 0.03333333333333344 * sp[62] + 0.03333333333333344 * sp[63];
    A[73] = -0.09999999999999985 * sp[65] + -0.09999999999999985 * sp[66] + -0.1333333333333338 * sp[67];
    A[74] = -0.2666666666666678 * sp[62] + -0.133333333333334 * sp[65] + -0.2666666666666678 * sp[63] + -0.133333333333334 * sp[66] + -0.1333333333333345 * sp[64];
    A[75] = -0.2666666666666678 * sp[59] + -0.1333333333333352 * sp[65] + -0.2666666666666678 * sp[60] + -0.1333333333333352 * sp[66] + -0.1333333333333345 * sp[61];
    A[76] = -0.1333333333333341 * sp[59] + -0.1333333333333348 * sp[62] + -0.1333333333333342 * sp[60] + -0.1333333333333348 * sp[63];
    A[77] = 0.2666666666666677 * sp[59] + 0.2666666666666677 * sp[62] + 0.1333333333333344 * sp[65] + 0.2666666666666677 * sp[60] + 0.2666666666666677 * sp[63] + 0.1333333333333344 * sp[66] + 0.1333333333333344 * sp[61] + 0.1333333333333344 * sp[64] + 0.2666666666666669 * sp[67];
    A[78] = 0.1333333333333342 * sp[59] + 0.133333333333334 * sp[65] + 0.1333333333333342 * sp[60] + 0.133333333333334 * sp[66] + 0.1333333333333322 * sp[64];
    A[79] = 0.1333333333333341 * sp[62] + 0.1333333333333342 * sp[65] + 0.1333333333333342 * sp[63] + 0.1333333333333342 * sp[66] + 0.1333333333333322 * sp[61];
    A[80] = -0.03333333333333455 * sp[59] + -0.03333333333333455 * sp[62] + -0.03333333333333446 * sp[65] + -0.1333333333333331 * sp[60] + -0.1333333333333331 * sp[63] + -0.1333333333333331 * sp[66] + -0.03333333333333452 * sp[61] + -0.03333333333333451 * sp[64] + -0.03333333333333442 * sp[67];
    A[81] = 0.0333333333333333 * sp[59] + 0.03333333333333326 * sp[61];
    A[82] = -0.09999999999999995 * sp[62] + -0.1333333333333337 * sp[63] + -0.09999999999999989 * sp[64];
    A[83] = 0.03333333333333376 * sp[65] + 0.03333333333333376 * sp[67];
    A[84] = -0.1333333333333343 * sp[62] + -0.2666666666666681 * sp[65] + -0.1333333333333345 * sp[66] + -0.1333333333333341 * sp[64] + -0.2666666666666678 * sp[67];
    A[85] = -0.1333333333333342 * sp[59] + -0.1333333333333351 * sp[65] + -0.1333333333333341 * sp[61] + -0.1333333333333349 * sp[67];
    A[86] = -0.2666666666666679 * sp[59] + -0.1333333333333352 * sp[62] + -0.1333333333333345 * sp[60] + -0.2666666666666676 * sp[61] + -0.133333333333335 * sp[64];
    A[87] = 0.1333333333333342 * sp[59] + 0.1333333333333342 * sp[62] + 0.1333333333333322 * sp[66] + 0.133333333333334 * sp[61] + 0.133333333333334 * sp[64];
    A[88] = 0.2666666666666681 * sp[59] + 0.1333333333333345 * sp[62] + 0.2666666666666677 * sp[65] + 0.1333333333333345 * sp[60] + 0.2666666666666668 * sp[63] + 0.1333333333333344 * sp[66] + 0.2666666666666677 * sp[61] + 0.1333333333333344 * sp[64] + 0.2666666666666674 * sp[67];
    A[89] = 0.1333333333333343 * sp[62] + 0.1333333333333341 * sp[65] + 0.1333333333333321 * sp[60] + 0.1333333333333341 * sp[64] + 0.133333333333334 * sp[67];
    A[90] = -0.1333333333333331 * sp[59] + -0.1333333333333331 * sp[62] + -0.1333333333333331 * sp[65] + -0.03333333333333451 * sp[60] + -0.03333333333333453 * sp[63] + -0.03333333333333442 * sp[66] + -0.03333333333333455 * sp[61] + -0.03333333333333456 * sp[64] + -0.03333333333333448 * sp[67];
    A[91] = -0.1333333333333336 * sp[59] + -0.1000000000000001 * sp[60] + -0.1000000000000002 * sp[61];
    A[92] = 0.03333333333333342 * sp[63] + 0.03333333333333349 * sp[64];
    A[93] = 0.03333333333333367 * sp[66] + 0.0333333333333336 * sp[67];
    A[94] = -0.1333333333333342 * sp[63] + -0.1333333333333343 * sp[66] + -0.1333333333333342 * sp[64] + -0.1333333333333342 * sp[67];
    A[95] = -0.1333333333333346 * sp[65] + -0.1333333333333342 * sp[60] + -0.2666666666666686 * sp[66] + -0.1333333333333342 * sp[61] + -0.2666666666666686 * sp[67];
    A[96] = -0.1333333333333344 * sp[62] + -0.1333333333333342 * sp[60] + -0.2666666666666684 * sp[63] + -0.1333333333333341 * sp[61] + -0.2666666666666684 * sp[64];
    A[97] = 0.1333333333333322 * sp[65] + 0.1333333333333341 * sp[60] + 0.1333333333333342 * sp[63] + 0.1333333333333342 * sp[61] + 0.1333333333333342 * sp[64];
    A[98] = 0.1333333333333321 * sp[62] + 0.1333333333333343 * sp[60] + 0.1333333333333341 * sp[66] + 0.1333333333333341 * sp[61] + 0.133333333333334 * sp[67];
    A[99] = 0.2666666666666667 * sp[59] + 0.1333333333333343 * sp[62] + 0.1333333333333344 * sp[65] + 0.1333333333333343 * sp[60] + 0.2666666666666674 * sp[63] + 0.2666666666666674 * sp[66] + 0.1333333333333344 * sp[61] + 0.2666666666666674 * sp[64] + 0.2666666666666674 * sp[67];
  }

};


class p2_tet_stokes_full_tet_cell_integral_2_otherwise: public ufc::cell_integral
{
public:

  p2_tet_stokes_full_tet_cell_integral_2_otherwise() : ufc::cell_integral()
  {

  }

  ~p2_tet_stokes_full_tet_cell_integral_2_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE8_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q4[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q4[0][0][1];
    alignas(32) double sp[68];
    sp[0] = J_c1 * J_c5;
    sp[1] = J_c2 * J_c4;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c4 * J_c8;
    sp[4] = J_c5 * J_c7;
    sp[5] = sp[3] + -1 * sp[4];
    sp[6] = J_c0 * sp[5];
    sp[7] = J_c5 * J_c6;
    sp[8] = J_c3 * J_c8;
    sp[9] = sp[7] + -1 * sp[8];
    sp[10] = J_c1 * sp[9];
    sp[11] = sp[6] + sp[10];
    sp[12] = J_c3 * J_c7;
    sp[13] = J_c4 * J_c6;
    sp[14] = sp[12] + -1 * sp[13];
    sp[15] = J_c2 * sp[14];
    sp[16] = sp[11] + sp[15];
    sp[17] = sp[2] / sp[16];
    sp[18] = J_c2 * J_c3;
    sp[19] = J_c0 * J_c5;
    sp[20] = sp[18] + -1 * sp[19];
    sp[21] = sp[20] / sp[16];
    sp[22] = J_c0 * J_c4;
    sp[23] = J_c1 * J_c3;
    sp[24] = sp[22] + -1 * sp[23];
    sp[25] = sp[24] / sp[16];
    sp[26] = sp[5] / sp[16];
    sp[27] = J_c3 * (-1 * J_c8);
    sp[28] = sp[7] + sp[27];
    sp[29] = sp[28] / sp[16];
    sp[30] = sp[14] / sp[16];
    sp[31] = sp[17] * sp[26];
    sp[32] = sp[17] * sp[29];
    sp[33] = sp[17] * sp[30];
    sp[34] = sp[21] * sp[26];
    sp[35] = sp[21] * sp[29];
    sp[36] = sp[21] * sp[30];
    sp[37] = sp[25] * sp[26];
    sp[38] = sp[25] * sp[29];
    sp[39] = sp[25] * sp[30];
    sp[40] = 0.6666666666666666 * sp[17] * sp[26];
    sp[41] = 0.6666666666666666 * sp[21] * sp[26];
    sp[42] = 0.6666666666666666 * sp[25] * sp[26];
    sp[43] = 0.6666666666666666 * sp[17] * sp[29];
    sp[44] = 0.6666666666666666 * sp[21] * sp[29];
    sp[45] = 0.6666666666666666 * sp[25] * sp[29];
    sp[46] = 0.6666666666666666 * sp[17] * sp[30];
    sp[47] = 0.6666666666666666 * sp[21] * sp[30];
    sp[48] = 0.6666666666666666 * sp[25] * sp[30];
    sp[49] = -1 * sp[40] + sp[31];
    sp[50] = -1 * sp[41] + sp[32];
    sp[51] = -1 * sp[42] + sp[33];
    sp[52] = -1 * sp[43] + sp[34];
    sp[53] = -1 * sp[44] + sp[35];
    sp[54] = -1 * sp[45] + sp[36];
    sp[55] = -1 * sp[46] + sp[37];
    sp[56] = -1 * sp[47] + sp[38];
    sp[57] = -1 * sp[48] + sp[39];
    sp[58] = std::abs(sp[16]);
    sp[59] = sp[49] * sp[58];
    sp[60] = sp[50] * sp[58];
    sp[61] = sp[51] * sp[58];
    sp[62] = sp[52] * sp[58];
    sp[63] = sp[53] * sp[58];
    sp[64] = sp[54] * sp[58];
    sp[65] = sp[55] * sp[58];
    sp[66] = sp[56] * sp[58];
    sp[67] = sp[57] * sp[58];
    A[0] = 0.1 * sp[59] + 0.1000000000000001 * sp[60] + 0.1000000000000001 * sp[61] + 0.1000000000000001 * sp[62] + 0.1000000000000001 * sp[63] + 0.1000000000000001 * sp[64] + 0.1000000000000001 * sp[65] + 0.1000000000000001 * sp[66] + 0.1000000000000001 * sp[67];
    A[1] = 0.03333333333333326 * sp[59] + 0.03333333333333329 * sp[62] + 0.0333333333333333 * sp[65];
    A[2] = 0.03333333333333337 * sp[60] + 0.03333333333333337 * sp[63] + 0.03333333333333337 * sp[66];
    A[3] = 0.03333333333333338 * sp[61] + 0.0333333333333334 * sp[64] + 0.03333333333333338 * sp[67];
    A[4] = 0.03333333333333456 * sp[60] + 0.03333333333333449 * sp[61] + 0.03333333333333457 * sp[63] + 0.03333333333333449 * sp[64] + 0.03333333333333447 * sp[66] + 0.03333333333333439 * sp[67];
    A[5] = 0.03333333333333458 * sp[59] + 0.0333333333333346 * sp[61] + 0.03333333333333459 * sp[62] + 0.03333333333333463 * sp[64] + 0.03333333333333448 * sp[65] + 0.03333333333333455 * sp[67];
    A[6] = 0.03333333333333456 * sp[59] + 0.03333333333333452 * sp[60] + 0.03333333333333456 * sp[62] + 0.03333333333333455 * sp[63] + 0.03333333333333445 * sp[65] + 0.03333333333333447 * sp[66];
    A[7] = -0.03333333333333456 * sp[59] + -0.03333333333333456 * sp[60] + -0.1333333333333331 * sp[61] + -0.03333333333333457 * sp[62] + -0.03333333333333457 * sp[63] + -0.1333333333333332 * sp[64] + -0.03333333333333448 * sp[65] + -0.03333333333333446 * sp[66] + -0.1333333333333332 * sp[67];
    A[8] = -0.03333333333333455 * sp[59] + -0.1333333333333331 * sp[60] + -0.03333333333333452 * sp[61] + -0.03333333333333455 * sp[62] + -0.1333333333333331 * sp[63] + -0.03333333333333451 * sp[64] + -0.03333333333333446 * sp[65] + -0.1333333333333331 * sp[66] + -0.03333333333333442 * sp[67];
    A[9] = -0.1333333333333331 * sp[59] + -0.03333333333333451 * sp[60] + -0.03333333333333455 * sp[61] + -0.1333333333333331 * sp[62] + -0.03333333333333453 * sp[63] + -0.03333333333333456 * sp[64] + -0.1333333333333331 * sp[65] + -0.03333333333333442 * sp[66] + -0.03333333333333448 * sp[67];
    A[10] = 0.03333333333333326 * sp[59] + 0.03333333333333329 * sp[60] + 0.0333333333333333 * sp[61];
    A[11] = 0.1000000000000001 * sp[59];
    A[12] = -0.03333333333333341 * sp[60];
    A[13] = -0.03333333333333334 * sp[61];
    A[14] = -0.03333333333333321 * sp[60] + -0.03333333333333321 * sp[61];
    A[15] = -0.03333333333333321 * sp[59] + 0.1000000000000003 * sp[61];
    A[16] = -0.03333333333333328 * sp[59] + 0.1000000000000003 * sp[60];
    A[17] = 0.0333333333333332 * sp[59] + 0.03333333333333319 * sp[60];
    A[18] = 0.0333333333333333 * sp[59] + 0.03333333333333326 * sp[61];
    A[19] = -0.1333333333333336 * sp[59] + -0.1000000000000001 * sp[60] + -0.1000000000000002 * sp[61];
    A[20] = 0.03333333333333337 * sp[62] + 0.03333333333333337 * sp[63] + 0.03333333333333337 * sp[64];
    A[21] = -0.03333333333333341 * sp[62];
    A[22] = 0.09999999999999991 * sp[63];
    A[23] = -0.03333333333333332 * sp[64];
    A[24] = -0.03333333333333342 * sp[63] + 0.09999999999999996 * sp[64];
    A[25] = -0.03333333333333345 * sp[62] + -0.03333333333333358 * sp[64];
    A[26] = 0.09999999999999996 * sp[62] + -0.03333333333333334 * sp[63];
    A[27] = 0.03333333333333344 * sp[62] + 0.03333333333333344 * sp[63];
    A[28] = -0.09999999999999995 * sp[62] + -0.1333333333333337 * sp[63] + -0.09999999999999989 * sp[64];
    A[29] = 0.03333333333333342 * sp[63] + 0.03333333333333349 * sp[64];
    A[30] = 0.03333333333333338 * sp[65] + 0.0333333333333334 * sp[66] + 0.03333333333333338 * sp[67];
    A[31] = -0.03333333333333334 * sp[65];
    A[32] = -0.03333333333333332 * sp[66];
    A[33] = 0.1000000000000002 * sp[67];
    A[34] = 0.09999999999999985 * sp[66] + -0.0333333333333339 * sp[67];
    A[35] = 0.09999999999999991 * sp[65] + -0.03333333333333355 * sp[67];
    A[36] = -0.03333333333333374 * sp[65] + -0.03333333333333384 * sp[66];
    A[37] = -0.09999999999999985 * sp[65] + -0.09999999999999985 * sp[66] + -0.1333333333333338 * sp[67];
    A[38] = 0.03333333333333376 * sp[65] + 0.03333333333333376 * sp[67];
    A[39] = 0.03333333333333367 * sp[66] + 0.0333333333333336 * sp[67];
    A[40] = 0.03333333333333456 * sp[62] + 0.03333333333333457 * sp[63] + 0.03333333333333447 * sp[64] + 0.03333333333333449 * sp[65] + 0.03333333333333449 * sp[66] + 0.03333333333333439 * sp[67];
    A[41] = -0.03333333333333321 * sp[62] + -0.03333333333333321 * sp[65];
    A[42] = -0.03333333333333342 * sp[63] + 0.09999999999999996 * sp[66];
    A[43] = 0.09999999999999985 * sp[64] + -0.0333333333333339 * sp[67];
    A[44] = 0.2666666666666679 * sp[63] + 0.1333333333333341 * sp[64] + 0.1333333333333341 * sp[66] + 0.266666666666668 * sp[67];
    A[45] = 0.2666666666666679 * sp[62] + 0.1333333333333353 * sp[64] + 0.1333333333333341 * sp[65] + 0.1333333333333352 * sp[67];
    A[46] = 0.1333333333333342 * sp[62] + 0.1333333333333349 * sp[63] + 0.2666666666666679 * sp[65] + 0.1333333333333352 * sp[66];
    A[47] = -0.2666666666666678 * sp[62] + -0.2666666666666678 * sp[63] + -0.1333333333333345 * sp[64] + -0.133333333333334 * sp[65] + -0.133333333333334 * sp[66];
    A[48] = -0.1333333333333343 * sp[62] + -0.1333333333333341 * sp[64] + -0.2666666666666681 * sp[65] + -0.1333333333333345 * sp[66] + -0.2666666666666678 * sp[67];
    A[49] = -0.1333333333333342 * sp[63] + -0.1333333333333342 * sp[64] + -0.1333333333333343 * sp[66] + -0.1333333333333342 * sp[67];
    A[50] = 0.03333333333333458 * sp[59] + 0.03333333333333459 * sp[60] + 0.03333333333333448 * sp[61] + 0.0333333333333346 * sp[65] + 0.03333333333333463 * sp[66] + 0.03333333333333455 * sp[67];
    A[51] = -0.03333333333333321 * sp[59] + 0.1000000000000003 * sp[65];
    A[52] = -0.03333333333333345 * sp[60] + -0.03333333333333358 * sp[66];
    A[53] = 0.09999999999999991 * sp[61] + -0.03333333333333355 * sp[67];
    A[54] = 0.2666666666666679 * sp[60] + 0.1333333333333341 * sp[61] + 0.1333333333333353 * sp[66] + 0.1333333333333352 * sp[67];
    A[55] = 0.2666666666666679 * sp[59] + 0.1333333333333353 * sp[61] + 0.1333333333333353 * sp[65] + 0.2666666666666697 * sp[67];
    A[56] = 0.1333333333333342 * sp[59] + 0.1333333333333349 * sp[60] + 0.133333333333335 * sp[65] + 0.2666666666666695 * sp[66];
    A[57] = -0.2666666666666678 * sp[59] + -0.2666666666666678 * sp[60] + -0.1333333333333345 * sp[61] + -0.1333333333333352 * sp[65] + -0.1333333333333352 * sp[66];
    A[58] = -0.1333333333333342 * sp[59] + -0.1333333333333341 * sp[61] + -0.1333333333333351 * sp[65] + -0.1333333333333349 * sp[67];
    A[59] = -0.1333333333333342 * sp[60] + -0.1333333333333342 * sp[61] + -0.1333333333333346 * sp[65] + -0.2666666666666686 * sp[66] + -0.2666666666666686 * sp[67];
    A[60] = 0.03333333333333456 * sp[59] + 0.03333333333333456 * sp[60] + 0.03333333333333445 * sp[61] + 0.03333333333333452 * sp[62] + 0.03333333333333455 * sp[63] + 0.03333333333333447 * sp[64];
    A[61] = -0.03333333333333328 * sp[59] + 0.1000000000000003 * sp[62];
    A[62] = 0.09999999999999996 * sp[60] + -0.03333333333333334 * sp[63];
    A[63] = -0.03333333333333374 * sp[61] + -0.03333333333333384 * sp[64];
    A[64] = 0.1333333333333342 * sp[60] + 0.2666666666666679 * sp[61] + 0.1333333333333349 * sp[63] + 0.1333333333333352 * sp[64];
    A[65] = 0.1333333333333342 * sp[59] + 0.133333333333335 * sp[61] + 0.1333333333333349 * sp[62] + 0.2666666666666695 * sp[64];
    A[66] = 0.2666666666666678 * sp[59] + 0.1333333333333351 * sp[60] + 0.1333333333333351 * sp[62] + 0.2666666666666693 * sp[63];
    A[67] = -0.1333333333333341 * sp[59] + -0.1333333333333342 * sp[60] + -0.1333333333333348 * sp[62] + -0.1333333333333348 * sp[63];
    A[68] = -0.2666666666666679 * sp[59] + -0.1333333333333345 * sp[60] + -0.2666666666666676 * sp[61] + -0.1333333333333352 * sp[62] + -0.133333333333335 * sp[64];
    A[69] = -0.1333333333333342 * sp[60] + -0.1333333333333341 * sp[61] + -0.1333333333333344 * sp[62] + -0.2666666666666684 * sp[63] + -0.2666666666666684 * sp[64];
    A[70] = -0.03333333333333456 * sp[59] + -0.03333333333333457 * sp[60] + -0.03333333333333448 * sp[61] + -0.03333333333333456 * sp[62] + -0.03333333333333457 * sp[63] + -0.03333333333333446 * sp[64] + -0.1333333333333331 * sp[65] + -0.1333333333333332 * sp[66] + -0.1333333333333332 * sp[67];
    A[71] = 0.0333333333333332 * sp[59] + 0.03333333333333319 * sp[62];
    A[72] = 0.03333333333333344 * sp[60] + 0.03333333333333344 * sp[63];
    A[73] = -0.09999999999999985 * sp[61] + -0.09999999999999985 * sp[64] + -0.1333333333333338 * sp[67];
    A[74] = -0.2666666666666678 * sp[60] + -0.133333333333334 * sp[61] + -0.2666666666666678 * sp[63] + -0.133333333333334 * sp[64] + -0.1333333333333345 * sp[66];
    A[75] = -0.2666666666666678 * sp[59] + -0.1333333333333352 * sp[61] + -0.2666666666666678 * sp[62] + -0.1333333333333352 * sp[64] + -0.1333333333333345 * sp[65];
    A[76] = -0.1333333333333341 * sp[59] + -0.1333333333333348 * sp[60] + -0.1333333333333342 * sp[62] + -0.1333333333333348 * sp[63];
    A[77] = 0.2666666666666677 * sp[59] + 0.2666666666666677 * sp[60] + 0.1333333333333344 * sp[61] + 0.2666666666666677 * sp[62] + 0.2666666666666677 * sp[63] + 0.1333333333333344 * sp[64] + 0.1333333333333344 * sp[65] + 0.1333333333333344 * sp[66] + 0.2666666666666669 * sp[67];
    A[78] = 0.1333333333333342 * sp[59] + 0.133333333333334 * sp[61] + 0.1333333333333342 * sp[62] + 0.133333333333334 * sp[64] + 0.1333333333333322 * sp[66];
    A[79] = 0.1333333333333341 * sp[60] + 0.1333333333333342 * sp[61] + 0.1333333333333342 * sp[63] + 0.1333333333333342 * sp[64] + 0.1333333333333322 * sp[65];
    A[80] = -0.03333333333333455 * sp[59] + -0.03333333333333455 * sp[60] + -0.03333333333333446 * sp[61] + -0.1333333333333331 * sp[62] + -0.1333333333333331 * sp[63] + -0.1333333333333331 * sp[64] + -0.03333333333333452 * sp[65] + -0.03333333333333451 * sp[66] + -0.03333333333333442 * sp[67];
    A[81] = 0.0333333333333333 * sp[59] + 0.03333333333333326 * sp[65];
    A[82] = -0.09999999999999995 * sp[60] + -0.1333333333333337 * sp[63] + -0.09999999999999989 * sp[66];
    A[83] = 0.03333333333333376 * sp[61] + 0.03333333333333376 * sp[67];
    A[84] = -0.1333333333333343 * sp[60] + -0.2666666666666681 * sp[61] + -0.1333333333333345 * sp[64] + -0.1333333333333341 * sp[66] + -0.2666666666666678 * sp[67];
    A[85] = -0.1333333333333342 * sp[59] + -0.1333333333333351 * sp[61] + -0.1333333333333341 * sp[65] + -0.1333333333333349 * sp[67];
    A[86] = -0.2666666666666679 * sp[59] + -0.1333333333333352 * sp[60] + -0.1333333333333345 * sp[62] + -0.2666666666666676 * sp[65] + -0.133333333333335 * sp[66];
    A[87] = 0.1333333333333342 * sp[59] + 0.1333333333333342 * sp[60] + 0.1333333333333322 * sp[64] + 0.133333333333334 * sp[65] + 0.133333333333334 * sp[66];
    A[88] = 0.2666666666666681 * sp[59] + 0.1333333333333345 * sp[60] + 0.2666666666666677 * sp[61] + 0.1333333333333345 * sp[62] + 0.2666666666666668 * sp[63] + 0.1333333333333344 * sp[64] + 0.2666666666666677 * sp[65] + 0.1333333333333344 * sp[66] + 0.2666666666666674 * sp[67];
    A[89] = 0.1333333333333343 * sp[60] + 0.1333333333333341 * sp[61] + 0.1333333333333321 * sp[62] + 0.1333333333333341 * sp[66] + 0.133333333333334 * sp[67];
    A[90] = -0.1333333333333331 * sp[59] + -0.1333333333333331 * sp[60] + -0.1333333333333331 * sp[61] + -0.03333333333333451 * sp[62] + -0.03333333333333453 * sp[63] + -0.03333333333333442 * sp[64] + -0.03333333333333455 * sp[65] + -0.03333333333333456 * sp[66] + -0.03333333333333448 * sp[67];
    A[91] = -0.1333333333333336 * sp[59] + -0.1000000000000001 * sp[62] + -0.1000000000000002 * sp[65];
    A[92] = 0.03333333333333342 * sp[63] + 0.03333333333333349 * sp[66];
    A[93] = 0.03333333333333367 * sp[64] + 0.0333333333333336 * sp[67];
    A[94] = -0.1333333333333342 * sp[63] + -0.1333333333333343 * sp[64] + -0.1333333333333342 * sp[66] + -0.1333333333333342 * sp[67];
    A[95] = -0.1333333333333346 * sp[61] + -0.1333333333333342 * sp[62] + -0.2666666666666686 * sp[64] + -0.1333333333333342 * sp[65] + -0.2666666666666686 * sp[67];
    A[96] = -0.1333333333333344 * sp[60] + -0.1333333333333342 * sp[62] + -0.2666666666666684 * sp[63] + -0.1333333333333341 * sp[65] + -0.2666666666666684 * sp[66];
    A[97] = 0.1333333333333322 * sp[61] + 0.1333333333333341 * sp[62] + 0.1333333333333342 * sp[63] + 0.1333333333333342 * sp[65] + 0.1333333333333342 * sp[66];
    A[98] = 0.1333333333333321 * sp[60] + 0.1333333333333343 * sp[62] + 0.1333333333333341 * sp[64] + 0.1333333333333341 * sp[65] + 0.133333333333334 * sp[67];
    A[99] = 0.2666666666666667 * sp[59] + 0.1333333333333343 * sp[60] + 0.1333333333333344 * sp[61] + 0.1333333333333343 * sp[62] + 0.2666666666666674 * sp[63] + 0.2666666666666674 * sp[64] + 0.1333333333333344 * sp[65] + 0.2666666666666674 * sp[66] + 0.2666666666666674 * sp[67];
  }

};


class p2_tet_stokes_full_tet_cell_integral_3_otherwise: public ufc::cell_integral
{
public:

  p2_tet_stokes_full_tet_cell_integral_3_otherwise() : ufc::cell_integral()
  {

  }

  ~p2_tet_stokes_full_tet_cell_integral_3_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE8_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q4[0][0][1];
    alignas(32) double sp[68];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = sp[22] * sp[14];
    sp[32] = sp[26] * sp[14];
    sp[33] = sp[30] * sp[14];
    sp[34] = sp[22] * sp[17];
    sp[35] = sp[26] * sp[17];
    sp[36] = sp[30] * sp[17];
    sp[37] = sp[22] * sp[18];
    sp[38] = sp[26] * sp[18];
    sp[39] = sp[18] * sp[30];
    sp[40] = 0.6666666666666666 * sp[14] * sp[22];
    sp[41] = 0.6666666666666666 * sp[17] * sp[22];
    sp[42] = 0.6666666666666666 * sp[18] * sp[22];
    sp[43] = 0.6666666666666666 * sp[14] * sp[26];
    sp[44] = 0.6666666666666666 * sp[17] * sp[26];
    sp[45] = 0.6666666666666666 * sp[18] * sp[26];
    sp[46] = 0.6666666666666666 * sp[14] * sp[30];
    sp[47] = 0.6666666666666666 * sp[17] * sp[30];
    sp[48] = 0.6666666666666666 * sp[18] * sp[30];
    sp[49] = -1 * sp[40] + sp[31];
    sp[50] = -1 * sp[41] + sp[32];
    sp[51] = -1 * sp[42] + sp[33];
    sp[52] = -1 * sp[43] + sp[34];
    sp[53] = -1 * sp[44] + sp[35];
    sp[54] = -1 * sp[45] + sp[36];
    sp[55] = -1 * sp[46] + sp[37];
    sp[56] = -1 * sp[47] + sp[38];
    sp[57] = -1 * sp[48] + sp[39];
    sp[58] = std::abs(sp[13]);
    sp[59] = sp[49] * sp[58];
    sp[60] = sp[50] * sp[58];
    sp[61] = sp[51] * sp[58];
    sp[62] = sp[52] * sp[58];
    sp[63] = sp[53] * sp[58];
    sp[64] = sp[54] * sp[58];
    sp[65] = sp[55] * sp[58];
    sp[66] = sp[56] * sp[58];
    sp[67] = sp[57] * sp[58];
    A[0] = 0.1 * sp[59] + 0.1000000000000001 * sp[60] + 0.1000000000000001 * sp[61] + 0.1000000000000001 * sp[62] + 0.1000000000000001 * sp[63] + 0.1000000000000001 * sp[64] + 0.1000000000000001 * sp[65] + 0.1000000000000001 * sp[66] + 0.1000000000000001 * sp[67];
    A[1] = 0.03333333333333326 * sp[59] + 0.03333333333333329 * sp[62] + 0.0333333333333333 * sp[65];
    A[2] = 0.03333333333333337 * sp[60] + 0.03333333333333337 * sp[63] + 0.03333333333333337 * sp[66];
    A[3] = 0.03333333333333338 * sp[61] + 0.0333333333333334 * sp[64] + 0.03333333333333338 * sp[67];
    A[4] = 0.03333333333333456 * sp[60] + 0.03333333333333449 * sp[61] + 0.03333333333333457 * sp[63] + 0.03333333333333449 * sp[64] + 0.03333333333333447 * sp[66] + 0.03333333333333439 * sp[67];
    A[5] = 0.03333333333333458 * sp[59] + 0.0333333333333346 * sp[61] + 0.03333333333333459 * sp[62] + 0.03333333333333463 * sp[64] + 0.03333333333333448 * sp[65] + 0.03333333333333455 * sp[67];
    A[6] = 0.03333333333333456 * sp[59] + 0.03333333333333452 * sp[60] + 0.03333333333333456 * sp[62] + 0.03333333333333455 * sp[63] + 0.03333333333333445 * sp[65] + 0.03333333333333447 * sp[66];
    A[7] = -0.03333333333333456 * sp[59] + -0.03333333333333456 * sp[60] + -0.1333333333333331 * sp[61] + -0.03333333333333457 * sp[62] + -0.03333333333333457 * sp[63] + -0.1333333333333332 * sp[64] + -0.03333333333333448 * sp[65] + -0.03333333333333446 * sp[66] + -0.1333333333333332 * sp[67];
    A[8] = -0.03333333333333455 * sp[59] + -0.1333333333333331 * sp[60] + -0.03333333333333452 * sp[61] + -0.03333333333333455 * sp[62] + -0.1333333333333331 * sp[63] + -0.03333333333333451 * sp[64] + -0.03333333333333446 * sp[65] + -0.1333333333333331 * sp[66] + -0.03333333333333442 * sp[67];
    A[9] = -0.1333333333333331 * sp[59] + -0.03333333333333451 * sp[60] + -0.03333333333333455 * sp[61] + -0.1333333333333331 * sp[62] + -0.03333333333333453 * sp[63] + -0.03333333333333456 * sp[64] + -0.1333333333333331 * sp[65] + -0.03333333333333442 * sp[66] + -0.03333333333333448 * sp[67];
    A[10] = 0.03333333333333326 * sp[59] + 0.03333333333333329 * sp[60] + 0.0333333333333333 * sp[61];
    A[11] = 0.1000000000000001 * sp[59];
    A[12] = -0.03333333333333341 * sp[60];
    A[13] = -0.03333333333333334 * sp[61];
    A[14] = -0.03333333333333321 * sp[60] + -0.03333333333333321 * sp[61];
    A[15] = -0.03333333333333321 * sp[59] + 0.1000000000000003 * sp[61];
    A[16] = -0.03333333333333328 * sp[59] + 0.1000000000000003 * sp[60];
    A[17] = 0.0333333333333332 * sp[59] + 0.03333333333333319 * sp[60];
    A[18] = 0.0333333333333333 * sp[59] + 0.03333333333333326 * sp[61];
    A[19] = -0.1333333333333336 * sp[59] + -0.1000000000000001 * sp[60] + -0.1000000000000002 * sp[61];
    A[20] = 0.03333333333333337 * sp[62] + 0.03333333333333337 * sp[63] + 0.03333333333333337 * sp[64];
    A[21] = -0.03333333333333341 * sp[62];
    A[22] = 0.09999999999999991 * sp[63];
    A[23] = -0.03333333333333332 * sp[64];
    A[24] = -0.03333333333333342 * sp[63] + 0.09999999999999996 * sp[64];
    A[25] = -0.03333333333333345 * sp[62] + -0.03333333333333358 * sp[64];
    A[26] = 0.09999999999999996 * sp[62] + -0.03333333333333334 * sp[63];
    A[27] = 0.03333333333333344 * sp[62] + 0.03333333333333344 * sp[63];
    A[28] = -0.09999999999999995 * sp[62] + -0.1333333333333337 * sp[63] + -0.09999999999999989 * sp[64];
    A[29] = 0.03333333333333342 * sp[63] + 0.03333333333333349 * sp[64];
    A[30] = 0.03333333333333338 * sp[65] + 0.0333333333333334 * sp[66] + 0.03333333333333338 * sp[67];
    A[31] = -0.03333333333333334 * sp[65];
    A[32] = -0.03333333333333332 * sp[66];
    A[33] = 0.1000000000000002 * sp[67];
    A[34] = 0.09999999999999985 * sp[66] + -0.0333333333333339 * sp[67];
    A[35] = 0.09999999999999991 * sp[65] + -0.03333333333333355 * sp[67];
    A[36] = -0.03333333333333374 * sp[65] + -0.03333333333333384 * sp[66];
    A[37] = -0.09999999999999985 * sp[65] + -0.09999999999999985 * sp[66] + -0.1333333333333338 * sp[67];
    A[38] = 0.03333333333333376 * sp[65] + 0.03333333333333376 * sp[67];
    A[39] = 0.03333333333333367 * sp[66] + 0.0333333333333336 * sp[67];
    A[40] = 0.03333333333333456 * sp[62] + 0.03333333333333457 * sp[63] + 0.03333333333333447 * sp[64] + 0.03333333333333449 * sp[65] + 0.03333333333333449 * sp[66] + 0.03333333333333439 * sp[67];
    A[41] = -0.03333333333333321 * sp[62] + -0.03333333333333321 * sp[65];
    A[42] = -0.03333333333333342 * sp[63] + 0.09999999999999996 * sp[66];
    A[43] = 0.09999999999999985 * sp[64] + -0.0333333333333339 * sp[67];
    A[44] = 0.2666666666666679 * sp[63] + 0.1333333333333341 * sp[64] + 0.1333333333333341 * sp[66] + 0.266666666666668 * sp[67];
    A[45] = 0.2666666666666679 * sp[62] + 0.1333333333333353 * sp[64] + 0.1333333333333341 * sp[65] + 0.1333333333333352 * sp[67];
    A[46] = 0.1333333333333342 * sp[62] + 0.1333333333333349 * sp[63] + 0.2666666666666679 * sp[65] + 0.1333333333333352 * sp[66];
    A[47] = -0.2666666666666678 * sp[62] + -0.2666666666666678 * sp[63] + -0.1333333333333345 * sp[64] + -0.133333333333334 * sp[65] + -0.133333333333334 * sp[66];
    A[48] = -0.1333333333333343 * sp[62] + -0.1333333333333341 * sp[64] + -0.2666666666666681 * sp[65] + -0.1333333333333345 * sp[66] + -0.2666666666666678 * sp[67];
    A[49] = -0.1333333333333342 * sp[63] + -0.1333333333333342 * sp[64] + -0.1333333333333343 * sp[66] + -0.1333333333333342 * sp[67];
    A[50] = 0.03333333333333458 * sp[59] + 0.03333333333333459 * sp[60] + 0.03333333333333448 * sp[61] + 0.0333333333333346 * sp[65] + 0.03333333333333463 * sp[66] + 0.03333333333333455 * sp[67];
    A[51] = -0.03333333333333321 * sp[59] + 0.1000000000000003 * sp[65];
    A[52] = -0.03333333333333345 * sp[60] + -0.03333333333333358 * sp[66];
    A[53] = 0.09999999999999991 * sp[61] + -0.03333333333333355 * sp[67];
    A[54] = 0.2666666666666679 * sp[60] + 0.1333333333333341 * sp[61] + 0.1333333333333353 * sp[66] + 0.1333333333333352 * sp[67];
    A[55] = 0.2666666666666679 * sp[59] + 0.1333333333333353 * sp[61] + 0.1333333333333353 * sp[65] + 0.2666666666666697 * sp[67];
    A[56] = 0.1333333333333342 * sp[59] + 0.1333333333333349 * sp[60] + 0.133333333333335 * sp[65] + 0.2666666666666695 * sp[66];
    A[57] = -0.2666666666666678 * sp[59] + -0.2666666666666678 * sp[60] + -0.1333333333333345 * sp[61] + -0.1333333333333352 * sp[65] + -0.1333333333333352 * sp[66];
    A[58] = -0.1333333333333342 * sp[59] + -0.1333333333333341 * sp[61] + -0.1333333333333351 * sp[65] + -0.1333333333333349 * sp[67];
    A[59] = -0.1333333333333342 * sp[60] + -0.1333333333333342 * sp[61] + -0.1333333333333346 * sp[65] + -0.2666666666666686 * sp[66] + -0.2666666666666686 * sp[67];
    A[60] = 0.03333333333333456 * sp[59] + 0.03333333333333456 * sp[60] + 0.03333333333333445 * sp[61] + 0.03333333333333452 * sp[62] + 0.03333333333333455 * sp[63] + 0.03333333333333447 * sp[64];
    A[61] = -0.03333333333333328 * sp[59] + 0.1000000000000003 * sp[62];
    A[62] = 0.09999999999999996 * sp[60] + -0.03333333333333334 * sp[63];
    A[63] = -0.03333333333333374 * sp[61] + -0.03333333333333384 * sp[64];
    A[64] = 0.1333333333333342 * sp[60] + 0.2666666666666679 * sp[61] + 0.1333333333333349 * sp[63] + 0.1333333333333352 * sp[64];
    A[65] = 0.1333333333333342 * sp[59] + 0.133333333333335 * sp[61] + 0.1333333333333349 * sp[62] + 0.2666666666666695 * sp[64];
    A[66] = 0.2666666666666678 * sp[59] + 0.1333333333333351 * sp[60] + 0.1333333333333351 * sp[62] + 0.2666666666666693 * sp[63];
    A[67] = -0.1333333333333341 * sp[59] + -0.1333333333333342 * sp[60] + -0.1333333333333348 * sp[62] + -0.1333333333333348 * sp[63];
    A[68] = -0.2666666666666679 * sp[59] + -0.1333333333333345 * sp[60] + -0.2666666666666676 * sp[61] + -0.1333333333333352 * sp[62] + -0.133333333333335 * sp[64];
    A[69] = -0.1333333333333342 * sp[60] + -0.1333333333333341 * sp[61] + -0.1333333333333344 * sp[62] + -0.2666666666666684 * sp[63] + -0.2666666666666684 * sp[64];
    A[70] = -0.03333333333333456 * sp[59] + -0.03333333333333457 * sp[60] + -0.03333333333333448 * sp[61] + -0.03333333333333456 * sp[62] + -0.03333333333333457 * sp[63] + -0.03333333333333446 * sp[64] + -0.1333333333333331 * sp[65] + -0.1333333333333332 * sp[66] + -0.1333333333333332 * sp[67];
    A[71] = 0.0333333333333332 * sp[59] + 0.03333333333333319 * sp[62];
    A[72] = 0.03333333333333344 * sp[60] + 0.03333333333333344 * sp[63];
    A[73] = -0.09999999999999985 * sp[61] + -0.09999999999999985 * sp[64] + -0.1333333333333338 * sp[67];
    A[74] = -0.2666666666666678 * sp[60] + -0.133333333333334 * sp[61] + -0.2666666666666678 * sp[63] + -0.133333333333334 * sp[64] + -0.1333333333333345 * sp[66];
    A[75] = -0.2666666666666678 * sp[59] + -0.1333333333333352 * sp[61] + -0.2666666666666678 * sp[62] + -0.1333333333333352 * sp[64] + -0.1333333333333345 * sp[65];
    A[76] = -0.1333333333333341 * sp[59] + -0.1333333333333348 * sp[60] + -0.1333333333333342 * sp[62] + -0.1333333333333348 * sp[63];
    A[77] = 0.2666666666666677 * sp[59] + 0.2666666666666677 * sp[60] + 0.1333333333333344 * sp[61] + 0.2666666666666677 * sp[62] + 0.2666666666666677 * sp[63] + 0.1333333333333344 * sp[64] + 0.1333333333333344 * sp[65] + 0.1333333333333344 * sp[66] + 0.2666666666666669 * sp[67];
    A[78] = 0.1333333333333342 * sp[59] + 0.133333333333334 * sp[61] + 0.1333333333333342 * sp[62] + 0.133333333333334 * sp[64] + 0.1333333333333322 * sp[66];
    A[79] = 0.1333333333333341 * sp[60] + 0.1333333333333342 * sp[61] + 0.1333333333333342 * sp[63] + 0.1333333333333342 * sp[64] + 0.1333333333333322 * sp[65];
    A[80] = -0.03333333333333455 * sp[59] + -0.03333333333333455 * sp[60] + -0.03333333333333446 * sp[61] + -0.1333333333333331 * sp[62] + -0.1333333333333331 * sp[63] + -0.1333333333333331 * sp[64] + -0.03333333333333452 * sp[65] + -0.03333333333333451 * sp[66] + -0.03333333333333442 * sp[67];
    A[81] = 0.0333333333333333 * sp[59] + 0.03333333333333326 * sp[65];
    A[82] = -0.09999999999999995 * sp[60] + -0.1333333333333337 * sp[63] + -0.09999999999999989 * sp[66];
    A[83] = 0.03333333333333376 * sp[61] + 0.03333333333333376 * sp[67];
    A[84] = -0.1333333333333343 * sp[60] + -0.2666666666666681 * sp[61] + -0.1333333333333345 * sp[64] + -0.1333333333333341 * sp[66] + -0.2666666666666678 * sp[67];
    A[85] = -0.1333333333333342 * sp[59] + -0.1333333333333351 * sp[61] + -0.1333333333333341 * sp[65] + -0.1333333333333349 * sp[67];
    A[86] = -0.2666666666666679 * sp[59] + -0.1333333333333352 * sp[60] + -0.1333333333333345 * sp[62] + -0.2666666666666676 * sp[65] + -0.133333333333335 * sp[66];
    A[87] = 0.1333333333333342 * sp[59] + 0.1333333333333342 * sp[60] + 0.1333333333333322 * sp[64] + 0.133333333333334 * sp[65] + 0.133333333333334 * sp[66];
    A[88] = 0.2666666666666681 * sp[59] + 0.1333333333333345 * sp[60] + 0.2666666666666677 * sp[61] + 0.1333333333333345 * sp[62] + 0.2666666666666668 * sp[63] + 0.1333333333333344 * sp[64] + 0.2666666666666677 * sp[65] + 0.1333333333333344 * sp[66] + 0.2666666666666674 * sp[67];
    A[89] = 0.1333333333333343 * sp[60] + 0.1333333333333341 * sp[61] + 0.1333333333333321 * sp[62] + 0.1333333333333341 * sp[66] + 0.133333333333334 * sp[67];
    A[90] = -0.1333333333333331 * sp[59] + -0.1333333333333331 * sp[60] + -0.1333333333333331 * sp[61] + -0.03333333333333451 * sp[62] + -0.03333333333333453 * sp[63] + -0.03333333333333442 * sp[64] + -0.03333333333333455 * sp[65] + -0.03333333333333456 * sp[66] + -0.03333333333333448 * sp[67];
    A[91] = -0.1333333333333336 * sp[59] + -0.1000000000000001 * sp[62] + -0.1000000000000002 * sp[65];
    A[92] = 0.03333333333333342 * sp[63] + 0.03333333333333349 * sp[66];
    A[93] = 0.03333333333333367 * sp[64] + 0.0333333333333336 * sp[67];
    A[94] = -0.1333333333333342 * sp[63] + -0.1333333333333343 * sp[64] + -0.1333333333333342 * sp[66] + -0.1333333333333342 * sp[67];
    A[95] = -0.1333333333333346 * sp[61] + -0.1333333333333342 * sp[62] + -0.2666666666666686 * sp[64] + -0.1333333333333342 * sp[65] + -0.2666666666666686 * sp[67];
    A[96] = -0.1333333333333344 * sp[60] + -0.1333333333333342 * sp[62] + -0.2666666666666684 * sp[63] + -0.1333333333333341 * sp[65] + -0.2666666666666684 * sp[66];
    A[97] = 0.1333333333333322 * sp[61] + 0.1333333333333341 * sp[62] + 0.1333333333333342 * sp[63] + 0.1333333333333342 * sp[65] + 0.1333333333333342 * sp[66];
    A[98] = 0.1333333333333321 * sp[60] + 0.1333333333333343 * sp[62] + 0.1333333333333341 * sp[64] + 0.1333333333333341 * sp[65] + 0.133333333333334 * sp[67];
    A[99] = 0.2666666666666667 * sp[59] + 0.1333333333333343 * sp[60] + 0.1333333333333344 * sp[61] + 0.1333333333333343 * sp[62] + 0.2666666666666674 * sp[63] + 0.2666666666666674 * sp[64] + 0.1333333333333344 * sp[65] + 0.2666666666666674 * sp[66] + 0.2666666666666674 * sp[67];
  }

};


class p2_tet_stokes_full_tet_cell_integral_4_otherwise: public ufc::cell_integral
{
public:

  p2_tet_stokes_full_tet_cell_integral_4_otherwise() : ufc::cell_integral()
  {

  }

  ~p2_tet_stokes_full_tet_cell_integral_4_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE8_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q4[0][0][1];
    alignas(32) double sp[110];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = sp[14] * sp[14];
    sp[20] = sp[14] * sp[17];
    sp[21] = sp[18] * sp[14];
    sp[22] = sp[17] * sp[17];
    sp[23] = sp[18] * sp[17];
    sp[24] = sp[18] * sp[18];
    sp[25] = J_c2 * J_c7;
    sp[26] = J_c8 * (-1 * J_c1);
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[27] / sp[13];
    sp[29] = J_c0 * J_c8;
    sp[30] = J_c6 * (-1 * J_c2);
    sp[31] = sp[29] + sp[30];
    sp[32] = sp[31] / sp[13];
    sp[33] = J_c1 * J_c6;
    sp[34] = J_c0 * J_c7;
    sp[35] = sp[33] + -1 * sp[34];
    sp[36] = sp[35] / sp[13];
    sp[37] = sp[28] * sp[28];
    sp[38] = sp[28] * sp[32];
    sp[39] = sp[28] * sp[36];
    sp[40] = sp[32] * sp[32];
    sp[41] = sp[32] * sp[36];
    sp[42] = sp[36] * sp[36];
    sp[43] = sp[37] + sp[19];
    sp[44] = sp[38] + sp[20];
    sp[45] = sp[39] + sp[21];
    sp[46] = sp[40] + sp[22];
    sp[47] = sp[41] + sp[23];
    sp[48] = sp[24] + sp[42];
    sp[49] = J_c1 * J_c5;
    sp[50] = J_c2 * J_c4;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = J_c2 * J_c3;
    sp[54] = J_c0 * J_c5;
    sp[55] = sp[53] + -1 * sp[54];
    sp[56] = sp[55] / sp[13];
    sp[57] = J_c0 * J_c4;
    sp[58] = J_c1 * J_c3;
    sp[59] = sp[57] + -1 * sp[58];
    sp[60] = sp[59] / sp[13];
    sp[61] = sp[52] * sp[52];
    sp[62] = sp[52] * sp[56];
    sp[63] = sp[60] * sp[52];
    sp[64] = sp[56] * sp[56];
    sp[65] = sp[60] * sp[56];
    sp[66] = sp[60] * sp[60];
    sp[67] = sp[43] + sp[61];
    sp[68] = sp[44] + sp[62];
    sp[69] = sp[45] + sp[63];
    sp[70] = sp[46] + sp[64];
    sp[71] = sp[47] + sp[65];
    sp[72] = sp[48] + sp[66];
    sp[73] = 0.6666666666666666 * sp[28] * sp[28];
    sp[74] = 0.6666666666666666 * sp[32] * sp[28];
    sp[75] = 0.6666666666666666 * sp[36] * sp[28];
    sp[76] = 0.6666666666666666 * sp[28] * sp[32];
    sp[77] = 0.6666666666666666 * sp[32] * sp[32];
    sp[78] = 0.6666666666666666 * sp[36] * sp[32];
    sp[79] = 0.6666666666666666 * sp[28] * sp[36];
    sp[80] = 0.6666666666666666 * sp[32] * sp[36];
    sp[81] = 0.6666666666666666 * sp[36] * sp[36];
    sp[82] = -1 * sp[73] + sp[37];
    sp[83] = -1 * sp[74] + sp[38];
    sp[84] = -1 * sp[75] + sp[39];
    sp[85] = -1 * sp[76] + sp[38];
    sp[86] = -1 * sp[77] + sp[40];
    sp[87] = -1 * sp[78] + sp[41];
    sp[88] = -1 * sp[79] + sp[39];
    sp[89] = -1 * sp[80] + sp[41];
    sp[90] = -1 * sp[81] + sp[42];
    sp[91] = sp[82] + sp[67];
    sp[92] = sp[83] + sp[68];
    sp[93] = sp[69] + sp[84];
    sp[94] = sp[85] + sp[68];
    sp[95] = sp[86] + sp[70];
    sp[96] = sp[71] + sp[87];
    sp[97] = sp[69] + sp[88];
    sp[98] = sp[71] + sp[89];
    sp[99] = sp[72] + sp[90];
    sp[100] = std::abs(sp[13]);
    sp[101] = sp[91] * sp[100];
    sp[102] = sp[92] * sp[100];
    sp[103] = sp[93] * sp[100];
    sp[104] = sp[94] * sp[100];
    sp[105] = sp[95] * sp[100];
    sp[106] = sp[96] * sp[100];
    sp[107] = sp[97] * sp[100];
    sp[108] = sp[98] * sp[100];
    sp[109] = sp[99] * sp[100];
    A[0] = 0.1 * sp[101] + 0.1000000000000001 * sp[102] + 0.1000000000000001 * sp[103] + 0.1000000000000001 * sp[104] + 0.1000000000000001 * sp[105] + 0.1000000000000001 * sp[106] + 0.1000000000000001 * sp[107] + 0.1000000000000001 * sp[108] + 0.1000000000000001 * sp[109];
    A[1] = 0.03333333333333326 * sp[101] + 0.03333333333333329 * sp[104] + 0.0333333333333333 * sp[107];
    A[2] = 0.03333333333333337 * sp[102] + 0.03333333333333337 * sp[105] + 0.03333333333333337 * sp[108];
    A[3] = 0.03333333333333338 * sp[103] + 0.0333333333333334 * sp[106] + 0.03333333333333338 * sp[109];
    A[4] = 0.03333333333333456 * sp[102] + 0.03333333333333449 * sp[103] + 0.03333333333333457 * sp[105] + 0.03333333333333449 * sp[106] + 0.03333333333333447 * sp[108] + 0.03333333333333439 * sp[109];
    A[5] = 0.03333333333333458 * sp[101] + 0.0333333333333346 * sp[103] + 0.03333333333333459 * sp[104] + 0.03333333333333463 * sp[106] + 0.03333333333333448 * sp[107] + 0.03333333333333455 * sp[109];
    A[6] = 0.03333333333333456 * sp[101] + 0.03333333333333452 * sp[102] + 0.03333333333333456 * sp[104] + 0.03333333333333455 * sp[105] + 0.03333333333333445 * sp[107] + 0.03333333333333447 * sp[108];
    A[7] = -0.03333333333333456 * sp[101] + -0.03333333333333456 * sp[102] + -0.1333333333333331 * sp[103] + -0.03333333333333457 * sp[104] + -0.03333333333333457 * sp[105] + -0.1333333333333332 * sp[106] + -0.03333333333333448 * sp[107] + -0.03333333333333446 * sp[108] + -0.1333333333333332 * sp[109];
    A[8] = -0.03333333333333455 * sp[101] + -0.1333333333333331 * sp[102] + -0.03333333333333452 * sp[103] + -0.03333333333333455 * sp[104] + -0.1333333333333331 * sp[105] + -0.03333333333333451 * sp[106] + -0.03333333333333446 * sp[107] + -0.1333333333333331 * sp[108] + -0.03333333333333442 * sp[109];
    A[9] = -0.1333333333333331 * sp[101] + -0.03333333333333451 * sp[102] + -0.03333333333333455 * sp[103] + -0.1333333333333331 * sp[104] + -0.03333333333333453 * sp[105] + -0.03333333333333456 * sp[106] + -0.1333333333333331 * sp[107] + -0.03333333333333442 * sp[108] + -0.03333333333333448 * sp[109];
    A[10] = 0.03333333333333326 * sp[101] + 0.03333333333333329 * sp[102] + 0.0333333333333333 * sp[103];
    A[11] = 0.1000000000000001 * sp[101];
    A[12] = -0.03333333333333341 * sp[102];
    A[13] = -0.03333333333333334 * sp[103];
    A[14] = -0.03333333333333321 * sp[102] + -0.03333333333333321 * sp[103];
    A[15] = -0.03333333333333321 * sp[101] + 0.1000000000000003 * sp[103];
    A[16] = -0.03333333333333328 * sp[101] + 0.1000000000000003 * sp[102];
    A[17] = 0.0333333333333332 * sp[101] + 0.03333333333333319 * sp[102];
    A[18] = 0.0333333333333333 * sp[101] + 0.03333333333333326 * sp[103];
    A[19] = -0.1333333333333336 * sp[101] + -0.1000000000000001 * sp[102] + -0.1000000000000002 * sp[103];
    A[20] = 0.03333333333333337 * sp[104] + 0.03333333333333337 * sp[105] + 0.03333333333333337 * sp[106];
    A[21] = -0.03333333333333341 * sp[104];
    A[22] = 0.09999999999999991 * sp[105];
    A[23] = -0.03333333333333332 * sp[106];
    A[24] = -0.03333333333333342 * sp[105] + 0.09999999999999996 * sp[106];
    A[25] = -0.03333333333333345 * sp[104] + -0.03333333333333358 * sp[106];
    A[26] = 0.09999999999999996 * sp[104] + -0.03333333333333334 * sp[105];
    A[27] = 0.03333333333333344 * sp[104] + 0.03333333333333344 * sp[105];
    A[28] = -0.09999999999999995 * sp[104] + -0.1333333333333337 * sp[105] + -0.09999999999999989 * sp[106];
    A[29] = 0.03333333333333342 * sp[105] + 0.03333333333333349 * sp[106];
    A[30] = 0.03333333333333338 * sp[107] + 0.0333333333333334 * sp[108] + 0.03333333333333338 * sp[109];
    A[31] = -0.03333333333333334 * sp[107];
    A[32] = -0.03333333333333332 * sp[108];
    A[33] = 0.1000000000000002 * sp[109];
    A[34] = 0.09999999999999985 * sp[108] + -0.0333333333333339 * sp[109];
    A[35] = 0.09999999999999991 * sp[107] + -0.03333333333333355 * sp[109];
    A[36] = -0.03333333333333374 * sp[107] + -0.03333333333333384 * sp[108];
    A[37] = -0.09999999999999985 * sp[107] + -0.09999999999999985 * sp[108] + -0.1333333333333338 * sp[109];
    A[38] = 0.03333333333333376 * sp[107] + 0.03333333333333376 * sp[109];
    A[39] = 0.03333333333333367 * sp[108] + 0.0333333333333336 * sp[109];
    A[40] = 0.03333333333333456 * sp[104] + 0.03333333333333457 * sp[105] + 0.03333333333333447 * sp[106] + 0.03333333333333449 * sp[107] + 0.03333333333333449 * sp[108] + 0.03333333333333439 * sp[109];
    A[41] = -0.03333333333333321 * sp[104] + -0.03333333333333321 * sp[107];
    A[42] = -0.03333333333333342 * sp[105] + 0.09999999999999996 * sp[108];
    A[43] = 0.09999999999999985 * sp[106] + -0.0333333333333339 * sp[109];
    A[44] = 0.2666666666666679 * sp[105] + 0.1333333333333341 * sp[106] + 0.1333333333333341 * sp[108] + 0.266666666666668 * sp[109];
    A[45] = 0.2666666666666679 * sp[104] + 0.1333333333333353 * sp[106] + 0.1333333333333341 * sp[107] + 0.1333333333333352 * sp[109];
    A[46] = 0.1333333333333342 * sp[104] + 0.1333333333333349 * sp[105] + 0.2666666666666679 * sp[107] + 0.1333333333333352 * sp[108];
    A[47] = -0.2666666666666678 * sp[104] + -0.2666666666666678 * sp[105] + -0.1333333333333345 * sp[106] + -0.133333333333334 * sp[107] + -0.133333333333334 * sp[108];
    A[48] = -0.1333333333333343 * sp[104] + -0.1333333333333341 * sp[106] + -0.2666666666666681 * sp[107] + -0.1333333333333345 * sp[108] + -0.2666666666666678 * sp[109];
    A[49] = -0.1333333333333342 * sp[105] + -0.1333333333333342 * sp[106] + -0.1333333333333343 * sp[108] + -0.1333333333333342 * sp[109];
    A[50] = 0.03333333333333458 * sp[101] + 0.03333333333333459 * sp[102] + 0.03333333333333448 * sp[103] + 0.0333333333333346 * sp[107] + 0.03333333333333463 * sp[108] + 0.03333333333333455 * sp[109];
    A[51] = -0.03333333333333321 * sp[101] + 0.1000000000000003 * sp[107];
    A[52] = -0.03333333333333345 * sp[102] + -0.03333333333333358 * sp[108];
    A[53] = 0.09999999999999991 * sp[103] + -0.03333333333333355 * sp[109];
    A[54] = 0.2666666666666679 * sp[102] + 0.1333333333333341 * sp[103] + 0.1333333333333353 * sp[108] + 0.1333333333333352 * sp[109];
    A[55] = 0.2666666666666679 * sp[101] + 0.1333333333333353 * sp[103] + 0.1333333333333353 * sp[107] + 0.2666666666666697 * sp[109];
    A[56] = 0.1333333333333342 * sp[101] + 0.1333333333333349 * sp[102] + 0.133333333333335 * sp[107] + 0.2666666666666695 * sp[108];
    A[57] = -0.2666666666666678 * sp[101] + -0.2666666666666678 * sp[102] + -0.1333333333333345 * sp[103] + -0.1333333333333352 * sp[107] + -0.1333333333333352 * sp[108];
    A[58] = -0.1333333333333342 * sp[101] + -0.1333333333333341 * sp[103] + -0.1333333333333351 * sp[107] + -0.1333333333333349 * sp[109];
    A[59] = -0.1333333333333342 * sp[102] + -0.1333333333333342 * sp[103] + -0.1333333333333346 * sp[107] + -0.2666666666666686 * sp[108] + -0.2666666666666686 * sp[109];
    A[60] = 0.03333333333333456 * sp[101] + 0.03333333333333456 * sp[102] + 0.03333333333333445 * sp[103] + 0.03333333333333452 * sp[104] + 0.03333333333333455 * sp[105] + 0.03333333333333447 * sp[106];
    A[61] = -0.03333333333333328 * sp[101] + 0.1000000000000003 * sp[104];
    A[62] = 0.09999999999999996 * sp[102] + -0.03333333333333334 * sp[105];
    A[63] = -0.03333333333333374 * sp[103] + -0.03333333333333384 * sp[106];
    A[64] = 0.1333333333333342 * sp[102] + 0.2666666666666679 * sp[103] + 0.1333333333333349 * sp[105] + 0.1333333333333352 * sp[106];
    A[65] = 0.1333333333333342 * sp[101] + 0.133333333333335 * sp[103] + 0.1333333333333349 * sp[104] + 0.2666666666666695 * sp[106];
    A[66] = 0.2666666666666678 * sp[101] + 0.1333333333333351 * sp[102] + 0.1333333333333351 * sp[104] + 0.2666666666666693 * sp[105];
    A[67] = -0.1333333333333341 * sp[101] + -0.1333333333333342 * sp[102] + -0.1333333333333348 * sp[104] + -0.1333333333333348 * sp[105];
    A[68] = -0.2666666666666679 * sp[101] + -0.1333333333333345 * sp[102] + -0.2666666666666676 * sp[103] + -0.1333333333333352 * sp[104] + -0.133333333333335 * sp[106];
    A[69] = -0.1333333333333342 * sp[102] + -0.1333333333333341 * sp[103] + -0.1333333333333344 * sp[104] + -0.2666666666666684 * sp[105] + -0.2666666666666684 * sp[106];
    A[70] = -0.03333333333333456 * sp[101] + -0.03333333333333457 * sp[102] + -0.03333333333333448 * sp[103] + -0.03333333333333456 * sp[104] + -0.03333333333333457 * sp[105] + -0.03333333333333446 * sp[106] + -0.1333333333333331 * sp[107] + -0.1333333333333332 * sp[108] + -0.1333333333333332 * sp[109];
    A[71] = 0.0333333333333332 * sp[101] + 0.03333333333333319 * sp[104];
    A[72] = 0.03333333333333344 * sp[102] + 0.03333333333333344 * sp[105];
    A[73] = -0.09999999999999985 * sp[103] + -0.09999999999999985 * sp[106] + -0.1333333333333338 * sp[109];
    A[74] = -0.2666666666666678 * sp[102] + -0.133333333333334 * sp[103] + -0.2666666666666678 * sp[105] + -0.133333333333334 * sp[106] + -0.1333333333333345 * sp[108];
    A[75] = -0.2666666666666678 * sp[101] + -0.1333333333333352 * sp[103] + -0.2666666666666678 * sp[104] + -0.1333333333333352 * sp[106] + -0.1333333333333345 * sp[107];
    A[76] = -0.1333333333333341 * sp[101] + -0.1333333333333348 * sp[102] + -0.1333333333333342 * sp[104] + -0.1333333333333348 * sp[105];
    A[77] = 0.2666666666666677 * sp[101] + 0.2666666666666677 * sp[102] + 0.1333333333333344 * sp[103] + 0.2666666666666677 * sp[104] + 0.2666666666666677 * sp[105] + 0.1333333333333344 * sp[106] + 0.1333333333333344 * sp[107] + 0.1333333333333344 * sp[108] + 0.2666666666666669 * sp[109];
    A[78] = 0.1333333333333342 * sp[101] + 0.133333333333334 * sp[103] + 0.1333333333333342 * sp[104] + 0.133333333333334 * sp[106] + 0.1333333333333322 * sp[108];
    A[79] = 0.1333333333333341 * sp[102] + 0.1333333333333342 * sp[103] + 0.1333333333333342 * sp[105] + 0.1333333333333342 * sp[106] + 0.1333333333333322 * sp[107];
    A[80] = -0.03333333333333455 * sp[101] + -0.03333333333333455 * sp[102] + -0.03333333333333446 * sp[103] + -0.1333333333333331 * sp[104] + -0.1333333333333331 * sp[105] + -0.1333333333333331 * sp[106] + -0.03333333333333452 * sp[107] + -0.03333333333333451 * sp[108] + -0.03333333333333442 * sp[109];
    A[81] = 0.0333333333333333 * sp[101] + 0.03333333333333326 * sp[107];
    A[82] = -0.09999999999999995 * sp[102] + -0.1333333333333337 * sp[105] + -0.09999999999999989 * sp[108];
    A[83] = 0.03333333333333376 * sp[103] + 0.03333333333333376 * sp[109];
    A[84] = -0.1333333333333343 * sp[102] + -0.2666666666666681 * sp[103] + -0.1333333333333345 * sp[106] + -0.1333333333333341 * sp[108] + -0.2666666666666678 * sp[109];
    A[85] = -0.1333333333333342 * sp[101] + -0.1333333333333351 * sp[103] + -0.1333333333333341 * sp[107] + -0.1333333333333349 * sp[109];
    A[86] = -0.2666666666666679 * sp[101] + -0.1333333333333352 * sp[102] + -0.1333333333333345 * sp[104] + -0.2666666666666676 * sp[107] + -0.133333333333335 * sp[108];
    A[87] = 0.1333333333333342 * sp[101] + 0.1333333333333342 * sp[102] + 0.1333333333333322 * sp[106] + 0.133333333333334 * sp[107] + 0.133333333333334 * sp[108];
    A[88] = 0.2666666666666681 * sp[101] + 0.1333333333333345 * sp[102] + 0.2666666666666677 * sp[103] + 0.1333333333333345 * sp[104] + 0.2666666666666668 * sp[105] + 0.1333333333333344 * sp[106] + 0.2666666666666677 * sp[107] + 0.1333333333333344 * sp[108] + 0.2666666666666674 * sp[109];
    A[89] = 0.1333333333333343 * sp[102] + 0.1333333333333341 * sp[103] + 0.1333333333333321 * sp[104] + 0.1333333333333341 * sp[108] + 0.133333333333334 * sp[109];
    A[90] = -0.1333333333333331 * sp[101] + -0.1333333333333331 * sp[102] + -0.1333333333333331 * sp[103] + -0.03333333333333451 * sp[104] + -0.03333333333333453 * sp[105] + -0.03333333333333442 * sp[106] + -0.03333333333333455 * sp[107] + -0.03333333333333456 * sp[108] + -0.03333333333333448 * sp[109];
    A[91] = -0.1333333333333336 * sp[101] + -0.1000000000000001 * sp[104] + -0.1000000000000002 * sp[107];
    A[92] = 0.03333333333333342 * sp[105] + 0.03333333333333349 * sp[108];
    A[93] = 0.03333333333333367 * sp[106] + 0.0333333333333336 * sp[109];
    A[94] = -0.1333333333333342 * sp[105] + -0.1333333333333343 * sp[106] + -0.1333333333333342 * sp[108] + -0.1333333333333342 * sp[109];
    A[95] = -0.1333333333333346 * sp[103] + -0.1333333333333342 * sp[104] + -0.2666666666666686 * sp[106] + -0.1333333333333342 * sp[107] + -0.2666666666666686 * sp[109];
    A[96] = -0.1333333333333344 * sp[102] + -0.1333333333333342 * sp[104] + -0.2666666666666684 * sp[105] + -0.1333333333333341 * sp[107] + -0.2666666666666684 * sp[108];
    A[97] = 0.1333333333333322 * sp[103] + 0.1333333333333341 * sp[104] + 0.1333333333333342 * sp[105] + 0.1333333333333342 * sp[107] + 0.1333333333333342 * sp[108];
    A[98] = 0.1333333333333321 * sp[102] + 0.1333333333333343 * sp[104] + 0.1333333333333341 * sp[106] + 0.1333333333333341 * sp[107] + 0.133333333333334 * sp[109];
    A[99] = 0.2666666666666667 * sp[101] + 0.1333333333333343 * sp[102] + 0.1333333333333344 * sp[103] + 0.1333333333333343 * sp[104] + 0.2666666666666674 * sp[105] + 0.2666666666666674 * sp[106] + 0.1333333333333344 * sp[107] + 0.2666666666666674 * sp[108] + 0.2666666666666674 * sp[109];
  }

};


class p2_tet_stokes_full_tet_cell_integral_5_otherwise: public ufc::cell_integral
{
public:

  p2_tet_stokes_full_tet_cell_integral_5_otherwise() : ufc::cell_integral()
  {

  }

  ~p2_tet_stokes_full_tet_cell_integral_5_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE8_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q4[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q4[0][0][1];
    alignas(32) double sp[75];
    sp[0] = J_c1 * J_c5;
    sp[1] = J_c2 * J_c4;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c4 * J_c8;
    sp[4] = J_c5 * J_c7;
    sp[5] = sp[3] + -1 * sp[4];
    sp[6] = J_c0 * sp[5];
    sp[7] = J_c5 * J_c6;
    sp[8] = J_c3 * J_c8;
    sp[9] = sp[7] + -1 * sp[8];
    sp[10] = J_c1 * sp[9];
    sp[11] = sp[6] + sp[10];
    sp[12] = J_c3 * J_c7;
    sp[13] = J_c4 * J_c6;
    sp[14] = sp[12] + -1 * sp[13];
    sp[15] = J_c2 * sp[14];
    sp[16] = sp[11] + sp[15];
    sp[17] = sp[2] / sp[16];
    sp[18] = J_c2 * J_c3;
    sp[19] = J_c0 * J_c5;
    sp[20] = sp[18] + -1 * sp[19];
    sp[21] = sp[20] / sp[16];
    sp[22] = J_c0 * J_c4;
    sp[23] = J_c1 * J_c3;
    sp[24] = sp[22] + -1 * sp[23];
    sp[25] = sp[24] / sp[16];
    sp[26] = J_c2 * J_c7;
    sp[27] = J_c8 * (-1 * J_c1);
    sp[28] = sp[26] + sp[27];
    sp[29] = sp[28] / sp[16];
    sp[30] = J_c0 * J_c8;
    sp[31] = J_c6 * (-1 * J_c2);
    sp[32] = sp[30] + sp[31];
    sp[33] = sp[32] / sp[16];
    sp[34] = J_c1 * J_c6;
    sp[35] = J_c0 * J_c7;
    sp[36] = sp[34] + -1 * sp[35];
    sp[37] = sp[36] / sp[16];
    sp[38] = sp[29] * sp[17];
    sp[39] = sp[33] * sp[17];
    sp[40] = sp[17] * sp[37];
    sp[41] = sp[29] * sp[21];
    sp[42] = sp[33] * sp[21];
    sp[43] = sp[21] * sp[37];
    sp[44] = sp[29] * sp[25];
    sp[45] = sp[33] * sp[25];
    sp[46] = sp[25] * sp[37];
    sp[47] = 0.6666666666666666 * sp[17] * sp[29];
    sp[48] = 0.6666666666666666 * sp[21] * sp[29];
    sp[49] = 0.6666666666666666 * sp[25] * sp[29];
    sp[50] = 0.6666666666666666 * sp[17] * sp[33];
    sp[51] = 0.6666666666666666 * sp[21] * sp[33];
    sp[52] = 0.6666666666666666 * sp[25] * sp[33];
    sp[53] = 0.6666666666666666 * sp[17] * sp[37];
    sp[54] = 0.6666666666666666 * sp[21] * sp[37];
    sp[55] = 0.6666666666666666 * sp[25] * sp[37];
    sp[56] = -1 * sp[47] + sp[38];
    sp[57] = -1 * sp[48] + sp[39];
    sp[58] = -1 * sp[49] + sp[40];
    sp[59] = -1 * sp[50] + sp[41];
    sp[60] = -1 * sp[51] + sp[42];
    sp[61] = -1 * sp[52] + sp[43];
    sp[62] = -1 * sp[53] + sp[44];
    sp[63] = -1 * sp[54] + sp[45];
    sp[64] = -1 * sp[55] + sp[46];
    sp[65] = std::abs(sp[16]);
    sp[66] = sp[56] * sp[65];
    sp[67] = sp[57] * sp[65];
    sp[68] = sp[58] * sp[65];
    sp[69] = sp[59] * sp[65];
    sp[70] = sp[60] * sp[65];
    sp[71] = sp[61] * sp[65];
    sp[72] = sp[62] * sp[65];
    sp[73] = sp[63] * sp[65];
    sp[74] = sp[64] * sp[65];
    A[0] = 0.1 * sp[66] + 0.1000000000000001 * sp[67] + 0.1000000000000001 * sp[68] + 0.1000000000000001 * sp[69] + 0.1000000000000001 * sp[70] + 0.1000000000000001 * sp[71] + 0.1000000000000001 * sp[72] + 0.1000000000000001 * sp[73] + 0.1000000000000001 * sp[74];
    A[1] = 0.03333333333333326 * sp[66] + 0.03333333333333329 * sp[69] + 0.0333333333333333 * sp[72];
    A[2] = 0.03333333333333337 * sp[67] + 0.03333333333333337 * sp[70] + 0.03333333333333337 * sp[73];
    A[3] = 0.03333333333333338 * sp[68] + 0.0333333333333334 * sp[71] + 0.03333333333333338 * sp[74];
    A[4] = 0.03333333333333456 * sp[67] + 0.03333333333333449 * sp[68] + 0.03333333333333457 * sp[70] + 0.03333333333333449 * sp[71] + 0.03333333333333447 * sp[73] + 0.03333333333333439 * sp[74];
    A[5] = 0.03333333333333458 * sp[66] + 0.0333333333333346 * sp[68] + 0.03333333333333459 * sp[69] + 0.03333333333333463 * sp[71] + 0.03333333333333448 * sp[72] + 0.03333333333333455 * sp[74];
    A[6] = 0.03333333333333456 * sp[66] + 0.03333333333333452 * sp[67] + 0.03333333333333456 * sp[69] + 0.03333333333333455 * sp[70] + 0.03333333333333445 * sp[72] + 0.03333333333333447 * sp[73];
    A[7] = -0.03333333333333456 * sp[66] + -0.03333333333333456 * sp[67] + -0.1333333333333331 * sp[68] + -0.03333333333333457 * sp[69] + -0.03333333333333457 * sp[70] + -0.1333333333333332 * sp[71] + -0.03333333333333448 * sp[72] + -0.03333333333333446 * sp[73] + -0.1333333333333332 * sp[74];
    A[8] = -0.03333333333333455 * sp[66] + -0.1333333333333331 * sp[67] + -0.03333333333333452 * sp[68] + -0.03333333333333455 * sp[69] + -0.1333333333333331 * sp[70] + -0.03333333333333451 * sp[71] + -0.03333333333333446 * sp[72] + -0.1333333333333331 * sp[73] + -0.03333333333333442 * sp[74];
    A[9] = -0.1333333333333331 * sp[66] + -0.03333333333333451 * sp[67] + -0.03333333333333455 * sp[68] + -0.1333333333333331 * sp[69] + -0.03333333333333453 * sp[70] + -0.03333333333333456 * sp[71] + -0.1333333333333331 * sp[72] + -0.03333333333333442 * sp[73] + -0.03333333333333448 * sp[74];
    A[10] = 0.03333333333333326 * sp[66] + 0.03333333333333329 * sp[67] + 0.0333333333333333 * sp[68];
    A[11] = 0.1000000000000001 * sp[66];
    A[12] = -0.03333333333333341 * sp[67];
    A[13] = -0.03333333333333334 * sp[68];
    A[14] = -0.03333333333333321 * sp[67] + -0.03333333333333321 * sp[68];
    A[15] = -0.03333333333333321 * sp[66] + 0.1000000000000003 * sp[68];
    A[16] = -0.03333333333333328 * sp[66] + 0.1000000000000003 * sp[67];
    A[17] = 0.0333333333333332 * sp[66] + 0.03333333333333319 * sp[67];
    A[18] = 0.0333333333333333 * sp[66] + 0.03333333333333326 * sp[68];
    A[19] = -0.1333333333333336 * sp[66] + -0.1000000000000001 * sp[67] + -0.1000000000000002 * sp[68];
    A[20] = 0.03333333333333337 * sp[69] + 0.03333333333333337 * sp[70] + 0.03333333333333337 * sp[71];
    A[21] = -0.03333333333333341 * sp[69];
    A[22] = 0.09999999999999991 * sp[70];
    A[23] = -0.03333333333333332 * sp[71];
    A[24] = -0.03333333333333342 * sp[70] + 0.09999999999999996 * sp[71];
    A[25] = -0.03333333333333345 * sp[69] + -0.03333333333333358 * sp[71];
    A[26] = 0.09999999999999996 * sp[69] + -0.03333333333333334 * sp[70];
    A[27] = 0.03333333333333344 * sp[69] + 0.03333333333333344 * sp[70];
    A[28] = -0.09999999999999995 * sp[69] + -0.1333333333333337 * sp[70] + -0.09999999999999989 * sp[71];
    A[29] = 0.03333333333333342 * sp[70] + 0.03333333333333349 * sp[71];
    A[30] = 0.03333333333333338 * sp[72] + 0.0333333333333334 * sp[73] + 0.03333333333333338 * sp[74];
    A[31] = -0.03333333333333334 * sp[72];
    A[32] = -0.03333333333333332 * sp[73];
    A[33] = 0.1000000000000002 * sp[74];
    A[34] = 0.09999999999999985 * sp[73] + -0.0333333333333339 * sp[74];
    A[35] = 0.09999999999999991 * sp[72] + -0.03333333333333355 * sp[74];
    A[36] = -0.03333333333333374 * sp[72] + -0.03333333333333384 * sp[73];
    A[37] = -0.09999999999999985 * sp[72] + -0.09999999999999985 * sp[73] + -0.1333333333333338 * sp[74];
    A[38] = 0.03333333333333376 * sp[72] + 0.03333333333333376 * sp[74];
    A[39] = 0.03333333333333367 * sp[73] + 0.0333333333333336 * sp[74];
    A[40] = 0.03333333333333456 * sp[69] + 0.03333333333333457 * sp[70] + 0.03333333333333447 * sp[71] + 0.03333333333333449 * sp[72] + 0.03333333333333449 * sp[73] + 0.03333333333333439 * sp[74];
    A[41] = -0.03333333333333321 * sp[69] + -0.03333333333333321 * sp[72];
    A[42] = -0.03333333333333342 * sp[70] + 0.09999999999999996 * sp[73];
    A[43] = 0.09999999999999985 * sp[71] + -0.0333333333333339 * sp[74];
    A[44] = 0.2666666666666679 * sp[70] + 0.1333333333333341 * sp[71] + 0.1333333333333341 * sp[73] + 0.266666666666668 * sp[74];
    A[45] = 0.2666666666666679 * sp[69] + 0.1333333333333353 * sp[71] + 0.1333333333333341 * sp[72] + 0.1333333333333352 * sp[74];
    A[46] = 0.1333333333333342 * sp[69] + 0.1333333333333349 * sp[70] + 0.2666666666666679 * sp[72] + 0.1333333333333352 * sp[73];
    A[47] = -0.2666666666666678 * sp[69] + -0.2666666666666678 * sp[70] + -0.1333333333333345 * sp[71] + -0.133333333333334 * sp[72] + -0.133333333333334 * sp[73];
    A[48] = -0.1333333333333343 * sp[69] + -0.1333333333333341 * sp[71] + -0.2666666666666681 * sp[72] + -0.1333333333333345 * sp[73] + -0.2666666666666678 * sp[74];
    A[49] = -0.1333333333333342 * sp[70] + -0.1333333333333342 * sp[71] + -0.1333333333333343 * sp[73] + -0.1333333333333342 * sp[74];
    A[50] = 0.03333333333333458 * sp[66] + 0.03333333333333459 * sp[67] + 0.03333333333333448 * sp[68] + 0.0333333333333346 * sp[72] + 0.03333333333333463 * sp[73] + 0.03333333333333455 * sp[74];
    A[51] = -0.03333333333333321 * sp[66] + 0.1000000000000003 * sp[72];
    A[52] = -0.03333333333333345 * sp[67] + -0.03333333333333358 * sp[73];
    A[53] = 0.09999999999999991 * sp[68] + -0.03333333333333355 * sp[74];
    A[54] = 0.2666666666666679 * sp[67] + 0.1333333333333341 * sp[68] + 0.1333333333333353 * sp[73] + 0.1333333333333352 * sp[74];
    A[55] = 0.2666666666666679 * sp[66] + 0.1333333333333353 * sp[68] + 0.1333333333333353 * sp[72] + 0.2666666666666697 * sp[74];
    A[56] = 0.1333333333333342 * sp[66] + 0.1333333333333349 * sp[67] + 0.133333333333335 * sp[72] + 0.2666666666666695 * sp[73];
    A[57] = -0.2666666666666678 * sp[66] + -0.2666666666666678 * sp[67] + -0.1333333333333345 * sp[68] + -0.1333333333333352 * sp[72] + -0.1333333333333352 * sp[73];
    A[58] = -0.1333333333333342 * sp[66] + -0.1333333333333341 * sp[68] + -0.1333333333333351 * sp[72] + -0.1333333333333349 * sp[74];
    A[59] = -0.1333333333333342 * sp[67] + -0.1333333333333342 * sp[68] + -0.1333333333333346 * sp[72] + -0.2666666666666686 * sp[73] + -0.2666666666666686 * sp[74];
    A[60] = 0.03333333333333456 * sp[66] + 0.03333333333333456 * sp[67] + 0.03333333333333445 * sp[68] + 0.03333333333333452 * sp[69] + 0.03333333333333455 * sp[70] + 0.03333333333333447 * sp[71];
    A[61] = -0.03333333333333328 * sp[66] + 0.1000000000000003 * sp[69];
    A[62] = 0.09999999999999996 * sp[67] + -0.03333333333333334 * sp[70];
    A[63] = -0.03333333333333374 * sp[68] + -0.03333333333333384 * sp[71];
    A[64] = 0.1333333333333342 * sp[67] + 0.2666666666666679 * sp[68] + 0.1333333333333349 * sp[70] + 0.1333333333333352 * sp[71];
    A[65] = 0.1333333333333342 * sp[66] + 0.133333333333335 * sp[68] + 0.1333333333333349 * sp[69] + 0.2666666666666695 * sp[71];
    A[66] = 0.2666666666666678 * sp[66] + 0.1333333333333351 * sp[67] + 0.1333333333333351 * sp[69] + 0.2666666666666693 * sp[70];
    A[67] = -0.1333333333333341 * sp[66] + -0.1333333333333342 * sp[67] + -0.1333333333333348 * sp[69] + -0.1333333333333348 * sp[70];
    A[68] = -0.2666666666666679 * sp[66] + -0.1333333333333345 * sp[67] + -0.2666666666666676 * sp[68] + -0.1333333333333352 * sp[69] + -0.133333333333335 * sp[71];
    A[69] = -0.1333333333333342 * sp[67] + -0.1333333333333341 * sp[68] + -0.1333333333333344 * sp[69] + -0.2666666666666684 * sp[70] + -0.2666666666666684 * sp[71];
    A[70] = -0.03333333333333456 * sp[66] + -0.03333333333333457 * sp[67] + -0.03333333333333448 * sp[68] + -0.03333333333333456 * sp[69] + -0.03333333333333457 * sp[70] + -0.03333333333333446 * sp[71] + -0.1333333333333331 * sp[72] + -0.1333333333333332 * sp[73] + -0.1333333333333332 * sp[74];
    A[71] = 0.0333333333333332 * sp[66] + 0.03333333333333319 * sp[69];
    A[72] = 0.03333333333333344 * sp[67] + 0.03333333333333344 * sp[70];
    A[73] = -0.09999999999999985 * sp[68] + -0.09999999999999985 * sp[71] + -0.1333333333333338 * sp[74];
    A[74] = -0.2666666666666678 * sp[67] + -0.133333333333334 * sp[68] + -0.2666666666666678 * sp[70] + -0.133333333333334 * sp[71] + -0.1333333333333345 * sp[73];
    A[75] = -0.2666666666666678 * sp[66] + -0.1333333333333352 * sp[68] + -0.2666666666666678 * sp[69] + -0.1333333333333352 * sp[71] + -0.1333333333333345 * sp[72];
    A[76] = -0.1333333333333341 * sp[66] + -0.1333333333333348 * sp[67] + -0.1333333333333342 * sp[69] + -0.1333333333333348 * sp[70];
    A[77] = 0.2666666666666677 * sp[66] + 0.2666666666666677 * sp[67] + 0.1333333333333344 * sp[68] + 0.2666666666666677 * sp[69] + 0.2666666666666677 * sp[70] + 0.1333333333333344 * sp[71] + 0.1333333333333344 * sp[72] + 0.1333333333333344 * sp[73] + 0.2666666666666669 * sp[74];
    A[78] = 0.1333333333333342 * sp[66] + 0.133333333333334 * sp[68] + 0.1333333333333342 * sp[69] + 0.133333333333334 * sp[71] + 0.1333333333333322 * sp[73];
    A[79] = 0.1333333333333341 * sp[67] + 0.1333333333333342 * sp[68] + 0.1333333333333342 * sp[70] + 0.1333333333333342 * sp[71] + 0.1333333333333322 * sp[72];
    A[80] = -0.03333333333333455 * sp[66] + -0.03333333333333455 * sp[67] + -0.03333333333333446 * sp[68] + -0.1333333333333331 * sp[69] + -0.1333333333333331 * sp[70] + -0.1333333333333331 * sp[71] + -0.03333333333333452 * sp[72] + -0.03333333333333451 * sp[73] + -0.03333333333333442 * sp[74];
    A[81] = 0.0333333333333333 * sp[66] + 0.03333333333333326 * sp[72];
    A[82] = -0.09999999999999995 * sp[67] + -0.1333333333333337 * sp[70] + -0.09999999999999989 * sp[73];
    A[83] = 0.03333333333333376 * sp[68] + 0.03333333333333376 * sp[74];
    A[84] = -0.1333333333333343 * sp[67] + -0.2666666666666681 * sp[68] + -0.1333333333333345 * sp[71] + -0.1333333333333341 * sp[73] + -0.2666666666666678 * sp[74];
    A[85] = -0.1333333333333342 * sp[66] + -0.1333333333333351 * sp[68] + -0.1333333333333341 * sp[72] + -0.1333333333333349 * sp[74];
    A[86] = -0.2666666666666679 * sp[66] + -0.1333333333333352 * sp[67] + -0.1333333333333345 * sp[69] + -0.2666666666666676 * sp[72] + -0.133333333333335 * sp[73];
    A[87] = 0.1333333333333342 * sp[66] + 0.1333333333333342 * sp[67] + 0.1333333333333322 * sp[71] + 0.133333333333334 * sp[72] + 0.133333333333334 * sp[73];
    A[88] = 0.2666666666666681 * sp[66] + 0.1333333333333345 * sp[67] + 0.2666666666666677 * sp[68] + 0.1333333333333345 * sp[69] + 0.2666666666666668 * sp[70] + 0.1333333333333344 * sp[71] + 0.2666666666666677 * sp[72] + 0.1333333333333344 * sp[73] + 0.2666666666666674 * sp[74];
    A[89] = 0.1333333333333343 * sp[67] + 0.1333333333333341 * sp[68] + 0.1333333333333321 * sp[69] + 0.1333333333333341 * sp[73] + 0.133333333333334 * sp[74];
    A[90] = -0.1333333333333331 * sp[66] + -0.1333333333333331 * sp[67] + -0.1333333333333331 * sp[68] + -0.03333333333333451 * sp[69] + -0.03333333333333453 * sp[70] + -0.03333333333333442 * sp[71] + -0.03333333333333455 * sp[72] + -0.03333333333333456 * sp[73] + -0.03333333333333448 * sp[74];
    A[91] = -0.1333333333333336 * sp[66] + -0.1000000000000001 * sp[69] + -0.1000000000000002 * sp[72];
    A[92] = 0.03333333333333342 * sp[70] + 0.03333333333333349 * sp[73];
    A[93] = 0.03333333333333367 * sp[71] + 0.0333333333333336 * sp[74];
    A[94] = -0.1333333333333342 * sp[70] + -0.1333333333333343 * sp[71] + -0.1333333333333342 * sp[73] + -0.1333333333333342 * sp[74];
    A[95] = -0.1333333333333346 * sp[68] + -0.1333333333333342 * sp[69] + -0.2666666666666686 * sp[71] + -0.1333333333333342 * sp[72] + -0.2666666666666686 * sp[74];
    A[96] = -0.1333333333333344 * sp[67] + -0.1333333333333342 * sp[69] + -0.2666666666666684 * sp[70] + -0.1333333333333341 * sp[72] + -0.2666666666666684 * sp[73];
    A[97] = 0.1333333333333322 * sp[68] + 0.1333333333333341 * sp[69] + 0.1333333333333342 * sp[70] + 0.1333333333333342 * sp[72] + 0.1333333333333342 * sp[73];
    A[98] = 0.1333333333333321 * sp[67] + 0.1333333333333343 * sp[69] + 0.1333333333333341 * sp[71] + 0.1333333333333341 * sp[72] + 0.133333333333334 * sp[74];
    A[99] = 0.2666666666666667 * sp[66] + 0.1333333333333343 * sp[67] + 0.1333333333333344 * sp[68] + 0.1333333333333343 * sp[69] + 0.2666666666666674 * sp[70] + 0.2666666666666674 * sp[71] + 0.1333333333333344 * sp[72] + 0.2666666666666674 * sp[73] + 0.2666666666666674 * sp[74];
  }

};


class p2_tet_stokes_full_tet_cell_integral_6_otherwise: public ufc::cell_integral
{
public:

  p2_tet_stokes_full_tet_cell_integral_6_otherwise() : ufc::cell_integral()
  {

  }

  ~p2_tet_stokes_full_tet_cell_integral_6_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE8_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q4[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q4[0][0][1];
    alignas(32) double sp[68];
    sp[0] = J_c1 * J_c5;
    sp[1] = J_c2 * J_c4;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c4 * J_c8;
    sp[4] = J_c5 * J_c7;
    sp[5] = sp[3] + -1 * sp[4];
    sp[6] = J_c0 * sp[5];
    sp[7] = J_c5 * J_c6;
    sp[8] = J_c3 * J_c8;
    sp[9] = sp[7] + -1 * sp[8];
    sp[10] = J_c1 * sp[9];
    sp[11] = sp[6] + sp[10];
    sp[12] = J_c3 * J_c7;
    sp[13] = J_c4 * J_c6;
    sp[14] = sp[12] + -1 * sp[13];
    sp[15] = J_c2 * sp[14];
    sp[16] = sp[11] + sp[15];
    sp[17] = sp[2] / sp[16];
    sp[18] = J_c2 * J_c3;
    sp[19] = J_c0 * J_c5;
    sp[20] = sp[18] + -1 * sp[19];
    sp[21] = sp[20] / sp[16];
    sp[22] = J_c0 * J_c4;
    sp[23] = J_c1 * J_c3;
    sp[24] = sp[22] + -1 * sp[23];
    sp[25] = sp[24] / sp[16];
    sp[26] = sp[5] / sp[16];
    sp[27] = J_c3 * (-1 * J_c8);
    sp[28] = sp[7] + sp[27];
    sp[29] = sp[28] / sp[16];
    sp[30] = sp[14] / sp[16];
    sp[31] = sp[17] * sp[26];
    sp[32] = sp[17] * sp[29];
    sp[33] = sp[17] * sp[30];
    sp[34] = sp[21] * sp[26];
    sp[35] = sp[21] * sp[29];
    sp[36] = sp[21] * sp[30];
    sp[37] = sp[25] * sp[26];
    sp[38] = sp[25] * sp[29];
    sp[39] = sp[25] * sp[30];
    sp[40] = 0.6666666666666666 * sp[26] * sp[17];
    sp[41] = 0.6666666666666666 * sp[29] * sp[17];
    sp[42] = 0.6666666666666666 * sp[30] * sp[17];
    sp[43] = 0.6666666666666666 * sp[26] * sp[21];
    sp[44] = 0.6666666666666666 * sp[29] * sp[21];
    sp[45] = 0.6666666666666666 * sp[30] * sp[21];
    sp[46] = 0.6666666666666666 * sp[26] * sp[25];
    sp[47] = 0.6666666666666666 * sp[29] * sp[25];
    sp[48] = 0.6666666666666666 * sp[30] * sp[25];
    sp[49] = -1 * sp[40] + sp[31];
    sp[50] = -1 * sp[43] + sp[32];
    sp[51] = -1 * sp[46] + sp[33];
    sp[52] = -1 * sp[41] + sp[34];
    sp[53] = -1 * sp[44] + sp[35];
    sp[54] = -1 * sp[47] + sp[36];
    sp[55] = -1 * sp[42] + sp[37];
    sp[56] = -1 * sp[45] + sp[38];
    sp[57] = -1 * sp[48] + sp[39];
    sp[58] = std::abs(sp[16]);
    sp[59] = sp[49] * sp[58];
    sp[60] = sp[50] * sp[58];
    sp[61] = sp[51] * sp[58];
    sp[62] = sp[52] * sp[58];
    sp[63] = sp[53] * sp[58];
    sp[64] = sp[54] * sp[58];
    sp[65] = sp[55] * sp[58];
    sp[66] = sp[56] * sp[58];
    sp[67] = sp[57] * sp[58];
    A[0] = 0.1 * sp[59] + 0.1000000000000001 * sp[62] + 0.1000000000000001 * sp[65] + 0.1000000000000001 * sp[60] + 0.1000000000000001 * sp[63] + 0.1000000000000001 * sp[66] + 0.1000000000000001 * sp[61] + 0.1000000000000001 * sp[64] + 0.1000000000000001 * sp[67];
    A[1] = 0.03333333333333326 * sp[59] + 0.03333333333333329 * sp[60] + 0.0333333333333333 * sp[61];
    A[2] = 0.03333333333333337 * sp[62] + 0.03333333333333337 * sp[63] + 0.03333333333333337 * sp[64];
    A[3] = 0.03333333333333338 * sp[65] + 0.0333333333333334 * sp[66] + 0.03333333333333338 * sp[67];
    A[4] = 0.03333333333333456 * sp[62] + 0.03333333333333449 * sp[65] + 0.03333333333333457 * sp[63] + 0.03333333333333449 * sp[66] + 0.03333333333333447 * sp[64] + 0.03333333333333439 * sp[67];
    A[5] = 0.03333333333333458 * sp[59] + 0.0333333333333346 * sp[65] + 0.03333333333333459 * sp[60] + 0.03333333333333463 * sp[66] + 0.03333333333333448 * sp[61] + 0.03333333333333455 * sp[67];
    A[6] = 0.03333333333333456 * sp[59] + 0.03333333333333452 * sp[62] + 0.03333333333333456 * sp[60] + 0.03333333333333455 * sp[63] + 0.03333333333333445 * sp[61] + 0.03333333333333447 * sp[64];
    A[7] = -0.03333333333333456 * sp[59] + -0.03333333333333456 * sp[62] + -0.1333333333333331 * sp[65] + -0.03333333333333457 * sp[60] + -0.03333333333333457 * sp[63] + -0.1333333333333332 * sp[66] + -0.03333333333333448 * sp[61] + -0.03333333333333446 * sp[64] + -0.1333333333333332 * sp[67];
    A[8] = -0.03333333333333455 * sp[59] + -0.1333333333333331 * sp[62] + -0.03333333333333452 * sp[65] + -0.03333333333333455 * sp[60] + -0.1333333333333331 * sp[63] + -0.03333333333333451 * sp[66] + -0.03333333333333446 * sp[61] + -0.1333333333333331 * sp[64] + -0.03333333333333442 * sp[67];
    A[9] = -0.1333333333333331 * sp[59] + -0.03333333333333451 * sp[62] + -0.03333333333333455 * sp[65] + -0.1333333333333331 * sp[60] + -0.03333333333333453 * sp[63] + -0.03333333333333456 * sp[66] + -0.1333333333333331 * sp[61] + -0.03333333333333442 * sp[64] + -0.03333333333333448 * sp[67];
    A[10] = 0.03333333333333326 * sp[59] + 0.03333333333333329 * sp[62] + 0.0333333333333333 * sp[65];
    A[11] = 0.1000000000000001 * sp[59];
    A[12] = -0.03333333333333341 * sp[62];
    A[13] = -0.03333333333333334 * sp[65];
    A[14] = -0.03333333333333321 * sp[62] + -0.03333333333333321 * sp[65];
    A[15] = -0.03333333333333321 * sp[59] + 0.1000000000000003 * sp[65];
    A[16] = -0.03333333333333328 * sp[59] + 0.1000000000000003 * sp[62];
    A[17] = 0.0333333333333332 * sp[59] + 0.03333333333333319 * sp[62];
    A[18] = 0.0333333333333333 * sp[59] + 0.03333333333333326 * sp[65];
    A[19] = -0.1333333333333336 * sp[59] + -0.1000000000000001 * sp[62] + -0.1000000000000002 * sp[65];
    A[20] = 0.03333333333333337 * sp[60] + 0.03333333333333337 * sp[63] + 0.03333333333333337 * sp[66];
    A[21] = -0.03333333333333341 * sp[60];
    A[22] = 0.09999999999999991 * sp[63];
    A[23] = -0.03333333333333332 * sp[66];
    A[24] = -0.03333333333333342 * sp[63] + 0.09999999999999996 * sp[66];
    A[25] = -0.03333333333333345 * sp[60] + -0.03333333333333358 * sp[66];
    A[26] = 0.09999999999999996 * sp[60] + -0.03333333333333334 * sp[63];
    A[27] = 0.03333333333333344 * sp[60] + 0.03333333333333344 * sp[63];
    A[28] = -0.09999999999999995 * sp[60] + -0.1333333333333337 * sp[63] + -0.09999999999999989 * sp[66];
    A[29] = 0.03333333333333342 * sp[63] + 0.03333333333333349 * sp[66];
    A[30] = 0.03333333333333338 * sp[61] + 0.0333333333333334 * sp[64] + 0.03333333333333338 * sp[67];
    A[31] = -0.03333333333333334 * sp[61];
    A[32] = -0.03333333333333332 * sp[64];
    A[33] = 0.1000000000000002 * sp[67];
    A[34] = 0.09999999999999985 * sp[64] + -0.0333333333333339 * sp[67];
    A[35] = 0.09999999999999991 * sp[61] + -0.03333333333333355 * sp[67];
    A[36] = -0.03333333333333374 * sp[61] + -0.03333333333333384 * sp[64];
    A[37] = -0.09999999999999985 * sp[61] + -0.09999999999999985 * sp[64] + -0.1333333333333338 * sp[67];
    A[38] = 0.03333333333333376 * sp[61] + 0.03333333333333376 * sp[67];
    A[39] = 0.03333333333333367 * sp[64] + 0.0333333333333336 * sp[67];
    A[40] = 0.03333333333333456 * sp[60] + 0.03333333333333457 * sp[63] + 0.03333333333333447 * sp[66] + 0.03333333333333449 * sp[61] + 0.03333333333333449 * sp[64] + 0.03333333333333439 * sp[67];
    A[41] = -0.03333333333333321 * sp[60] + -0.03333333333333321 * sp[61];
    A[42] = -0.03333333333333342 * sp[63] + 0.09999999999999996 * sp[64];
    A[43] = 0.09999999999999985 * sp[66] + -0.0333333333333339 * sp[67];
    A[44] = 0.2666666666666679 * sp[63] + 0.1333333333333341 * sp[66] + 0.1333333333333341 * sp[64] + 0.266666666666668 * sp[67];
    A[45] = 0.2666666666666679 * sp[60] + 0.1333333333333353 * sp[66] + 0.1333333333333341 * sp[61] + 0.1333333333333352 * sp[67];
    A[46] = 0.1333333333333342 * sp[60] + 0.1333333333333349 * sp[63] + 0.2666666666666679 * sp[61] + 0.1333333333333352 * sp[64];
    A[47] = -0.2666666666666678 * sp[60] + -0.2666666666666678 * sp[63] + -0.1333333333333345 * sp[66] + -0.133333333333334 * sp[61] + -0.133333333333334 * sp[64];
    A[48] = -0.1333333333333343 * sp[60] + -0.1333333333333341 * sp[66] + -0.2666666666666681 * sp[61] + -0.1333333333333345 * sp[64] + -0.2666666666666678 * sp[67];
    A[49] = -0.1333333333333342 * sp[63] + -0.1333333333333342 * sp[66] + -0.1333333333333343 * sp[64] + -0.1333333333333342 * sp[67];
    A[50] = 0.03333333333333458 * sp[59] + 0.03333333333333459 * sp[62] + 0.03333333333333448 * sp[65] + 0.0333333333333346 * sp[61] + 0.03333333333333463 * sp[64] + 0.03333333333333455 * sp[67];
    A[51] = -0.03333333333333321 * sp[59] + 0.1000000000000003 * sp[61];
    A[52] = -0.03333333333333345 * sp[62] + -0.03333333333333358 * sp[64];
    A[53] = 0.09999999999999991 * sp[65] + -0.03333333333333355 * sp[67];
    A[54] = 0.2666666666666679 * sp[62] + 0.1333333333333341 * sp[65] + 0.1333333333333353 * sp[64] + 0.1333333333333352 * sp[67];
    A[55] = 0.2666666666666679 * sp[59] + 0.1333333333333353 * sp[65] + 0.1333333333333353 * sp[61] + 0.2666666666666697 * sp[67];
    A[56] = 0.1333333333333342 * sp[59] + 0.1333333333333349 * sp[62] + 0.133333333333335 * sp[61] + 0.2666666666666695 * sp[64];
    A[57] = -0.2666666666666678 * sp[59] + -0.2666666666666678 * sp[62] + -0.1333333333333345 * sp[65] + -0.1333333333333352 * sp[61] + -0.1333333333333352 * sp[64];
    A[58] = -0.1333333333333342 * sp[59] + -0.1333333333333341 * sp[65] + -0.1333333333333351 * sp[61] + -0.1333333333333349 * sp[67];
    A[59] = -0.1333333333333342 * sp[62] + -0.1333333333333342 * sp[65] + -0.1333333333333346 * sp[61] + -0.2666666666666686 * sp[64] + -0.2666666666666686 * sp[67];
    A[60] = 0.03333333333333456 * sp[59] + 0.03333333333333456 * sp[62] + 0.03333333333333445 * sp[65] + 0.03333333333333452 * sp[60] + 0.03333333333333455 * sp[63] + 0.03333333333333447 * sp[66];
    A[61] = -0.03333333333333328 * sp[59] + 0.1000000000000003 * sp[60];
    A[62] = 0.09999999999999996 * sp[62] + -0.03333333333333334 * sp[63];
    A[63] = -0.03333333333333374 * sp[65] + -0.03333333333333384 * sp[66];
    A[64] = 0.1333333333333342 * sp[62] + 0.2666666666666679 * sp[65] + 0.1333333333333349 * sp[63] + 0.1333333333333352 * sp[66];
    A[65] = 0.1333333333333342 * sp[59] + 0.133333333333335 * sp[65] + 0.1333333333333349 * sp[60] + 0.2666666666666695 * sp[66];
    A[66] = 0.2666666666666678 * sp[59] + 0.1333333333333351 * sp[62] + 0.1333333333333351 * sp[60] + 0.2666666666666693 * sp[63];
    A[67] = -0.1333333333333341 * sp[59] + -0.1333333333333342 * sp[62] + -0.1333333333333348 * sp[60] + -0.1333333333333348 * sp[63];
    A[68] = -0.2666666666666679 * sp[59] + -0.1333333333333345 * sp[62] + -0.2666666666666676 * sp[65] + -0.1333333333333352 * sp[60] + -0.133333333333335 * sp[66];
    A[69] = -0.1333333333333342 * sp[62] + -0.1333333333333341 * sp[65] + -0.1333333333333344 * sp[60] + -0.2666666666666684 * sp[63] + -0.2666666666666684 * sp[66];
    A[70] = -0.03333333333333456 * sp[59] + -0.03333333333333457 * sp[62] + -0.03333333333333448 * sp[65] + -0.03333333333333456 * sp[60] + -0.03333333333333457 * sp[63] + -0.03333333333333446 * sp[66] + -0.1333333333333331 * sp[61] + -0.1333333333333332 * sp[64] + -0.1333333333333332 * sp[67];
    A[71] = 0.0333333333333332 * sp[59] + 0.03333333333333319 * sp[60];
    A[72] = 0.03333333333333344 * sp[62] + 0.03333333333333344 * sp[63];
    A[73] = -0.09999999999999985 * sp[65] + -0.09999999999999985 * sp[66] + -0.1333333333333338 * sp[67];
    A[74] = -0.2666666666666678 * sp[62] + -0.133333333333334 * sp[65] + -0.2666666666666678 * sp[63] + -0.133333333333334 * sp[66] + -0.1333333333333345 * sp[64];
    A[75] = -0.2666666666666678 * sp[59] + -0.1333333333333352 * sp[65] + -0.2666666666666678 * sp[60] + -0.1333333333333352 * sp[66] + -0.1333333333333345 * sp[61];
    A[76] = -0.1333333333333341 * sp[59] + -0.1333333333333348 * sp[62] + -0.1333333333333342 * sp[60] + -0.1333333333333348 * sp[63];
    A[77] = 0.2666666666666677 * sp[59] + 0.2666666666666677 * sp[62] + 0.1333333333333344 * sp[65] + 0.2666666666666677 * sp[60] + 0.2666666666666677 * sp[63] + 0.1333333333333344 * sp[66] + 0.1333333333333344 * sp[61] + 0.1333333333333344 * sp[64] + 0.2666666666666669 * sp[67];
    A[78] = 0.1333333333333342 * sp[59] + 0.133333333333334 * sp[65] + 0.1333333333333342 * sp[60] + 0.133333333333334 * sp[66] + 0.1333333333333322 * sp[64];
    A[79] = 0.1333333333333341 * sp[62] + 0.1333333333333342 * sp[65] + 0.1333333333333342 * sp[63] + 0.1333333333333342 * sp[66] + 0.1333333333333322 * sp[61];
    A[80] = -0.03333333333333455 * sp[59] + -0.03333333333333455 * sp[62] + -0.03333333333333446 * sp[65] + -0.1333333333333331 * sp[60] + -0.1333333333333331 * sp[63] + -0.1333333333333331 * sp[66] + -0.03333333333333452 * sp[61] + -0.03333333333333451 * sp[64] + -0.03333333333333442 * sp[67];
    A[81] = 0.0333333333333333 * sp[59] + 0.03333333333333326 * sp[61];
    A[82] = -0.09999999999999995 * sp[62] + -0.1333333333333337 * sp[63] + -0.09999999999999989 * sp[64];
    A[83] = 0.03333333333333376 * sp[65] + 0.03333333333333376 * sp[67];
    A[84] = -0.1333333333333343 * sp[62] + -0.2666666666666681 * sp[65] + -0.1333333333333345 * sp[66] + -0.1333333333333341 * sp[64] + -0.2666666666666678 * sp[67];
    A[85] = -0.1333333333333342 * sp[59] + -0.1333333333333351 * sp[65] + -0.1333333333333341 * sp[61] + -0.1333333333333349 * sp[67];
    A[86] = -0.2666666666666679 * sp[59] + -0.1333333333333352 * sp[62] + -0.1333333333333345 * sp[60] + -0.2666666666666676 * sp[61] + -0.133333333333335 * sp[64];
    A[87] = 0.1333333333333342 * sp[59] + 0.1333333333333342 * sp[62] + 0.1333333333333322 * sp[66] + 0.133333333333334 * sp[61] + 0.133333333333334 * sp[64];
    A[88] = 0.2666666666666681 * sp[59] + 0.1333333333333345 * sp[62] + 0.2666666666666677 * sp[65] + 0.1333333333333345 * sp[60] + 0.2666666666666668 * sp[63] + 0.1333333333333344 * sp[66] + 0.2666666666666677 * sp[61] + 0.1333333333333344 * sp[64] + 0.2666666666666674 * sp[67];
    A[89] = 0.1333333333333343 * sp[62] + 0.1333333333333341 * sp[65] + 0.1333333333333321 * sp[60] + 0.1333333333333341 * sp[64] + 0.133333333333334 * sp[67];
    A[90] = -0.1333333333333331 * sp[59] + -0.1333333333333331 * sp[62] + -0.1333333333333331 * sp[65] + -0.03333333333333451 * sp[60] + -0.03333333333333453 * sp[63] + -0.03333333333333442 * sp[66] + -0.03333333333333455 * sp[61] + -0.03333333333333456 * sp[64] + -0.03333333333333448 * sp[67];
    A[91] = -0.1333333333333336 * sp[59] + -0.1000000000000001 * sp[60] + -0.1000000000000002 * sp[61];
    A[92] = 0.03333333333333342 * sp[63] + 0.03333333333333349 * sp[64];
    A[93] = 0.03333333333333367 * sp[66] + 0.0333333333333336 * sp[67];
    A[94] = -0.1333333333333342 * sp[63] + -0.1333333333333343 * sp[66] + -0.1333333333333342 * sp[64] + -0.1333333333333342 * sp[67];
    A[95] = -0.1333333333333346 * sp[65] + -0.1333333333333342 * sp[60] + -0.2666666666666686 * sp[66] + -0.1333333333333342 * sp[61] + -0.2666666666666686 * sp[67];
    A[96] = -0.1333333333333344 * sp[62] + -0.1333333333333342 * sp[60] + -0.2666666666666684 * sp[63] + -0.1333333333333341 * sp[61] + -0.2666666666666684 * sp[64];
    A[97] = 0.1333333333333322 * sp[65] + 0.1333333333333341 * sp[60] + 0.1333333333333342 * sp[63] + 0.1333333333333342 * sp[61] + 0.1333333333333342 * sp[64];
    A[98] = 0.1333333333333321 * sp[62] + 0.1333333333333343 * sp[60] + 0.1333333333333341 * sp[66] + 0.1333333333333341 * sp[61] + 0.133333333333334 * sp[67];
    A[99] = 0.2666666666666667 * sp[59] + 0.1333333333333343 * sp[62] + 0.1333333333333344 * sp[65] + 0.1333333333333343 * sp[60] + 0.2666666666666674 * sp[63] + 0.2666666666666674 * sp[66] + 0.1333333333333344 * sp[61] + 0.2666666666666674 * sp[64] + 0.2666666666666674 * sp[67];
  }

};


class p2_tet_stokes_full_tet_cell_integral_7_otherwise: public ufc::cell_integral
{
public:

  p2_tet_stokes_full_tet_cell_integral_7_otherwise() : ufc::cell_integral()
  {

  }

  ~p2_tet_stokes_full_tet_cell_integral_7_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE8_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q4[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q4[0][0][1];
    alignas(32) double sp[75];
    sp[0] = J_c1 * J_c5;
    sp[1] = J_c2 * J_c4;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c4 * J_c8;
    sp[4] = J_c5 * J_c7;
    sp[5] = sp[3] + -1 * sp[4];
    sp[6] = J_c0 * sp[5];
    sp[7] = J_c5 * J_c6;
    sp[8] = J_c3 * J_c8;
    sp[9] = sp[7] + -1 * sp[8];
    sp[10] = J_c1 * sp[9];
    sp[11] = sp[6] + sp[10];
    sp[12] = J_c3 * J_c7;
    sp[13] = J_c4 * J_c6;
    sp[14] = sp[12] + -1 * sp[13];
    sp[15] = J_c2 * sp[14];
    sp[16] = sp[11] + sp[15];
    sp[17] = sp[2] / sp[16];
    sp[18] = J_c2 * J_c3;
    sp[19] = J_c0 * J_c5;
    sp[20] = sp[18] + -1 * sp[19];
    sp[21] = sp[20] / sp[16];
    sp[22] = J_c0 * J_c4;
    sp[23] = J_c1 * J_c3;
    sp[24] = sp[22] + -1 * sp[23];
    sp[25] = sp[24] / sp[16];
    sp[26] = J_c2 * J_c7;
    sp[27] = J_c8 * (-1 * J_c1);
    sp[28] = sp[26] + sp[27];
    sp[29] = sp[28] / sp[16];
    sp[30] = J_c0 * J_c8;
    sp[31] = J_c6 * (-1 * J_c2);
    sp[32] = sp[30] + sp[31];
    sp[33] = sp[32] / sp[16];
    sp[34] = J_c1 * J_c6;
    sp[35] = J_c0 * J_c7;
    sp[36] = sp[34] + -1 * sp[35];
    sp[37] = sp[36] / sp[16];
    sp[38] = sp[29] * sp[17];
    sp[39] = sp[33] * sp[17];
    sp[40] = sp[17] * sp[37];
    sp[41] = sp[29] * sp[21];
    sp[42] = sp[33] * sp[21];
    sp[43] = sp[21] * sp[37];
    sp[44] = sp[29] * sp[25];
    sp[45] = sp[33] * sp[25];
    sp[46] = sp[25] * sp[37];
    sp[47] = 0.6666666666666666 * sp[29] * sp[17];
    sp[48] = 0.6666666666666666 * sp[33] * sp[17];
    sp[49] = 0.6666666666666666 * sp[37] * sp[17];
    sp[50] = 0.6666666666666666 * sp[29] * sp[21];
    sp[51] = 0.6666666666666666 * sp[33] * sp[21];
    sp[52] = 0.6666666666666666 * sp[37] * sp[21];
    sp[53] = 0.6666666666666666 * sp[29] * sp[25];
    sp[54] = 0.6666666666666666 * sp[33] * sp[25];
    sp[55] = 0.6666666666666666 * sp[37] * sp[25];
    sp[56] = -1 * sp[47] + sp[38];
    sp[57] = -1 * sp[50] + sp[39];
    sp[58] = -1 * sp[53] + sp[40];
    sp[59] = -1 * sp[48] + sp[41];
    sp[60] = -1 * sp[51] + sp[42];
    sp[61] = -1 * sp[54] + sp[43];
    sp[62] = -1 * sp[49] + sp[44];
    sp[63] = -1 * sp[52] + sp[45];
    sp[64] = -1 * sp[55] + sp[46];
    sp[65] = std::abs(sp[16]);
    sp[66] = sp[56] * sp[65];
    sp[67] = sp[57] * sp[65];
    sp[68] = sp[58] * sp[65];
    sp[69] = sp[59] * sp[65];
    sp[70] = sp[60] * sp[65];
    sp[71] = sp[61] * sp[65];
    sp[72] = sp[62] * sp[65];
    sp[73] = sp[63] * sp[65];
    sp[74] = sp[64] * sp[65];
    A[0] = 0.1 * sp[66] + 0.1000000000000001 * sp[69] + 0.1000000000000001 * sp[72] + 0.1000000000000001 * sp[67] + 0.1000000000000001 * sp[70] + 0.1000000000000001 * sp[73] + 0.1000000000000001 * sp[68] + 0.1000000000000001 * sp[71] + 0.1000000000000001 * sp[74];
    A[1] = 0.03333333333333326 * sp[66] + 0.03333333333333329 * sp[67] + 0.0333333333333333 * sp[68];
    A[2] = 0.03333333333333337 * sp[69] + 0.03333333333333337 * sp[70] + 0.03333333333333337 * sp[71];
    A[3] = 0.03333333333333338 * sp[72] + 0.0333333333333334 * sp[73] + 0.03333333333333338 * sp[74];
    A[4] = 0.03333333333333456 * sp[69] + 0.03333333333333449 * sp[72] + 0.03333333333333457 * sp[70] + 0.03333333333333449 * sp[73] + 0.03333333333333447 * sp[71] + 0.03333333333333439 * sp[74];
    A[5] = 0.03333333333333458 * sp[66] + 0.0333333333333346 * sp[72] + 0.03333333333333459 * sp[67] + 0.03333333333333463 * sp[73] + 0.03333333333333448 * sp[68] + 0.03333333333333455 * sp[74];
    A[6] = 0.03333333333333456 * sp[66] + 0.03333333333333452 * sp[69] + 0.03333333333333456 * sp[67] + 0.03333333333333455 * sp[70] + 0.03333333333333445 * sp[68] + 0.03333333333333447 * sp[71];
    A[7] = -0.03333333333333456 * sp[66] + -0.03333333333333456 * sp[69] + -0.1333333333333331 * sp[72] + -0.03333333333333457 * sp[67] + -0.03333333333333457 * sp[70] + -0.1333333333333332 * sp[73] + -0.03333333333333448 * sp[68] + -0.03333333333333446 * sp[71] + -0.1333333333333332 * sp[74];
    A[8] = -0.03333333333333455 * sp[66] + -0.1333333333333331 * sp[69] + -0.03333333333333452 * sp[72] + -0.03333333333333455 * sp[67] + -0.1333333333333331 * sp[70] + -0.03333333333333451 * sp[73] + -0.03333333333333446 * sp[68] + -0.1333333333333331 * sp[71] + -0.03333333333333442 * sp[74];
    A[9] = -0.1333333333333331 * sp[66] + -0.03333333333333451 * sp[69] + -0.03333333333333455 * sp[72] + -0.1333333333333331 * sp[67] + -0.03333333333333453 * sp[70] + -0.03333333333333456 * sp[73] + -0.1333333333333331 * sp[68] + -0.03333333333333442 * sp[71] + -0.03333333333333448 * sp[74];
    A[10] = 0.03333333333333326 * sp[66] + 0.03333333333333329 * sp[69] + 0.0333333333333333 * sp[72];
    A[11] = 0.1000000000000001 * sp[66];
    A[12] = -0.03333333333333341 * sp[69];
    A[13] = -0.03333333333333334 * sp[72];
    A[14] = -0.03333333333333321 * sp[69] + -0.03333333333333321 * sp[72];
    A[15] = -0.03333333333333321 * sp[66] + 0.1000000000000003 * sp[72];
    A[16] = -0.03333333333333328 * sp[66] + 0.1000000000000003 * sp[69];
    A[17] = 0.0333333333333332 * sp[66] + 0.03333333333333319 * sp[69];
    A[18] = 0.0333333333333333 * sp[66] + 0.03333333333333326 * sp[72];
    A[19] = -0.1333333333333336 * sp[66] + -0.1000000000000001 * sp[69] + -0.1000000000000002 * sp[72];
    A[20] = 0.03333333333333337 * sp[67] + 0.03333333333333337 * sp[70] + 0.03333333333333337 * sp[73];
    A[21] = -0.03333333333333341 * sp[67];
    A[22] = 0.09999999999999991 * sp[70];
    A[23] = -0.03333333333333332 * sp[73];
    A[24] = -0.03333333333333342 * sp[70] + 0.09999999999999996 * sp[73];
    A[25] = -0.03333333333333345 * sp[67] + -0.03333333333333358 * sp[73];
    A[26] = 0.09999999999999996 * sp[67] + -0.03333333333333334 * sp[70];
    A[27] = 0.03333333333333344 * sp[67] + 0.03333333333333344 * sp[70];
    A[28] = -0.09999999999999995 * sp[67] + -0.1333333333333337 * sp[70] + -0.09999999999999989 * sp[73];
    A[29] = 0.03333333333333342 * sp[70] + 0.03333333333333349 * sp[73];
    A[30] = 0.03333333333333338 * sp[68] + 0.0333333333333334 * sp[71] + 0.03333333333333338 * sp[74];
    A[31] = -0.03333333333333334 * sp[68];
    A[32] = -0.03333333333333332 * sp[71];
    A[33] = 0.1000000000000002 * sp[74];
    A[34] = 0.09999999999999985 * sp[71] + -0.0333333333333339 * sp[74];
    A[35] = 0.09999999999999991 * sp[68] + -0.03333333333333355 * sp[74];
    A[36] = -0.03333333333333374 * sp[68] + -0.03333333333333384 * sp[71];
    A[37] = -0.09999999999999985 * sp[68] + -0.09999999999999985 * sp[71] + -0.1333333333333338 * sp[74];
    A[38] = 0.03333333333333376 * sp[68] + 0.03333333333333376 * sp[74];
    A[39] = 0.03333333333333367 * sp[71] + 0.0333333333333336 * sp[74];
    A[40] = 0.03333333333333456 * sp[67] + 0.03333333333333457 * sp[70] + 0.03333333333333447 * sp[73] + 0.03333333333333449 * sp[68] + 0.03333333333333449 * sp[71] + 0.03333333333333439 * sp[74];
    A[41] = -0.03333333333333321 * sp[67] + -0.03333333333333321 * sp[68];
    A[42] = -0.03333333333333342 * sp[70] + 0.09999999999999996 * sp[71];
    A[43] = 0.09999999999999985 * sp[73] + -0.0333333333333339 * sp[74];
    A[44] = 0.2666666666666679 * sp[70] + 0.1333333333333341 * sp[73] + 0.1333333333333341 * sp[71] + 0.266666666666668 * sp[74];
    A[45] = 0.2666666666666679 * sp[67] + 0.1333333333333353 * sp[73] + 0.1333333333333341 * sp[68] + 0.1333333333333352 * sp[74];
    A[46] = 0.1333333333333342 * sp[67] + 0.1333333333333349 * sp[70] + 0.2666666666666679 * sp[68] + 0.1333333333333352 * sp[71];
    A[47] = -0.2666666666666678 * sp[67] + -0.2666666666666678 * sp[70] + -0.1333333333333345 * sp[73] + -0.133333333333334 * sp[68] + -0.133333333333334 * sp[71];
    A[48] = -0.1333333333333343 * sp[67] + -0.1333333333333341 * sp[73] + -0.2666666666666681 * sp[68] + -0.1333333333333345 * sp[71] + -0.2666666666666678 * sp[74];
    A[49] = -0.1333333333333342 * sp[70] + -0.1333333333333342 * sp[73] + -0.1333333333333343 * sp[71] + -0.1333333333333342 * sp[74];
    A[50] = 0.03333333333333458 * sp[66] + 0.03333333333333459 * sp[69] + 0.03333333333333448 * sp[72] + 0.0333333333333346 * sp[68] + 0.03333333333333463 * sp[71] + 0.03333333333333455 * sp[74];
    A[51] = -0.03333333333333321 * sp[66] + 0.1000000000000003 * sp[68];
    A[52] = -0.03333333333333345 * sp[69] + -0.03333333333333358 * sp[71];
    A[53] = 0.09999999999999991 * sp[72] + -0.03333333333333355 * sp[74];
    A[54] = 0.2666666666666679 * sp[69] + 0.1333333333333341 * sp[72] + 0.1333333333333353 * sp[71] + 0.1333333333333352 * sp[74];
    A[55] = 0.2666666666666679 * sp[66] + 0.1333333333333353 * sp[72] + 0.1333333333333353 * sp[68] + 0.2666666666666697 * sp[74];
    A[56] = 0.1333333333333342 * sp[66] + 0.1333333333333349 * sp[69] + 0.133333333333335 * sp[68] + 0.2666666666666695 * sp[71];
    A[57] = -0.2666666666666678 * sp[66] + -0.2666666666666678 * sp[69] + -0.1333333333333345 * sp[72] + -0.1333333333333352 * sp[68] + -0.1333333333333352 * sp[71];
    A[58] = -0.1333333333333342 * sp[66] + -0.1333333333333341 * sp[72] + -0.1333333333333351 * sp[68] + -0.1333333333333349 * sp[74];
    A[59] = -0.1333333333333342 * sp[69] + -0.1333333333333342 * sp[72] + -0.1333333333333346 * sp[68] + -0.2666666666666686 * sp[71] + -0.2666666666666686 * sp[74];
    A[60] = 0.03333333333333456 * sp[66] + 0.03333333333333456 * sp[69] + 0.03333333333333445 * sp[72] + 0.03333333333333452 * sp[67] + 0.03333333333333455 * sp[70] + 0.03333333333333447 * sp[73];
    A[61] = -0.03333333333333328 * sp[66] + 0.1000000000000003 * sp[67];
    A[62] = 0.09999999999999996 * sp[69] + -0.03333333333333334 * sp[70];
    A[63] = -0.03333333333333374 * sp[72] + -0.03333333333333384 * sp[73];
    A[64] = 0.1333333333333342 * sp[69] + 0.2666666666666679 * sp[72] + 0.1333333333333349 * sp[70] + 0.1333333333333352 * sp[73];
    A[65] = 0.1333333333333342 * sp[66] + 0.133333333333335 * sp[72] + 0.1333333333333349 * sp[67] + 0.2666666666666695 * sp[73];
    A[66] = 0.2666666666666678 * sp[66] + 0.1333333333333351 * sp[69] + 0.1333333333333351 * sp[67] + 0.2666666666666693 * sp[70];
    A[67] = -0.1333333333333341 * sp[66] + -0.1333333333333342 * sp[69] + -0.1333333333333348 * sp[67] + -0.1333333333333348 * sp[70];
    A[68] = -0.2666666666666679 * sp[66] + -0.1333333333333345 * sp[69] + -0.2666666666666676 * sp[72] + -0.1333333333333352 * sp[67] + -0.133333333333335 * sp[73];
    A[69] = -0.1333333333333342 * sp[69] + -0.1333333333333341 * sp[72] + -0.1333333333333344 * sp[67] + -0.2666666666666684 * sp[70] + -0.2666666666666684 * sp[73];
    A[70] = -0.03333333333333456 * sp[66] + -0.03333333333333457 * sp[69] + -0.03333333333333448 * sp[72] + -0.03333333333333456 * sp[67] + -0.03333333333333457 * sp[70] + -0.03333333333333446 * sp[73] + -0.1333333333333331 * sp[68] + -0.1333333333333332 * sp[71] + -0.1333333333333332 * sp[74];
    A[71] = 0.0333333333333332 * sp[66] + 0.03333333333333319 * sp[67];
    A[72] = 0.03333333333333344 * sp[69] + 0.03333333333333344 * sp[70];
    A[73] = -0.09999999999999985 * sp[72] + -0.09999999999999985 * sp[73] + -0.1333333333333338 * sp[74];
    A[74] = -0.2666666666666678 * sp[69] + -0.133333333333334 * sp[72] + -0.2666666666666678 * sp[70] + -0.133333333333334 * sp[73] + -0.1333333333333345 * sp[71];
    A[75] = -0.2666666666666678 * sp[66] + -0.1333333333333352 * sp[72] + -0.2666666666666678 * sp[67] + -0.1333333333333352 * sp[73] + -0.1333333333333345 * sp[68];
    A[76] = -0.1333333333333341 * sp[66] + -0.1333333333333348 * sp[69] + -0.1333333333333342 * sp[67] + -0.1333333333333348 * sp[70];
    A[77] = 0.2666666666666677 * sp[66] + 0.2666666666666677 * sp[69] + 0.1333333333333344 * sp[72] + 0.2666666666666677 * sp[67] + 0.2666666666666677 * sp[70] + 0.1333333333333344 * sp[73] + 0.1333333333333344 * sp[68] + 0.1333333333333344 * sp[71] + 0.2666666666666669 * sp[74];
    A[78] = 0.1333333333333342 * sp[66] + 0.133333333333334 * sp[72] + 0.1333333333333342 * sp[67] + 0.133333333333334 * sp[73] + 0.1333333333333322 * sp[71];
    A[79] = 0.1333333333333341 * sp[69] + 0.1333333333333342 * sp[72] + 0.1333333333333342 * sp[70] + 0.1333333333333342 * sp[73] + 0.1333333333333322 * sp[68];
    A[80] = -0.03333333333333455 * sp[66] + -0.03333333333333455 * sp[69] + -0.03333333333333446 * sp[72] + -0.1333333333333331 * sp[67] + -0.1333333333333331 * sp[70] + -0.1333333333333331 * sp[73] + -0.03333333333333452 * sp[68] + -0.03333333333333451 * sp[71] + -0.03333333333333442 * sp[74];
    A[81] = 0.0333333333333333 * sp[66] + 0.03333333333333326 * sp[68];
    A[82] = -0.09999999999999995 * sp[69] + -0.1333333333333337 * sp[70] + -0.09999999999999989 * sp[71];
    A[83] = 0.03333333333333376 * sp[72] + 0.03333333333333376 * sp[74];
    A[84] = -0.1333333333333343 * sp[69] + -0.2666666666666681 * sp[72] + -0.1333333333333345 * sp[73] + -0.1333333333333341 * sp[71] + -0.2666666666666678 * sp[74];
    A[85] = -0.1333333333333342 * sp[66] + -0.1333333333333351 * sp[72] + -0.1333333333333341 * sp[68] + -0.1333333333333349 * sp[74];
    A[86] = -0.2666666666666679 * sp[66] + -0.1333333333333352 * sp[69] + -0.1333333333333345 * sp[67] + -0.2666666666666676 * sp[68] + -0.133333333333335 * sp[71];
    A[87] = 0.1333333333333342 * sp[66] + 0.1333333333333342 * sp[69] + 0.1333333333333322 * sp[73] + 0.133333333333334 * sp[68] + 0.133333333333334 * sp[71];
    A[88] = 0.2666666666666681 * sp[66] + 0.1333333333333345 * sp[69] + 0.2666666666666677 * sp[72] + 0.1333333333333345 * sp[67] + 0.2666666666666668 * sp[70] + 0.1333333333333344 * sp[73] + 0.2666666666666677 * sp[68] + 0.1333333333333344 * sp[71] + 0.2666666666666674 * sp[74];
    A[89] = 0.1333333333333343 * sp[69] + 0.1333333333333341 * sp[72] + 0.1333333333333321 * sp[67] + 0.1333333333333341 * sp[71] + 0.133333333333334 * sp[74];
    A[90] = -0.1333333333333331 * sp[66] + -0.1333333333333331 * sp[69] + -0.1333333333333331 * sp[72] + -0.03333333333333451 * sp[67] + -0.03333333333333453 * sp[70] + -0.03333333333333442 * sp[73] + -0.03333333333333455 * sp[68] + -0.03333333333333456 * sp[71] + -0.03333333333333448 * sp[74];
    A[91] = -0.1333333333333336 * sp[66] + -0.1000000000000001 * sp[67] + -0.1000000000000002 * sp[68];
    A[92] = 0.03333333333333342 * sp[70] + 0.03333333333333349 * sp[71];
    A[93] = 0.03333333333333367 * sp[73] + 0.0333333333333336 * sp[74];
    A[94] = -0.1333333333333342 * sp[70] + -0.1333333333333343 * sp[73] + -0.1333333333333342 * sp[71] + -0.1333333333333342 * sp[74];
    A[95] = -0.1333333333333346 * sp[72] + -0.1333333333333342 * sp[67] + -0.2666666666666686 * sp[73] + -0.1333333333333342 * sp[68] + -0.2666666666666686 * sp[74];
    A[96] = -0.1333333333333344 * sp[69] + -0.1333333333333342 * sp[67] + -0.2666666666666684 * sp[70] + -0.1333333333333341 * sp[68] + -0.2666666666666684 * sp[71];
    A[97] = 0.1333333333333322 * sp[72] + 0.1333333333333341 * sp[67] + 0.1333333333333342 * sp[70] + 0.1333333333333342 * sp[68] + 0.1333333333333342 * sp[71];
    A[98] = 0.1333333333333321 * sp[69] + 0.1333333333333343 * sp[67] + 0.1333333333333341 * sp[73] + 0.1333333333333341 * sp[68] + 0.133333333333334 * sp[74];
    A[99] = 0.2666666666666667 * sp[66] + 0.1333333333333343 * sp[69] + 0.1333333333333344 * sp[72] + 0.1333333333333343 * sp[67] + 0.2666666666666674 * sp[70] + 0.2666666666666674 * sp[73] + 0.1333333333333344 * sp[68] + 0.2666666666666674 * sp[71] + 0.2666666666666674 * sp[74];
  }

};


class p2_tet_stokes_full_tet_cell_integral_8_otherwise: public ufc::cell_integral
{
public:

  p2_tet_stokes_full_tet_cell_integral_8_otherwise() : ufc::cell_integral()
  {

  }

  ~p2_tet_stokes_full_tet_cell_integral_8_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE8_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q4[0][0][1];
    alignas(32) double sp[110];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = sp[14] * sp[14];
    sp[20] = sp[14] * sp[17];
    sp[21] = sp[18] * sp[14];
    sp[22] = sp[17] * sp[17];
    sp[23] = sp[18] * sp[17];
    sp[24] = sp[18] * sp[18];
    sp[25] = J_c2 * J_c7;
    sp[26] = J_c8 * (-1 * J_c1);
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[27] / sp[13];
    sp[29] = J_c0 * J_c8;
    sp[30] = J_c6 * (-1 * J_c2);
    sp[31] = sp[29] + sp[30];
    sp[32] = sp[31] / sp[13];
    sp[33] = J_c1 * J_c6;
    sp[34] = J_c0 * J_c7;
    sp[35] = sp[33] + -1 * sp[34];
    sp[36] = sp[35] / sp[13];
    sp[37] = sp[28] * sp[28];
    sp[38] = sp[28] * sp[32];
    sp[39] = sp[28] * sp[36];
    sp[40] = sp[32] * sp[32];
    sp[41] = sp[32] * sp[36];
    sp[42] = sp[36] * sp[36];
    sp[43] = sp[37] + sp[19];
    sp[44] = sp[38] + sp[20];
    sp[45] = sp[39] + sp[21];
    sp[46] = sp[40] + sp[22];
    sp[47] = sp[41] + sp[23];
    sp[48] = sp[24] + sp[42];
    sp[49] = J_c1 * J_c5;
    sp[50] = J_c2 * J_c4;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = J_c2 * J_c3;
    sp[54] = J_c0 * J_c5;
    sp[55] = sp[53] + -1 * sp[54];
    sp[56] = sp[55] / sp[13];
    sp[57] = J_c0 * J_c4;
    sp[58] = J_c1 * J_c3;
    sp[59] = sp[57] + -1 * sp[58];
    sp[60] = sp[59] / sp[13];
    sp[61] = sp[52] * sp[52];
    sp[62] = sp[52] * sp[56];
    sp[63] = sp[60] * sp[52];
    sp[64] = sp[56] * sp[56];
    sp[65] = sp[60] * sp[56];
    sp[66] = sp[60] * sp[60];
    sp[67] = sp[43] + sp[61];
    sp[68] = sp[44] + sp[62];
    sp[69] = sp[45] + sp[63];
    sp[70] = sp[46] + sp[64];
    sp[71] = sp[47] + sp[65];
    sp[72] = sp[48] + sp[66];
    sp[73] = 0.6666666666666666 * sp[52] * sp[52];
    sp[74] = 0.6666666666666666 * sp[56] * sp[52];
    sp[75] = 0.6666666666666666 * sp[60] * sp[52];
    sp[76] = 0.6666666666666666 * sp[52] * sp[56];
    sp[77] = 0.6666666666666666 * sp[56] * sp[56];
    sp[78] = 0.6666666666666666 * sp[60] * sp[56];
    sp[79] = 0.6666666666666666 * sp[52] * sp[60];
    sp[80] = 0.6666666666666666 * sp[56] * sp[60];
    sp[81] = 0.6666666666666666 * sp[60] * sp[60];
    sp[82] = -1 * sp[73] + sp[61];
    sp[83] = -1 * sp[74] + sp[62];
    sp[84] = -1 * sp[75] + sp[63];
    sp[85] = -1 * sp[76] + sp[62];
    sp[86] = -1 * sp[77] + sp[64];
    sp[87] = -1 * sp[78] + sp[65];
    sp[88] = -1 * sp[79] + sp[63];
    sp[89] = -1 * sp[80] + sp[65];
    sp[90] = -1 * sp[81] + sp[66];
    sp[91] = sp[67] + sp[82];
    sp[92] = sp[68] + sp[83];
    sp[93] = sp[69] + sp[84];
    sp[94] = sp[68] + sp[85];
    sp[95] = sp[70] + sp[86];
    sp[96] = sp[71] + sp[87];
    sp[97] = sp[69] + sp[88];
    sp[98] = sp[71] + sp[89];
    sp[99] = sp[72] + sp[90];
    sp[100] = std::abs(sp[13]);
    sp[101] = sp[91] * sp[100];
    sp[102] = sp[92] * sp[100];
    sp[103] = sp[93] * sp[100];
    sp[104] = sp[94] * sp[100];
    sp[105] = sp[95] * sp[100];
    sp[106] = sp[96] * sp[100];
    sp[107] = sp[97] * sp[100];
    sp[108] = sp[98] * sp[100];
    sp[109] = sp[99] * sp[100];
    A[0] = 0.1 * sp[101] + 0.1000000000000001 * sp[102] + 0.1000000000000001 * sp[103] + 0.1000000000000001 * sp[104] + 0.1000000000000001 * sp[105] + 0.1000000000000001 * sp[106] + 0.1000000000000001 * sp[107] + 0.1000000000000001 * sp[108] + 0.1000000000000001 * sp[109];
    A[1] = 0.03333333333333326 * sp[101] + 0.03333333333333329 * sp[104] + 0.0333333333333333 * sp[107];
    A[2] = 0.03333333333333337 * sp[102] + 0.03333333333333337 * sp[105] + 0.03333333333333337 * sp[108];
    A[3] = 0.03333333333333338 * sp[103] + 0.0333333333333334 * sp[106] + 0.03333333333333338 * sp[109];
    A[4] = 0.03333333333333456 * sp[102] + 0.03333333333333449 * sp[103] + 0.03333333333333457 * sp[105] + 0.03333333333333449 * sp[106] + 0.03333333333333447 * sp[108] + 0.03333333333333439 * sp[109];
    A[5] = 0.03333333333333458 * sp[101] + 0.0333333333333346 * sp[103] + 0.03333333333333459 * sp[104] + 0.03333333333333463 * sp[106] + 0.03333333333333448 * sp[107] + 0.03333333333333455 * sp[109];
    A[6] = 0.03333333333333456 * sp[101] + 0.03333333333333452 * sp[102] + 0.03333333333333456 * sp[104] + 0.03333333333333455 * sp[105] + 0.03333333333333445 * sp[107] + 0.03333333333333447 * sp[108];
    A[7] = -0.03333333333333456 * sp[101] + -0.03333333333333456 * sp[102] + -0.1333333333333331 * sp[103] + -0.03333333333333457 * sp[104] + -0.03333333333333457 * sp[105] + -0.1333333333333332 * sp[106] + -0.03333333333333448 * sp[107] + -0.03333333333333446 * sp[108] + -0.1333333333333332 * sp[109];
    A[8] = -0.03333333333333455 * sp[101] + -0.1333333333333331 * sp[102] + -0.03333333333333452 * sp[103] + -0.03333333333333455 * sp[104] + -0.1333333333333331 * sp[105] + -0.03333333333333451 * sp[106] + -0.03333333333333446 * sp[107] + -0.1333333333333331 * sp[108] + -0.03333333333333442 * sp[109];
    A[9] = -0.1333333333333331 * sp[101] + -0.03333333333333451 * sp[102] + -0.03333333333333455 * sp[103] + -0.1333333333333331 * sp[104] + -0.03333333333333453 * sp[105] + -0.03333333333333456 * sp[106] + -0.1333333333333331 * sp[107] + -0.03333333333333442 * sp[108] + -0.03333333333333448 * sp[109];
    A[10] = 0.03333333333333326 * sp[101] + 0.03333333333333329 * sp[102] + 0.0333333333333333 * sp[103];
    A[11] = 0.1000000000000001 * sp[101];
    A[12] = -0.03333333333333341 * sp[102];
    A[13] = -0.03333333333333334 * sp[103];
    A[14] = -0.03333333333333321 * sp[102] + -0.03333333333333321 * sp[103];
    A[15] = -0.03333333333333321 * sp[101] + 0.1000000000000003 * sp[103];
    A[16] = -0.03333333333333328 * sp[101] + 0.1000000000000003 * sp[102];
    A[17] = 0.0333333333333332 * sp[101] + 0.03333333333333319 * sp[102];
    A[18] = 0.0333333333333333 * sp[101] + 0.03333333333333326 * sp[103];
    A[19] = -0.1333333333333336 * sp[101] + -0.1000000000000001 * sp[102] + -0.1000000000000002 * sp[103];
    A[20] = 0.03333333333333337 * sp[104] + 0.03333333333333337 * sp[105] + 0.03333333333333337 * sp[106];
    A[21] = -0.03333333333333341 * sp[104];
    A[22] = 0.09999999999999991 * sp[105];
    A[23] = -0.03333333333333332 * sp[106];
    A[24] = -0.03333333333333342 * sp[105] + 0.09999999999999996 * sp[106];
    A[25] = -0.03333333333333345 * sp[104] + -0.03333333333333358 * sp[106];
    A[26] = 0.09999999999999996 * sp[104] + -0.03333333333333334 * sp[105];
    A[27] = 0.03333333333333344 * sp[104] + 0.03333333333333344 * sp[105];
    A[28] = -0.09999999999999995 * sp[104] + -0.1333333333333337 * sp[105] + -0.09999999999999989 * sp[106];
    A[29] = 0.03333333333333342 * sp[105] + 0.03333333333333349 * sp[106];
    A[30] = 0.03333333333333338 * sp[107] + 0.0333333333333334 * sp[108] + 0.03333333333333338 * sp[109];
    A[31] = -0.03333333333333334 * sp[107];
    A[32] = -0.03333333333333332 * sp[108];
    A[33] = 0.1000000000000002 * sp[109];
    A[34] = 0.09999999999999985 * sp[108] + -0.0333333333333339 * sp[109];
    A[35] = 0.09999999999999991 * sp[107] + -0.03333333333333355 * sp[109];
    A[36] = -0.03333333333333374 * sp[107] + -0.03333333333333384 * sp[108];
    A[37] = -0.09999999999999985 * sp[107] + -0.09999999999999985 * sp[108] + -0.1333333333333338 * sp[109];
    A[38] = 0.03333333333333376 * sp[107] + 0.03333333333333376 * sp[109];
    A[39] = 0.03333333333333367 * sp[108] + 0.0333333333333336 * sp[109];
    A[40] = 0.03333333333333456 * sp[104] + 0.03333333333333457 * sp[105] + 0.03333333333333447 * sp[106] + 0.03333333333333449 * sp[107] + 0.03333333333333449 * sp[108] + 0.03333333333333439 * sp[109];
    A[41] = -0.03333333333333321 * sp[104] + -0.03333333333333321 * sp[107];
    A[42] = -0.03333333333333342 * sp[105] + 0.09999999999999996 * sp[108];
    A[43] = 0.09999999999999985 * sp[106] + -0.0333333333333339 * sp[109];
    A[44] = 0.2666666666666679 * sp[105] + 0.1333333333333341 * sp[106] + 0.1333333333333341 * sp[108] + 0.266666666666668 * sp[109];
    A[45] = 0.2666666666666679 * sp[104] + 0.1333333333333353 * sp[106] + 0.1333333333333341 * sp[107] + 0.1333333333333352 * sp[109];
    A[46] = 0.1333333333333342 * sp[104] + 0.1333333333333349 * sp[105] + 0.2666666666666679 * sp[107] + 0.1333333333333352 * sp[108];
    A[47] = -0.2666666666666678 * sp[104] + -0.2666666666666678 * sp[105] + -0.1333333333333345 * sp[106] + -0.133333333333334 * sp[107] + -0.133333333333334 * sp[108];
    A[48] = -0.1333333333333343 * sp[104] + -0.1333333333333341 * sp[106] + -0.2666666666666681 * sp[107] + -0.1333333333333345 * sp[108] + -0.2666666666666678 * sp[109];
    A[49] = -0.1333333333333342 * sp[105] + -0.1333333333333342 * sp[106] + -0.1333333333333343 * sp[108] + -0.1333333333333342 * sp[109];
    A[50] = 0.03333333333333458 * sp[101] + 0.03333333333333459 * sp[102] + 0.03333333333333448 * sp[103] + 0.0333333333333346 * sp[107] + 0.03333333333333463 * sp[108] + 0.03333333333333455 * sp[109];
    A[51] = -0.03333333333333321 * sp[101] + 0.1000000000000003 * sp[107];
    A[52] = -0.03333333333333345 * sp[102] + -0.03333333333333358 * sp[108];
    A[53] = 0.09999999999999991 * sp[103] + -0.03333333333333355 * sp[109];
    A[54] = 0.2666666666666679 * sp[102] + 0.1333333333333341 * sp[103] + 0.1333333333333353 * sp[108] + 0.1333333333333352 * sp[109];
    A[55] = 0.2666666666666679 * sp[101] + 0.1333333333333353 * sp[103] + 0.1333333333333353 * sp[107] + 0.2666666666666697 * sp[109];
    A[56] = 0.1333333333333342 * sp[101] + 0.1333333333333349 * sp[102] + 0.133333333333335 * sp[107] + 0.2666666666666695 * sp[108];
    A[57] = -0.2666666666666678 * sp[101] + -0.2666666666666678 * sp[102] + -0.1333333333333345 * sp[103] + -0.1333333333333352 * sp[107] + -0.1333333333333352 * sp[108];
    A[58] = -0.1333333333333342 * sp[101] + -0.1333333333333341 * sp[103] + -0.1333333333333351 * sp[107] + -0.1333333333333349 * sp[109];
    A[59] = -0.1333333333333342 * sp[102] + -0.1333333333333342 * sp[103] + -0.1333333333333346 * sp[107] + -0.2666666666666686 * sp[108] + -0.2666666666666686 * sp[109];
    A[60] = 0.03333333333333456 * sp[101] + 0.03333333333333456 * sp[102] + 0.03333333333333445 * sp[103] + 0.03333333333333452 * sp[104] + 0.03333333333333455 * sp[105] + 0.03333333333333447 * sp[106];
    A[61] = -0.03333333333333328 * sp[101] + 0.1000000000000003 * sp[104];
    A[62] = 0.09999999999999996 * sp[102] + -0.03333333333333334 * sp[105];
    A[63] = -0.03333333333333374 * sp[103] + -0.03333333333333384 * sp[106];
    A[64] = 0.1333333333333342 * sp[102] + 0.2666666666666679 * sp[103] + 0.1333333333333349 * sp[105] + 0.1333333333333352 * sp[106];
    A[65] = 0.1333333333333342 * sp[101] + 0.133333333333335 * sp[103] + 0.1333333333333349 * sp[104] + 0.2666666666666695 * sp[106];
    A[66] = 0.2666666666666678 * sp[101] + 0.1333333333333351 * sp[102] + 0.1333333333333351 * sp[104] + 0.2666666666666693 * sp[105];
    A[67] = -0.1333333333333341 * sp[101] + -0.1333333333333342 * sp[102] + -0.1333333333333348 * sp[104] + -0.1333333333333348 * sp[105];
    A[68] = -0.2666666666666679 * sp[101] + -0.1333333333333345 * sp[102] + -0.2666666666666676 * sp[103] + -0.1333333333333352 * sp[104] + -0.133333333333335 * sp[106];
    A[69] = -0.1333333333333342 * sp[102] + -0.1333333333333341 * sp[103] + -0.1333333333333344 * sp[104] + -0.2666666666666684 * sp[105] + -0.2666666666666684 * sp[106];
    A[70] = -0.03333333333333456 * sp[101] + -0.03333333333333457 * sp[102] + -0.03333333333333448 * sp[103] + -0.03333333333333456 * sp[104] + -0.03333333333333457 * sp[105] + -0.03333333333333446 * sp[106] + -0.1333333333333331 * sp[107] + -0.1333333333333332 * sp[108] + -0.1333333333333332 * sp[109];
    A[71] = 0.0333333333333332 * sp[101] + 0.03333333333333319 * sp[104];
    A[72] = 0.03333333333333344 * sp[102] + 0.03333333333333344 * sp[105];
    A[73] = -0.09999999999999985 * sp[103] + -0.09999999999999985 * sp[106] + -0.1333333333333338 * sp[109];
    A[74] = -0.2666666666666678 * sp[102] + -0.133333333333334 * sp[103] + -0.2666666666666678 * sp[105] + -0.133333333333334 * sp[106] + -0.1333333333333345 * sp[108];
    A[75] = -0.2666666666666678 * sp[101] + -0.1333333333333352 * sp[103] + -0.2666666666666678 * sp[104] + -0.1333333333333352 * sp[106] + -0.1333333333333345 * sp[107];
    A[76] = -0.1333333333333341 * sp[101] + -0.1333333333333348 * sp[102] + -0.1333333333333342 * sp[104] + -0.1333333333333348 * sp[105];
    A[77] = 0.2666666666666677 * sp[101] + 0.2666666666666677 * sp[102] + 0.1333333333333344 * sp[103] + 0.2666666666666677 * sp[104] + 0.2666666666666677 * sp[105] + 0.1333333333333344 * sp[106] + 0.1333333333333344 * sp[107] + 0.1333333333333344 * sp[108] + 0.2666666666666669 * sp[109];
    A[78] = 0.1333333333333342 * sp[101] + 0.133333333333334 * sp[103] + 0.1333333333333342 * sp[104] + 0.133333333333334 * sp[106] + 0.1333333333333322 * sp[108];
    A[79] = 0.1333333333333341 * sp[102] + 0.1333333333333342 * sp[103] + 0.1333333333333342 * sp[105] + 0.1333333333333342 * sp[106] + 0.1333333333333322 * sp[107];
    A[80] = -0.03333333333333455 * sp[101] + -0.03333333333333455 * sp[102] + -0.03333333333333446 * sp[103] + -0.1333333333333331 * sp[104] + -0.1333333333333331 * sp[105] + -0.1333333333333331 * sp[106] + -0.03333333333333452 * sp[107] + -0.03333333333333451 * sp[108] + -0.03333333333333442 * sp[109];
    A[81] = 0.0333333333333333 * sp[101] + 0.03333333333333326 * sp[107];
    A[82] = -0.09999999999999995 * sp[102] + -0.1333333333333337 * sp[105] + -0.09999999999999989 * sp[108];
    A[83] = 0.03333333333333376 * sp[103] + 0.03333333333333376 * sp[109];
    A[84] = -0.1333333333333343 * sp[102] + -0.2666666666666681 * sp[103] + -0.1333333333333345 * sp[106] + -0.1333333333333341 * sp[108] + -0.2666666666666678 * sp[109];
    A[85] = -0.1333333333333342 * sp[101] + -0.1333333333333351 * sp[103] + -0.1333333333333341 * sp[107] + -0.1333333333333349 * sp[109];
    A[86] = -0.2666666666666679 * sp[101] + -0.1333333333333352 * sp[102] + -0.1333333333333345 * sp[104] + -0.2666666666666676 * sp[107] + -0.133333333333335 * sp[108];
    A[87] = 0.1333333333333342 * sp[101] + 0.1333333333333342 * sp[102] + 0.1333333333333322 * sp[106] + 0.133333333333334 * sp[107] + 0.133333333333334 * sp[108];
    A[88] = 0.2666666666666681 * sp[101] + 0.1333333333333345 * sp[102] + 0.2666666666666677 * sp[103] + 0.1333333333333345 * sp[104] + 0.2666666666666668 * sp[105] + 0.1333333333333344 * sp[106] + 0.2666666666666677 * sp[107] + 0.1333333333333344 * sp[108] + 0.2666666666666674 * sp[109];
    A[89] = 0.1333333333333343 * sp[102] + 0.1333333333333341 * sp[103] + 0.1333333333333321 * sp[104] + 0.1333333333333341 * sp[108] + 0.133333333333334 * sp[109];
    A[90] = -0.1333333333333331 * sp[101] + -0.1333333333333331 * sp[102] + -0.1333333333333331 * sp[103] + -0.03333333333333451 * sp[104] + -0.03333333333333453 * sp[105] + -0.03333333333333442 * sp[106] + -0.03333333333333455 * sp[107] + -0.03333333333333456 * sp[108] + -0.03333333333333448 * sp[109];
    A[91] = -0.1333333333333336 * sp[101] + -0.1000000000000001 * sp[104] + -0.1000000000000002 * sp[107];
    A[92] = 0.03333333333333342 * sp[105] + 0.03333333333333349 * sp[108];
    A[93] = 0.03333333333333367 * sp[106] + 0.0333333333333336 * sp[109];
    A[94] = -0.1333333333333342 * sp[105] + -0.1333333333333343 * sp[106] + -0.1333333333333342 * sp[108] + -0.1333333333333342 * sp[109];
    A[95] = -0.1333333333333346 * sp[103] + -0.1333333333333342 * sp[104] + -0.2666666666666686 * sp[106] + -0.1333333333333342 * sp[107] + -0.2666666666666686 * sp[109];
    A[96] = -0.1333333333333344 * sp[102] + -0.1333333333333342 * sp[104] + -0.2666666666666684 * sp[105] + -0.1333333333333341 * sp[107] + -0.2666666666666684 * sp[108];
    A[97] = 0.1333333333333322 * sp[103] + 0.1333333333333341 * sp[104] + 0.1333333333333342 * sp[105] + 0.1333333333333342 * sp[107] + 0.1333333333333342 * sp[108];
    A[98] = 0.1333333333333321 * sp[102] + 0.1333333333333343 * sp[104] + 0.1333333333333341 * sp[106] + 0.1333333333333341 * sp[107] + 0.133333333333334 * sp[109];
    A[99] = 0.2666666666666667 * sp[101] + 0.1333333333333343 * sp[102] + 0.1333333333333344 * sp[103] + 0.1333333333333343 * sp[104] + 0.2666666666666674 * sp[105] + 0.2666666666666674 * sp[106] + 0.1333333333333344 * sp[107] + 0.2666666666666674 * sp[108] + 0.2666666666666674 * sp[109];
  }

};


class p2_tet_stokes_full_tet_form_0: public ufc::form
{
public:

  p2_tet_stokes_full_tet_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~p2_tet_stokes_full_tet_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "d884367fa3bc712407b7bf3b8fd0959402d9a06e2f173951cd769d05ce4d1f449f229e5bc2269e7455bca6244a7d20791d73c4e396c71a830b1cc55e6d40ae7c";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new p2_tet_stokes_full_tet_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new p2_tet_stokes_full_tet_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new p2_tet_stokes_full_tet_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_finite_element_2();
    case 1:
        return new p2_tet_stokes_full_tet_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_dofmap_2();
    case 1:
        return new p2_tet_stokes_full_tet_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new p2_tet_stokes_full_tet_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class p2_tet_stokes_full_tet_form_1: public ufc::form
{
public:

  p2_tet_stokes_full_tet_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~p2_tet_stokes_full_tet_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "545a717160d73592ed88bd1c2e4059553aa9f5c729d917ad111f69cc6a9fe5000d705677ec2d9a80ebc5abfcd900c42b5ca49cf4855c73bafa2c78999cb36948";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new p2_tet_stokes_full_tet_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new p2_tet_stokes_full_tet_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new p2_tet_stokes_full_tet_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_finite_element_2();
    case 1:
        return new p2_tet_stokes_full_tet_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_dofmap_2();
    case 1:
        return new p2_tet_stokes_full_tet_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new p2_tet_stokes_full_tet_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class p2_tet_stokes_full_tet_form_2: public ufc::form
{
public:

  p2_tet_stokes_full_tet_form_2() : ufc::form()
  {
    // Do nothing
  }

  ~p2_tet_stokes_full_tet_form_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "d2bdfe3ddc6fe05e2be0f27405455302a20ed81cc14b2e7ff416f2a9b603e29d2d344df0e393db773b3cc01dd3b77cc38255e340a8025eb55d76246aae1e6239";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new p2_tet_stokes_full_tet_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new p2_tet_stokes_full_tet_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new p2_tet_stokes_full_tet_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_finite_element_2();
    case 1:
        return new p2_tet_stokes_full_tet_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_dofmap_2();
    case 1:
        return new p2_tet_stokes_full_tet_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new p2_tet_stokes_full_tet_cell_integral_2_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class p2_tet_stokes_full_tet_form_3: public ufc::form
{
public:

  p2_tet_stokes_full_tet_form_3() : ufc::form()
  {
    // Do nothing
  }

  ~p2_tet_stokes_full_tet_form_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "3510e164782cb35ac22b0b92b4aaf267a5313d99bf4aab5eac7a0bce286c32a605f20fa9fc36fe324bb672e52f3732cf7fe9af1b4bd5afdf9c5727d131828dfe";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new p2_tet_stokes_full_tet_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new p2_tet_stokes_full_tet_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new p2_tet_stokes_full_tet_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_finite_element_2();
    case 1:
        return new p2_tet_stokes_full_tet_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_dofmap_2();
    case 1:
        return new p2_tet_stokes_full_tet_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new p2_tet_stokes_full_tet_cell_integral_3_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class p2_tet_stokes_full_tet_form_4: public ufc::form
{
public:

  p2_tet_stokes_full_tet_form_4() : ufc::form()
  {
    // Do nothing
  }

  ~p2_tet_stokes_full_tet_form_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "2ef0099a04072d8570782b1c88e77649c1adea85c5d40ddab29b677484e0c18efbb87f67eb2d00fea9d423bc80cf46e5d85d3b71469e3782635104c1fa5ec815";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new p2_tet_stokes_full_tet_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new p2_tet_stokes_full_tet_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new p2_tet_stokes_full_tet_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_finite_element_2();
    case 1:
        return new p2_tet_stokes_full_tet_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_dofmap_2();
    case 1:
        return new p2_tet_stokes_full_tet_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new p2_tet_stokes_full_tet_cell_integral_4_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class p2_tet_stokes_full_tet_form_5: public ufc::form
{
public:

  p2_tet_stokes_full_tet_form_5() : ufc::form()
  {
    // Do nothing
  }

  ~p2_tet_stokes_full_tet_form_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "eb64c83a32c571d79ae5c4d89ef94b34cede2aeb699d725c753301407846adcf8fc82e8f30197e68d8a62a662724e8c5ce262a1ff77454c504fb310946efea1a";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new p2_tet_stokes_full_tet_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new p2_tet_stokes_full_tet_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new p2_tet_stokes_full_tet_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_finite_element_2();
    case 1:
        return new p2_tet_stokes_full_tet_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_dofmap_2();
    case 1:
        return new p2_tet_stokes_full_tet_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new p2_tet_stokes_full_tet_cell_integral_5_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class p2_tet_stokes_full_tet_form_6: public ufc::form
{
public:

  p2_tet_stokes_full_tet_form_6() : ufc::form()
  {
    // Do nothing
  }

  ~p2_tet_stokes_full_tet_form_6() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "4e408a6c5e3948615be56cc82e27599755c4f2f55d0e6cfff6328d3b55ee161eb8ad5cbfd2735964e2cc3d693b2ed0cc4ed22363423ac73bfdf2c35d04d992cf";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new p2_tet_stokes_full_tet_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new p2_tet_stokes_full_tet_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new p2_tet_stokes_full_tet_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_finite_element_2();
    case 1:
        return new p2_tet_stokes_full_tet_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_dofmap_2();
    case 1:
        return new p2_tet_stokes_full_tet_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new p2_tet_stokes_full_tet_cell_integral_6_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class p2_tet_stokes_full_tet_form_7: public ufc::form
{
public:

  p2_tet_stokes_full_tet_form_7() : ufc::form()
  {
    // Do nothing
  }

  ~p2_tet_stokes_full_tet_form_7() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "e2df020a3088671f938a4429c4c3cc74389d8be0db36ab959cafedfdbc748b00d67de3b23ece611303630d70f21cc8176181e876c0706abfa5111fb466fae5af";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new p2_tet_stokes_full_tet_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new p2_tet_stokes_full_tet_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new p2_tet_stokes_full_tet_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_finite_element_2();
    case 1:
        return new p2_tet_stokes_full_tet_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_dofmap_2();
    case 1:
        return new p2_tet_stokes_full_tet_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new p2_tet_stokes_full_tet_cell_integral_7_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class p2_tet_stokes_full_tet_form_8: public ufc::form
{
public:

  p2_tet_stokes_full_tet_form_8() : ufc::form()
  {
    // Do nothing
  }

  ~p2_tet_stokes_full_tet_form_8() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "e5a306550a76c962b163398ab4a45a520c5ff0c1f1ffeebe0bb62dca5a474388b107ac5d767c05d59f606867faf8c5fd18a06dc7e7f173444c9093228ceb7fa8";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new p2_tet_stokes_full_tet_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new p2_tet_stokes_full_tet_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new p2_tet_stokes_full_tet_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_finite_element_2();
    case 1:
        return new p2_tet_stokes_full_tet_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new p2_tet_stokes_full_tet_dofmap_2();
    case 1:
        return new p2_tet_stokes_full_tet_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new p2_tet_stokes_full_tet_cell_integral_8_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

#endif
