/*
 * Copyright (c) 2017-2022 Nils Kohl.
 *
 * This file is part of HyTeG
 * (see https://i10git.cs.fau.de/hyteg/hyteg).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The entire file was generated with the HyTeG form generator.
 * 
 * Software:
 *
 * - quadpy version: 0.16.5
 *
 * Avoid modifying this file. If buggy, consider fixing the generator itself.
 */

#include "p1_epsiloncc_blending_q1.hpp"

namespace hyteg {
namespace forms {

   void p1_epsiloncc_0_0_blending_q1::integrateAll( const std::array< Point3D, 3 >& coords, Matrix< real_t, 3, 3 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t Blending_DF_Triangle_blend_out0_id0 = 0;
      real_t Blending_DF_Triangle_blend_out1_id0 = 0;
      real_t Blending_DF_Triangle_blend_out2_id0 = 0;
      real_t Blending_DF_Triangle_blend_out3_id0 = 0;
      Blending_DF_Triangle_blend( 0.33333333333333343*p_affine_0_0 + 0.33333333333333331*p_affine_1_0 + 0.33333333333333331*p_affine_2_0, 0.33333333333333343*p_affine_0_1 + 0.33333333333333331*p_affine_1_1 + 0.33333333333333331*p_affine_2_1, &Blending_DF_Triangle_blend_out0_id0, &Blending_DF_Triangle_blend_out1_id0, &Blending_DF_Triangle_blend_out2_id0, &Blending_DF_Triangle_blend_out3_id0 );
      real_t tmp_0 = -p_affine_0_1;
      real_t tmp_1 = p_affine_2_1 + tmp_0;
      real_t tmp_2 = Blending_DF_Triangle_blend_out0_id0*Blending_DF_Triangle_blend_out3_id0 - Blending_DF_Triangle_blend_out1_id0*Blending_DF_Triangle_blend_out2_id0;
      real_t tmp_3 = -p_affine_0_0;
      real_t tmp_4 = p_affine_1_0 + tmp_3;
      real_t tmp_5 = 1/(tmp_2*(tmp_1*tmp_4 - (p_affine_1_1 + tmp_0)*(p_affine_2_0 + tmp_3)));
      real_t tmp_6 = Blending_DF_Triangle_blend_out1_id0*tmp_5;
      real_t tmp_7 = tmp_1*tmp_6;
      real_t tmp_8 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_9 = tmp_6*tmp_8;
      real_t tmp_10 = Blending_DF_Triangle_blend_out0_id0*tmp_5;
      real_t tmp_11 = tmp_10*tmp_4;
      real_t tmp_12 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_13 = tmp_10*tmp_12;
      real_t tmp_14 = -1.0*tmp_11 - 1.0*tmp_13 + tmp_7 + tmp_9;
      real_t tmp_15 = 0.5*tmp_11;
      real_t tmp_16 = 0.5*tmp_13;
      real_t tmp_17 = 0.5*tmp_7;
      real_t tmp_18 = 0.5*tmp_9;
      real_t tmp_19 = -2*tmp_15 - 2*tmp_16 + 2*tmp_17 + 2*tmp_18;
      real_t tmp_20 = 1.0*tmp_5;
      real_t tmp_21 = Blending_DF_Triangle_blend_out2_id0*tmp_20;
      real_t tmp_22 = tmp_21*tmp_4;
      real_t tmp_23 = tmp_12*tmp_21;
      real_t tmp_24 = Blending_DF_Triangle_blend_out3_id0*tmp_20;
      real_t tmp_25 = tmp_1*tmp_24;
      real_t tmp_26 = tmp_24*tmp_8;
      real_t tmp_27 = tmp_22 + tmp_23 - tmp_25 - tmp_26;
      real_t tmp_28 = 2.0*tmp_5;
      real_t tmp_29 = Blending_DF_Triangle_blend_out2_id0*tmp_28;
      real_t tmp_30 = tmp_29*tmp_4;
      real_t tmp_31 = tmp_12*tmp_29;
      real_t tmp_32 = Blending_DF_Triangle_blend_out3_id0*tmp_28;
      real_t tmp_33 = tmp_1*tmp_32;
      real_t tmp_34 = tmp_32*tmp_8;
      real_t tmp_35 = tmp_30 + tmp_31 - tmp_33 - tmp_34;
      real_t tmp_36 = 0.5*std::abs(tmp_2)*std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_37 = tmp_13 - 1.0*tmp_7;
      real_t tmp_38 = -tmp_31 + tmp_33;
      real_t tmp_39 = tmp_11 - 1.0*tmp_9;
      real_t tmp_40 = -tmp_30 + tmp_34;
      real_t tmp_41 = 2*tmp_16 - 2*tmp_17;
      real_t tmp_42 = -tmp_23 + tmp_25;
      real_t tmp_43 = 2*tmp_15 - 2*tmp_18;
      real_t tmp_44 = -tmp_22 + tmp_26;
      real_t a_0_0 = tmp_36*(tmp_14*tmp_19 + tmp_27*tmp_35);
      real_t a_0_1 = tmp_36*(tmp_19*tmp_37 + tmp_27*tmp_38);
      real_t a_0_2 = tmp_36*(tmp_19*tmp_39 + tmp_27*tmp_40);
      real_t a_1_0 = tmp_36*(tmp_14*tmp_41 + tmp_35*tmp_42);
      real_t a_1_1 = tmp_36*(tmp_37*tmp_41 + tmp_38*tmp_42);
      real_t a_1_2 = tmp_36*(tmp_39*tmp_41 + tmp_40*tmp_42);
      real_t a_2_0 = tmp_36*(tmp_14*tmp_43 + tmp_35*tmp_44);
      real_t a_2_1 = tmp_36*(tmp_37*tmp_43 + tmp_38*tmp_44);
      real_t a_2_2 = tmp_36*(tmp_39*tmp_43 + tmp_40*tmp_44);
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
   }

   void p1_epsiloncc_0_0_blending_q1::integrateRow0( const std::array< Point3D, 3 >& coords, Matrix< real_t, 1, 3 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t Blending_DF_Triangle_blend_out0_id0 = 0;
      real_t Blending_DF_Triangle_blend_out1_id0 = 0;
      real_t Blending_DF_Triangle_blend_out2_id0 = 0;
      real_t Blending_DF_Triangle_blend_out3_id0 = 0;
      Blending_DF_Triangle_blend( 0.33333333333333343*p_affine_0_0 + 0.33333333333333331*p_affine_1_0 + 0.33333333333333331*p_affine_2_0, 0.33333333333333343*p_affine_0_1 + 0.33333333333333331*p_affine_1_1 + 0.33333333333333331*p_affine_2_1, &Blending_DF_Triangle_blend_out0_id0, &Blending_DF_Triangle_blend_out1_id0, &Blending_DF_Triangle_blend_out2_id0, &Blending_DF_Triangle_blend_out3_id0 );
      real_t tmp_0 = -p_affine_0_1;
      real_t tmp_1 = p_affine_2_1 + tmp_0;
      real_t tmp_2 = Blending_DF_Triangle_blend_out0_id0*Blending_DF_Triangle_blend_out3_id0 - Blending_DF_Triangle_blend_out1_id0*Blending_DF_Triangle_blend_out2_id0;
      real_t tmp_3 = -p_affine_0_0;
      real_t tmp_4 = p_affine_1_0 + tmp_3;
      real_t tmp_5 = 1/(tmp_2*(tmp_1*tmp_4 - (p_affine_1_1 + tmp_0)*(p_affine_2_0 + tmp_3)));
      real_t tmp_6 = Blending_DF_Triangle_blend_out1_id0*tmp_5;
      real_t tmp_7 = tmp_1*tmp_6;
      real_t tmp_8 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_9 = tmp_6*tmp_8;
      real_t tmp_10 = Blending_DF_Triangle_blend_out0_id0*tmp_5;
      real_t tmp_11 = tmp_10*tmp_4;
      real_t tmp_12 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_13 = tmp_10*tmp_12;
      real_t tmp_14 = -1.0*tmp_11 - 1.0*tmp_13 + tmp_7 + tmp_9;
      real_t tmp_15 = 1.0*tmp_5;
      real_t tmp_16 = Blending_DF_Triangle_blend_out2_id0*tmp_15;
      real_t tmp_17 = Blending_DF_Triangle_blend_out3_id0*tmp_15;
      real_t tmp_18 = -tmp_1*tmp_17 + tmp_12*tmp_16 + tmp_16*tmp_4 - tmp_17*tmp_8;
      real_t tmp_19 = 2.0*tmp_5;
      real_t tmp_20 = Blending_DF_Triangle_blend_out2_id0*tmp_19;
      real_t tmp_21 = tmp_20*tmp_4;
      real_t tmp_22 = tmp_12*tmp_20;
      real_t tmp_23 = Blending_DF_Triangle_blend_out3_id0*tmp_19;
      real_t tmp_24 = tmp_1*tmp_23;
      real_t tmp_25 = tmp_23*tmp_8;
      real_t tmp_26 = 0.5*std::abs(tmp_2)*std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t a_0_0 = tmp_26*(tmp_14*(-1.0*tmp_11 - 1.0*tmp_13 + tmp_7 + tmp_9) + tmp_18*(tmp_21 + tmp_22 - tmp_24 - tmp_25));
      real_t a_0_1 = tmp_26*(tmp_14*(tmp_13 - 1.0*tmp_7) + tmp_18*(-tmp_22 + tmp_24));
      real_t a_0_2 = tmp_26*(tmp_14*(tmp_11 - 1.0*tmp_9) + tmp_18*(-tmp_21 + tmp_25));
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
   }

   void p1_epsiloncc_0_0_blending_q1::integrateAll( const std::array< Point3D, 4 >& coords, Matrix< real_t, 4, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = tmp_1*tmp_3;
      real_t tmp_5 = p_affine_2_0 + tmp_0;
      real_t tmp_6 = p_affine_1_1 + tmp_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_12 = Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_13 = Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_14 = -Blending_DF_Tetrahedron_blend_out0_id0*tmp_11 + Blending_DF_Tetrahedron_blend_out0_id0*tmp_8 - Blending_DF_Tetrahedron_blend_out1_id0*tmp_12 + Blending_DF_Tetrahedron_blend_out1_id0*tmp_9 + Blending_DF_Tetrahedron_blend_out2_id0*tmp_10 - Blending_DF_Tetrahedron_blend_out2_id0*tmp_13;
      real_t tmp_15 = -p_affine_0_2;
      real_t tmp_16 = p_affine_3_2 + tmp_15;
      real_t tmp_17 = p_affine_1_2 + tmp_15;
      real_t tmp_18 = p_affine_3_1 + tmp_2;
      real_t tmp_19 = tmp_18*tmp_5;
      real_t tmp_20 = p_affine_2_2 + tmp_15;
      real_t tmp_21 = p_affine_3_0 + tmp_0;
      real_t tmp_22 = tmp_21*tmp_6;
      real_t tmp_23 = tmp_1*tmp_18;
      real_t tmp_24 = tmp_21*tmp_3;
      real_t tmp_25 = 1/(tmp_14*(tmp_16*tmp_4 - tmp_16*tmp_7 + tmp_17*tmp_19 - tmp_17*tmp_24 + tmp_20*tmp_22 - tmp_20*tmp_23));
      real_t tmp_26 = tmp_25*(tmp_4 - tmp_7);
      real_t tmp_27 = tmp_10 - tmp_13;
      real_t tmp_28 = 2.0*tmp_27;
      real_t tmp_29 = tmp_26*tmp_28;
      real_t tmp_30 = tmp_25*(tmp_22 - tmp_23);
      real_t tmp_31 = tmp_28*tmp_30;
      real_t tmp_32 = tmp_25*(tmp_19 - tmp_24);
      real_t tmp_33 = tmp_28*tmp_32;
      real_t tmp_34 = tmp_25*(-tmp_1*tmp_20 + tmp_17*tmp_5);
      real_t tmp_35 = -tmp_12 + tmp_9;
      real_t tmp_36 = 2.0*tmp_35;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = tmp_25*(tmp_1*tmp_16 - tmp_17*tmp_21);
      real_t tmp_39 = tmp_36*tmp_38;
      real_t tmp_40 = tmp_25*(-tmp_16*tmp_5 + tmp_20*tmp_21);
      real_t tmp_41 = tmp_36*tmp_40;
      real_t tmp_42 = tmp_25*(-tmp_17*tmp_3 + tmp_20*tmp_6);
      real_t tmp_43 = -tmp_11 + tmp_8;
      real_t tmp_44 = 2.0*tmp_43;
      real_t tmp_45 = tmp_42*tmp_44;
      real_t tmp_46 = tmp_25*(-tmp_16*tmp_6 + tmp_17*tmp_18);
      real_t tmp_47 = tmp_44*tmp_46;
      real_t tmp_48 = tmp_25*(tmp_16*tmp_3 - tmp_18*tmp_20);
      real_t tmp_49 = tmp_44*tmp_48;
      real_t tmp_50 = -tmp_29 - tmp_31 - tmp_33 - tmp_37 - tmp_39 - tmp_41 - tmp_45 - tmp_47 - tmp_49;
      real_t tmp_51 = 1.0*tmp_27;
      real_t tmp_52 = tmp_26*tmp_51;
      real_t tmp_53 = tmp_30*tmp_51;
      real_t tmp_54 = tmp_32*tmp_51;
      real_t tmp_55 = 1.0*tmp_35;
      real_t tmp_56 = tmp_34*tmp_55;
      real_t tmp_57 = tmp_38*tmp_55;
      real_t tmp_58 = tmp_40*tmp_55;
      real_t tmp_59 = 1.0*tmp_43;
      real_t tmp_60 = tmp_42*tmp_59;
      real_t tmp_61 = tmp_46*tmp_59;
      real_t tmp_62 = tmp_48*tmp_59;
      real_t tmp_63 = -tmp_52 - tmp_53 - tmp_54 - tmp_56 - tmp_57 - tmp_58 - tmp_60 - tmp_61 - tmp_62;
      real_t tmp_64 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out4_id0 - Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_65 = tmp_26*tmp_64;
      real_t tmp_66 = tmp_30*tmp_64;
      real_t tmp_67 = tmp_32*tmp_64;
      real_t tmp_68 = -Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out5_id0 + Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_69 = tmp_34*tmp_68;
      real_t tmp_70 = tmp_38*tmp_68;
      real_t tmp_71 = tmp_40*tmp_68;
      real_t tmp_72 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out5_id0 - Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out4_id0;
      real_t tmp_73 = tmp_42*tmp_72;
      real_t tmp_74 = tmp_46*tmp_72;
      real_t tmp_75 = tmp_48*tmp_72;
      real_t tmp_76 = -1.0*tmp_65 - 1.0*tmp_66 - 1.0*tmp_67 - 1.0*tmp_69 - 1.0*tmp_70 - 1.0*tmp_71 - 1.0*tmp_73 - 1.0*tmp_74 - 1.0*tmp_75;
      real_t tmp_77 = 0.5*tmp_65;
      real_t tmp_78 = 0.5*tmp_66;
      real_t tmp_79 = 0.5*tmp_67;
      real_t tmp_80 = 0.5*tmp_69;
      real_t tmp_81 = 0.5*tmp_70;
      real_t tmp_82 = 0.5*tmp_71;
      real_t tmp_83 = 0.5*tmp_73;
      real_t tmp_84 = 0.5*tmp_74;
      real_t tmp_85 = 0.5*tmp_75;
      real_t tmp_86 = -2*tmp_77 - 2*tmp_78 - 2*tmp_79 - 2*tmp_80 - 2*tmp_81 - 2*tmp_82 - 2*tmp_83 - 2*tmp_84 - 2*tmp_85;
      real_t tmp_87 = -Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out7_id0 + Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_88 = tmp_26*tmp_87;
      real_t tmp_89 = tmp_30*tmp_87;
      real_t tmp_90 = tmp_32*tmp_87;
      real_t tmp_91 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out8_id0 - Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_92 = tmp_34*tmp_91;
      real_t tmp_93 = tmp_38*tmp_91;
      real_t tmp_94 = tmp_40*tmp_91;
      real_t tmp_95 = -Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out8_id0 + Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_96 = tmp_42*tmp_95;
      real_t tmp_97 = tmp_46*tmp_95;
      real_t tmp_98 = tmp_48*tmp_95;
      real_t tmp_99 = -1.0*tmp_88 - 1.0*tmp_89 - 1.0*tmp_90 - 1.0*tmp_92 - 1.0*tmp_93 - 1.0*tmp_94 - 1.0*tmp_96 - 1.0*tmp_97 - 1.0*tmp_98;
      real_t tmp_100 = 0.5*tmp_88;
      real_t tmp_101 = 0.5*tmp_89;
      real_t tmp_102 = 0.5*tmp_90;
      real_t tmp_103 = 0.5*tmp_92;
      real_t tmp_104 = 0.5*tmp_93;
      real_t tmp_105 = 0.5*tmp_94;
      real_t tmp_106 = 0.5*tmp_96;
      real_t tmp_107 = 0.5*tmp_97;
      real_t tmp_108 = 0.5*tmp_98;
      real_t tmp_109 = -2*tmp_100 - 2*tmp_101 - 2*tmp_102 - 2*tmp_103 - 2*tmp_104 - 2*tmp_105 - 2*tmp_106 - 2*tmp_107 - 2*tmp_108;
      real_t tmp_110 = p_affine_0_0*p_affine_1_1;
      real_t tmp_111 = p_affine_0_0*p_affine_1_2;
      real_t tmp_112 = p_affine_2_1*p_affine_3_2;
      real_t tmp_113 = p_affine_0_1*p_affine_1_0;
      real_t tmp_114 = p_affine_0_1*p_affine_1_2;
      real_t tmp_115 = p_affine_2_2*p_affine_3_0;
      real_t tmp_116 = p_affine_0_2*p_affine_1_0;
      real_t tmp_117 = p_affine_0_2*p_affine_1_1;
      real_t tmp_118 = p_affine_2_0*p_affine_3_1;
      real_t tmp_119 = p_affine_2_2*p_affine_3_1;
      real_t tmp_120 = p_affine_2_0*p_affine_3_2;
      real_t tmp_121 = p_affine_2_1*p_affine_3_0;
      real_t tmp_122 = 0.16666666666666663*std::abs(tmp_14)*std::abs(p_affine_0_0*tmp_112 - p_affine_0_0*tmp_119 + p_affine_0_1*tmp_115 - p_affine_0_1*tmp_120 + p_affine_0_2*tmp_118 - p_affine_0_2*tmp_121 - p_affine_1_0*tmp_112 + p_affine_1_0*tmp_119 - p_affine_1_1*tmp_115 + p_affine_1_1*tmp_120 - p_affine_1_2*tmp_118 + p_affine_1_2*tmp_121 + p_affine_2_0*tmp_114 - p_affine_2_0*tmp_117 - p_affine_2_1*tmp_111 + p_affine_2_1*tmp_116 + p_affine_2_2*tmp_110 - p_affine_2_2*tmp_113 - p_affine_3_0*tmp_114 + p_affine_3_0*tmp_117 + p_affine_3_1*tmp_111 - p_affine_3_1*tmp_116 - p_affine_3_2*tmp_110 + p_affine_3_2*tmp_113);
      real_t tmp_123 = tmp_67 + tmp_71 + tmp_75;
      real_t tmp_124 = tmp_90 + tmp_94 + tmp_98;
      real_t tmp_125 = tmp_33 + tmp_41 + tmp_49;
      real_t tmp_126 = tmp_66 + tmp_70 + tmp_74;
      real_t tmp_127 = tmp_89 + tmp_93 + tmp_97;
      real_t tmp_128 = tmp_31 + tmp_39 + tmp_47;
      real_t tmp_129 = tmp_65 + tmp_69 + tmp_73;
      real_t tmp_130 = tmp_88 + tmp_92 + tmp_96;
      real_t tmp_131 = tmp_29 + tmp_37 + tmp_45;
      real_t tmp_132 = tmp_54 + tmp_58 + tmp_62;
      real_t tmp_133 = 2*tmp_79 + 2*tmp_82 + 2*tmp_85;
      real_t tmp_134 = 2*tmp_102 + 2*tmp_105 + 2*tmp_108;
      real_t tmp_135 = tmp_53 + tmp_57 + tmp_61;
      real_t tmp_136 = 2*tmp_78 + 2*tmp_81 + 2*tmp_84;
      real_t tmp_137 = 2*tmp_101 + 2*tmp_104 + 2*tmp_107;
      real_t tmp_138 = tmp_52 + tmp_56 + tmp_60;
      real_t tmp_139 = 2*tmp_77 + 2*tmp_80 + 2*tmp_83;
      real_t tmp_140 = 2*tmp_100 + 2*tmp_103 + 2*tmp_106;
      real_t a_0_0 = tmp_122*(tmp_109*tmp_99 + tmp_50*tmp_63 + tmp_76*tmp_86);
      real_t a_0_1 = tmp_122*(tmp_109*tmp_124 + tmp_123*tmp_86 + tmp_125*tmp_63);
      real_t a_0_2 = tmp_122*(tmp_109*tmp_127 + tmp_126*tmp_86 + tmp_128*tmp_63);
      real_t a_0_3 = tmp_122*(tmp_109*tmp_130 + tmp_129*tmp_86 + tmp_131*tmp_63);
      real_t a_1_0 = tmp_122*(tmp_132*tmp_50 + tmp_133*tmp_76 + tmp_134*tmp_99);
      real_t a_1_1 = tmp_122*(tmp_123*tmp_133 + tmp_124*tmp_134 + tmp_125*tmp_132);
      real_t a_1_2 = tmp_122*(tmp_126*tmp_133 + tmp_127*tmp_134 + tmp_128*tmp_132);
      real_t a_1_3 = tmp_122*(tmp_129*tmp_133 + tmp_130*tmp_134 + tmp_131*tmp_132);
      real_t a_2_0 = tmp_122*(tmp_135*tmp_50 + tmp_136*tmp_76 + tmp_137*tmp_99);
      real_t a_2_1 = tmp_122*(tmp_123*tmp_136 + tmp_124*tmp_137 + tmp_125*tmp_135);
      real_t a_2_2 = tmp_122*(tmp_126*tmp_136 + tmp_127*tmp_137 + tmp_128*tmp_135);
      real_t a_2_3 = tmp_122*(tmp_129*tmp_136 + tmp_130*tmp_137 + tmp_131*tmp_135);
      real_t a_3_0 = tmp_122*(tmp_138*tmp_50 + tmp_139*tmp_76 + tmp_140*tmp_99);
      real_t a_3_1 = tmp_122*(tmp_123*tmp_139 + tmp_124*tmp_140 + tmp_125*tmp_138);
      real_t a_3_2 = tmp_122*(tmp_126*tmp_139 + tmp_127*tmp_140 + tmp_128*tmp_138);
      real_t a_3_3 = tmp_122*(tmp_129*tmp_139 + tmp_130*tmp_140 + tmp_131*tmp_138);
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(1, 3)) = a_1_3;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
      (elMat(2, 3)) = a_2_3;
      (elMat(3, 0)) = a_3_0;
      (elMat(3, 1)) = a_3_1;
      (elMat(3, 2)) = a_3_2;
      (elMat(3, 3)) = a_3_3;
   }

   void p1_epsiloncc_0_0_blending_q1::integrateRow0( const std::array< Point3D, 4 >& coords, Matrix< real_t, 1, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = tmp_1*tmp_3;
      real_t tmp_5 = p_affine_2_0 + tmp_0;
      real_t tmp_6 = p_affine_1_1 + tmp_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_12 = Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_13 = Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_14 = -Blending_DF_Tetrahedron_blend_out0_id0*tmp_11 + Blending_DF_Tetrahedron_blend_out0_id0*tmp_8 - Blending_DF_Tetrahedron_blend_out1_id0*tmp_12 + Blending_DF_Tetrahedron_blend_out1_id0*tmp_9 + Blending_DF_Tetrahedron_blend_out2_id0*tmp_10 - Blending_DF_Tetrahedron_blend_out2_id0*tmp_13;
      real_t tmp_15 = -p_affine_0_2;
      real_t tmp_16 = p_affine_3_2 + tmp_15;
      real_t tmp_17 = p_affine_1_2 + tmp_15;
      real_t tmp_18 = p_affine_3_1 + tmp_2;
      real_t tmp_19 = tmp_18*tmp_5;
      real_t tmp_20 = p_affine_2_2 + tmp_15;
      real_t tmp_21 = p_affine_3_0 + tmp_0;
      real_t tmp_22 = tmp_21*tmp_6;
      real_t tmp_23 = tmp_1*tmp_18;
      real_t tmp_24 = tmp_21*tmp_3;
      real_t tmp_25 = 1/(tmp_14*(tmp_16*tmp_4 - tmp_16*tmp_7 + tmp_17*tmp_19 - tmp_17*tmp_24 + tmp_20*tmp_22 - tmp_20*tmp_23));
      real_t tmp_26 = tmp_25*(tmp_4 - tmp_7);
      real_t tmp_27 = tmp_10 - tmp_13;
      real_t tmp_28 = 2.0*tmp_27;
      real_t tmp_29 = tmp_26*tmp_28;
      real_t tmp_30 = tmp_25*(tmp_22 - tmp_23);
      real_t tmp_31 = tmp_28*tmp_30;
      real_t tmp_32 = tmp_25*(tmp_19 - tmp_24);
      real_t tmp_33 = tmp_28*tmp_32;
      real_t tmp_34 = tmp_25*(-tmp_1*tmp_20 + tmp_17*tmp_5);
      real_t tmp_35 = -tmp_12 + tmp_9;
      real_t tmp_36 = 2.0*tmp_35;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = tmp_25*(tmp_1*tmp_16 - tmp_17*tmp_21);
      real_t tmp_39 = tmp_36*tmp_38;
      real_t tmp_40 = tmp_25*(-tmp_16*tmp_5 + tmp_20*tmp_21);
      real_t tmp_41 = tmp_36*tmp_40;
      real_t tmp_42 = tmp_25*(-tmp_17*tmp_3 + tmp_20*tmp_6);
      real_t tmp_43 = -tmp_11 + tmp_8;
      real_t tmp_44 = 2.0*tmp_43;
      real_t tmp_45 = tmp_42*tmp_44;
      real_t tmp_46 = tmp_25*(-tmp_16*tmp_6 + tmp_17*tmp_18);
      real_t tmp_47 = tmp_44*tmp_46;
      real_t tmp_48 = tmp_25*(tmp_16*tmp_3 - tmp_18*tmp_20);
      real_t tmp_49 = tmp_44*tmp_48;
      real_t tmp_50 = 1.0*tmp_27;
      real_t tmp_51 = 1.0*tmp_35;
      real_t tmp_52 = 1.0*tmp_43;
      real_t tmp_53 = -tmp_26*tmp_50 - tmp_30*tmp_50 - tmp_32*tmp_50 - tmp_34*tmp_51 - tmp_38*tmp_51 - tmp_40*tmp_51 - tmp_42*tmp_52 - tmp_46*tmp_52 - tmp_48*tmp_52;
      real_t tmp_54 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out4_id0 - Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_55 = tmp_26*tmp_54;
      real_t tmp_56 = tmp_30*tmp_54;
      real_t tmp_57 = tmp_32*tmp_54;
      real_t tmp_58 = -Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out5_id0 + Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_59 = tmp_34*tmp_58;
      real_t tmp_60 = tmp_38*tmp_58;
      real_t tmp_61 = tmp_40*tmp_58;
      real_t tmp_62 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out5_id0 - Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out4_id0;
      real_t tmp_63 = tmp_42*tmp_62;
      real_t tmp_64 = tmp_46*tmp_62;
      real_t tmp_65 = tmp_48*tmp_62;
      real_t tmp_66 = -1.0*tmp_55 - 1.0*tmp_56 - 1.0*tmp_57 - 1.0*tmp_59 - 1.0*tmp_60 - 1.0*tmp_61 - 1.0*tmp_63 - 1.0*tmp_64 - 1.0*tmp_65;
      real_t tmp_67 = -Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out7_id0 + Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_68 = tmp_26*tmp_67;
      real_t tmp_69 = tmp_30*tmp_67;
      real_t tmp_70 = tmp_32*tmp_67;
      real_t tmp_71 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out8_id0 - Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_72 = tmp_34*tmp_71;
      real_t tmp_73 = tmp_38*tmp_71;
      real_t tmp_74 = tmp_40*tmp_71;
      real_t tmp_75 = -Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out8_id0 + Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_76 = tmp_42*tmp_75;
      real_t tmp_77 = tmp_46*tmp_75;
      real_t tmp_78 = tmp_48*tmp_75;
      real_t tmp_79 = -1.0*tmp_68 - 1.0*tmp_69 - 1.0*tmp_70 - 1.0*tmp_72 - 1.0*tmp_73 - 1.0*tmp_74 - 1.0*tmp_76 - 1.0*tmp_77 - 1.0*tmp_78;
      real_t tmp_80 = p_affine_0_0*p_affine_1_1;
      real_t tmp_81 = p_affine_0_0*p_affine_1_2;
      real_t tmp_82 = p_affine_2_1*p_affine_3_2;
      real_t tmp_83 = p_affine_0_1*p_affine_1_0;
      real_t tmp_84 = p_affine_0_1*p_affine_1_2;
      real_t tmp_85 = p_affine_2_2*p_affine_3_0;
      real_t tmp_86 = p_affine_0_2*p_affine_1_0;
      real_t tmp_87 = p_affine_0_2*p_affine_1_1;
      real_t tmp_88 = p_affine_2_0*p_affine_3_1;
      real_t tmp_89 = p_affine_2_2*p_affine_3_1;
      real_t tmp_90 = p_affine_2_0*p_affine_3_2;
      real_t tmp_91 = p_affine_2_1*p_affine_3_0;
      real_t tmp_92 = 0.16666666666666663*std::abs(tmp_14)*std::abs(p_affine_0_0*tmp_82 - p_affine_0_0*tmp_89 + p_affine_0_1*tmp_85 - p_affine_0_1*tmp_90 + p_affine_0_2*tmp_88 - p_affine_0_2*tmp_91 - p_affine_1_0*tmp_82 + p_affine_1_0*tmp_89 - p_affine_1_1*tmp_85 + p_affine_1_1*tmp_90 - p_affine_1_2*tmp_88 + p_affine_1_2*tmp_91 + p_affine_2_0*tmp_84 - p_affine_2_0*tmp_87 - p_affine_2_1*tmp_81 + p_affine_2_1*tmp_86 + p_affine_2_2*tmp_80 - p_affine_2_2*tmp_83 - p_affine_3_0*tmp_84 + p_affine_3_0*tmp_87 + p_affine_3_1*tmp_81 - p_affine_3_1*tmp_86 - p_affine_3_2*tmp_80 + p_affine_3_2*tmp_83);
      real_t a_0_0 = tmp_92*(tmp_53*(-tmp_29 - tmp_31 - tmp_33 - tmp_37 - tmp_39 - tmp_41 - tmp_45 - tmp_47 - tmp_49) + tmp_66*(-1.0*tmp_55 - 1.0*tmp_56 - 1.0*tmp_57 - 1.0*tmp_59 - 1.0*tmp_60 - 1.0*tmp_61 - 1.0*tmp_63 - 1.0*tmp_64 - 1.0*tmp_65) + tmp_79*(-1.0*tmp_68 - 1.0*tmp_69 - 1.0*tmp_70 - 1.0*tmp_72 - 1.0*tmp_73 - 1.0*tmp_74 - 1.0*tmp_76 - 1.0*tmp_77 - 1.0*tmp_78));
      real_t a_0_1 = tmp_92*(tmp_53*(tmp_33 + tmp_41 + tmp_49) + tmp_66*(tmp_57 + tmp_61 + tmp_65) + tmp_79*(tmp_70 + tmp_74 + tmp_78));
      real_t a_0_2 = tmp_92*(tmp_53*(tmp_31 + tmp_39 + tmp_47) + tmp_66*(tmp_56 + tmp_60 + tmp_64) + tmp_79*(tmp_69 + tmp_73 + tmp_77));
      real_t a_0_3 = tmp_92*(tmp_53*(tmp_29 + tmp_37 + tmp_45) + tmp_66*(tmp_55 + tmp_59 + tmp_63) + tmp_79*(tmp_68 + tmp_72 + tmp_76));
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
   }

   void p1_epsiloncc_0_0_blending_q1::Blending_DF_Triangle_blend( real_t in_0, real_t in_1, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3 ) const
   {
      Point3D  mappedPt( in_0, in_1, 0 );
      Matrix2r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 1, 0 );
      *out_3 = DPsi( 1, 1 );
   }

   void p1_epsiloncc_0_0_blending_q1::Blending_DF_Tetrahedron_blend( real_t in_0, real_t in_1, real_t in_2, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3, real_t * out_4, real_t * out_5, real_t * out_6, real_t * out_7, real_t * out_8 ) const
   {
      Point3D  mappedPt( in_0, in_1, in_2 );
      Matrix3r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 0, 2 );
      *out_3 = DPsi( 1, 0 );
      *out_4 = DPsi( 1, 1 );
      *out_5 = DPsi( 1, 2 );
      *out_6 = DPsi( 2, 0 );
      *out_7 = DPsi( 2, 1 );
      *out_8 = DPsi( 2, 2 );
   }

   void p1_epsiloncc_0_1_blending_q1::integrateAll( const std::array< Point3D, 3 >& coords, Matrix< real_t, 3, 3 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t Blending_DF_Triangle_blend_out0_id0 = 0;
      real_t Blending_DF_Triangle_blend_out1_id0 = 0;
      real_t Blending_DF_Triangle_blend_out2_id0 = 0;
      real_t Blending_DF_Triangle_blend_out3_id0 = 0;
      Blending_DF_Triangle_blend( 0.33333333333333343*p_affine_0_0 + 0.33333333333333331*p_affine_1_0 + 0.33333333333333331*p_affine_2_0, 0.33333333333333343*p_affine_0_1 + 0.33333333333333331*p_affine_1_1 + 0.33333333333333331*p_affine_2_1, &Blending_DF_Triangle_blend_out0_id0, &Blending_DF_Triangle_blend_out1_id0, &Blending_DF_Triangle_blend_out2_id0, &Blending_DF_Triangle_blend_out3_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = Blending_DF_Triangle_blend_out0_id0*Blending_DF_Triangle_blend_out3_id0 - Blending_DF_Triangle_blend_out1_id0*Blending_DF_Triangle_blend_out2_id0;
      real_t tmp_3 = -p_affine_0_1;
      real_t tmp_4 = p_affine_2_1 + tmp_3;
      real_t tmp_5 = 1/(tmp_2*(tmp_1*tmp_4 - (p_affine_1_1 + tmp_3)*(p_affine_2_0 + tmp_0)));
      real_t tmp_6 = Blending_DF_Triangle_blend_out2_id0*tmp_5;
      real_t tmp_7 = tmp_1*tmp_6;
      real_t tmp_8 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_9 = tmp_6*tmp_8;
      real_t tmp_10 = Blending_DF_Triangle_blend_out3_id0*tmp_5;
      real_t tmp_11 = tmp_10*tmp_4;
      real_t tmp_12 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_13 = tmp_10*tmp_12;
      real_t tmp_14 = -1.0*tmp_11 - 1.0*tmp_13 + tmp_7 + tmp_9;
      real_t tmp_15 = 0.5*tmp_5;
      real_t tmp_16 = Blending_DF_Triangle_blend_out0_id0*tmp_15;
      real_t tmp_17 = tmp_1*tmp_16;
      real_t tmp_18 = tmp_16*tmp_8;
      real_t tmp_19 = Blending_DF_Triangle_blend_out1_id0*tmp_15;
      real_t tmp_20 = tmp_19*tmp_4;
      real_t tmp_21 = tmp_12*tmp_19;
      real_t tmp_22 = 1.0*std::abs(tmp_2)*std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_23 = tmp_22*(-tmp_17 - tmp_18 + tmp_20 + tmp_21);
      real_t tmp_24 = tmp_11 - 1.0*tmp_9;
      real_t tmp_25 = tmp_13 - 1.0*tmp_7;
      real_t tmp_26 = tmp_22*(tmp_18 - tmp_20);
      real_t tmp_27 = tmp_22*(tmp_17 - tmp_21);
      real_t a_0_0 = tmp_14*tmp_23;
      real_t a_0_1 = tmp_23*tmp_24;
      real_t a_0_2 = tmp_23*tmp_25;
      real_t a_1_0 = tmp_14*tmp_26;
      real_t a_1_1 = tmp_24*tmp_26;
      real_t a_1_2 = tmp_25*tmp_26;
      real_t a_2_0 = tmp_14*tmp_27;
      real_t a_2_1 = tmp_24*tmp_27;
      real_t a_2_2 = tmp_25*tmp_27;
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
   }

   void p1_epsiloncc_0_1_blending_q1::integrateRow0( const std::array< Point3D, 3 >& coords, Matrix< real_t, 1, 3 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t Blending_DF_Triangle_blend_out0_id0 = 0;
      real_t Blending_DF_Triangle_blend_out1_id0 = 0;
      real_t Blending_DF_Triangle_blend_out2_id0 = 0;
      real_t Blending_DF_Triangle_blend_out3_id0 = 0;
      Blending_DF_Triangle_blend( 0.33333333333333343*p_affine_0_0 + 0.33333333333333331*p_affine_1_0 + 0.33333333333333331*p_affine_2_0, 0.33333333333333343*p_affine_0_1 + 0.33333333333333331*p_affine_1_1 + 0.33333333333333331*p_affine_2_1, &Blending_DF_Triangle_blend_out0_id0, &Blending_DF_Triangle_blend_out1_id0, &Blending_DF_Triangle_blend_out2_id0, &Blending_DF_Triangle_blend_out3_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = Blending_DF_Triangle_blend_out0_id0*Blending_DF_Triangle_blend_out3_id0 - Blending_DF_Triangle_blend_out1_id0*Blending_DF_Triangle_blend_out2_id0;
      real_t tmp_3 = -p_affine_0_1;
      real_t tmp_4 = p_affine_2_1 + tmp_3;
      real_t tmp_5 = 1/(tmp_2*(tmp_1*tmp_4 - (p_affine_1_1 + tmp_3)*(p_affine_2_0 + tmp_0)));
      real_t tmp_6 = Blending_DF_Triangle_blend_out2_id0*tmp_5;
      real_t tmp_7 = tmp_1*tmp_6;
      real_t tmp_8 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_9 = tmp_6*tmp_8;
      real_t tmp_10 = Blending_DF_Triangle_blend_out3_id0*tmp_5;
      real_t tmp_11 = tmp_10*tmp_4;
      real_t tmp_12 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_13 = tmp_10*tmp_12;
      real_t tmp_14 = 0.5*tmp_5;
      real_t tmp_15 = Blending_DF_Triangle_blend_out0_id0*tmp_14;
      real_t tmp_16 = Blending_DF_Triangle_blend_out1_id0*tmp_14;
      real_t tmp_17 = 1.0*(-tmp_1*tmp_15 + tmp_12*tmp_16 - tmp_15*tmp_8 + tmp_16*tmp_4)*std::abs(tmp_2)*std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t a_0_0 = tmp_17*(-1.0*tmp_11 - 1.0*tmp_13 + tmp_7 + tmp_9);
      real_t a_0_1 = tmp_17*(tmp_11 - 1.0*tmp_9);
      real_t a_0_2 = tmp_17*(tmp_13 - 1.0*tmp_7);
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
   }

   void p1_epsiloncc_0_1_blending_q1::integrateAll( const std::array< Point3D, 4 >& coords, Matrix< real_t, 4, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = p_affine_2_0 + tmp_0;
      real_t tmp_5 = p_affine_1_1 + tmp_2;
      real_t tmp_6 = tmp_1*tmp_3 - tmp_4*tmp_5;
      real_t tmp_7 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_8 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_12 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_13 = -Blending_DF_Tetrahedron_blend_out3_id0*tmp_11 + Blending_DF_Tetrahedron_blend_out3_id0*tmp_9 - Blending_DF_Tetrahedron_blend_out4_id0*tmp_12 + Blending_DF_Tetrahedron_blend_out4_id0*tmp_7 - Blending_DF_Tetrahedron_blend_out5_id0*tmp_10 + Blending_DF_Tetrahedron_blend_out5_id0*tmp_8;
      real_t tmp_14 = -p_affine_0_2;
      real_t tmp_15 = p_affine_3_2 + tmp_14;
      real_t tmp_16 = tmp_1*tmp_15;
      real_t tmp_17 = p_affine_3_1 + tmp_2;
      real_t tmp_18 = p_affine_1_2 + tmp_14;
      real_t tmp_19 = tmp_18*tmp_4;
      real_t tmp_20 = p_affine_3_0 + tmp_0;
      real_t tmp_21 = p_affine_2_2 + tmp_14;
      real_t tmp_22 = tmp_20*tmp_21;
      real_t tmp_23 = tmp_1*tmp_21;
      real_t tmp_24 = tmp_15*tmp_4;
      real_t tmp_25 = tmp_18*tmp_20;
      real_t tmp_26 = 1/(tmp_13*(tmp_16*tmp_3 + tmp_17*tmp_19 - tmp_17*tmp_23 + tmp_22*tmp_5 - tmp_24*tmp_5 - tmp_25*tmp_3));
      real_t tmp_27 = tmp_26*(Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out7_id0 - Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out6_id0);
      real_t tmp_28 = tmp_27*tmp_6;
      real_t tmp_29 = -tmp_1*tmp_17 + tmp_20*tmp_5;
      real_t tmp_30 = tmp_27*tmp_29;
      real_t tmp_31 = tmp_17*tmp_4 - tmp_20*tmp_3;
      real_t tmp_32 = tmp_27*tmp_31;
      real_t tmp_33 = tmp_19 - tmp_23;
      real_t tmp_34 = tmp_26*(-Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out8_id0 + Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out6_id0);
      real_t tmp_35 = tmp_33*tmp_34;
      real_t tmp_36 = tmp_16 - tmp_25;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = tmp_22 - tmp_24;
      real_t tmp_39 = tmp_34*tmp_38;
      real_t tmp_40 = -tmp_18*tmp_3 + tmp_21*tmp_5;
      real_t tmp_41 = tmp_26*(Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out8_id0 - Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out7_id0);
      real_t tmp_42 = tmp_40*tmp_41;
      real_t tmp_43 = -tmp_15*tmp_5 + tmp_17*tmp_18;
      real_t tmp_44 = tmp_41*tmp_43;
      real_t tmp_45 = tmp_15*tmp_3 - tmp_17*tmp_21;
      real_t tmp_46 = tmp_41*tmp_45;
      real_t tmp_47 = -1.0*tmp_28 - 1.0*tmp_30 - 1.0*tmp_32 - 1.0*tmp_35 - 1.0*tmp_37 - 1.0*tmp_39 - 1.0*tmp_42 - 1.0*tmp_44 - 1.0*tmp_46;
      real_t tmp_48 = 0.5*tmp_26;
      real_t tmp_49 = tmp_48*(-tmp_10 + tmp_8);
      real_t tmp_50 = tmp_49*tmp_6;
      real_t tmp_51 = tmp_29*tmp_49;
      real_t tmp_52 = tmp_31*tmp_49;
      real_t tmp_53 = tmp_48*(-tmp_12 + tmp_7);
      real_t tmp_54 = tmp_33*tmp_53;
      real_t tmp_55 = tmp_36*tmp_53;
      real_t tmp_56 = tmp_38*tmp_53;
      real_t tmp_57 = tmp_48*(-tmp_11 + tmp_9);
      real_t tmp_58 = tmp_40*tmp_57;
      real_t tmp_59 = tmp_43*tmp_57;
      real_t tmp_60 = tmp_45*tmp_57;
      real_t tmp_61 = p_affine_0_0*p_affine_1_1;
      real_t tmp_62 = p_affine_0_0*p_affine_1_2;
      real_t tmp_63 = p_affine_2_1*p_affine_3_2;
      real_t tmp_64 = p_affine_0_1*p_affine_1_0;
      real_t tmp_65 = p_affine_0_1*p_affine_1_2;
      real_t tmp_66 = p_affine_2_2*p_affine_3_0;
      real_t tmp_67 = p_affine_0_2*p_affine_1_0;
      real_t tmp_68 = p_affine_0_2*p_affine_1_1;
      real_t tmp_69 = p_affine_2_0*p_affine_3_1;
      real_t tmp_70 = p_affine_2_2*p_affine_3_1;
      real_t tmp_71 = p_affine_2_0*p_affine_3_2;
      real_t tmp_72 = p_affine_2_1*p_affine_3_0;
      real_t tmp_73 = 0.33333333333333326*std::abs(tmp_13)*std::abs(p_affine_0_0*tmp_63 - p_affine_0_0*tmp_70 + p_affine_0_1*tmp_66 - p_affine_0_1*tmp_71 + p_affine_0_2*tmp_69 - p_affine_0_2*tmp_72 - p_affine_1_0*tmp_63 + p_affine_1_0*tmp_70 - p_affine_1_1*tmp_66 + p_affine_1_1*tmp_71 - p_affine_1_2*tmp_69 + p_affine_1_2*tmp_72 + p_affine_2_0*tmp_65 - p_affine_2_0*tmp_68 - p_affine_2_1*tmp_62 + p_affine_2_1*tmp_67 + p_affine_2_2*tmp_61 - p_affine_2_2*tmp_64 - p_affine_3_0*tmp_65 + p_affine_3_0*tmp_68 + p_affine_3_1*tmp_62 - p_affine_3_1*tmp_67 - p_affine_3_2*tmp_61 + p_affine_3_2*tmp_64);
      real_t tmp_74 = tmp_73*(-tmp_50 - tmp_51 - tmp_52 - tmp_54 - tmp_55 - tmp_56 - tmp_58 - tmp_59 - tmp_60);
      real_t tmp_75 = tmp_32 + tmp_39 + tmp_46;
      real_t tmp_76 = tmp_30 + tmp_37 + tmp_44;
      real_t tmp_77 = tmp_28 + tmp_35 + tmp_42;
      real_t tmp_78 = tmp_73*(tmp_52 + tmp_56 + tmp_60);
      real_t tmp_79 = tmp_73*(tmp_51 + tmp_55 + tmp_59);
      real_t tmp_80 = tmp_73*(tmp_50 + tmp_54 + tmp_58);
      real_t a_0_0 = tmp_47*tmp_74;
      real_t a_0_1 = tmp_74*tmp_75;
      real_t a_0_2 = tmp_74*tmp_76;
      real_t a_0_3 = tmp_74*tmp_77;
      real_t a_1_0 = tmp_47*tmp_78;
      real_t a_1_1 = tmp_75*tmp_78;
      real_t a_1_2 = tmp_76*tmp_78;
      real_t a_1_3 = tmp_77*tmp_78;
      real_t a_2_0 = tmp_47*tmp_79;
      real_t a_2_1 = tmp_75*tmp_79;
      real_t a_2_2 = tmp_76*tmp_79;
      real_t a_2_3 = tmp_77*tmp_79;
      real_t a_3_0 = tmp_47*tmp_80;
      real_t a_3_1 = tmp_75*tmp_80;
      real_t a_3_2 = tmp_76*tmp_80;
      real_t a_3_3 = tmp_77*tmp_80;
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(1, 3)) = a_1_3;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
      (elMat(2, 3)) = a_2_3;
      (elMat(3, 0)) = a_3_0;
      (elMat(3, 1)) = a_3_1;
      (elMat(3, 2)) = a_3_2;
      (elMat(3, 3)) = a_3_3;
   }

   void p1_epsiloncc_0_1_blending_q1::integrateRow0( const std::array< Point3D, 4 >& coords, Matrix< real_t, 1, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = p_affine_2_0 + tmp_0;
      real_t tmp_5 = p_affine_1_1 + tmp_2;
      real_t tmp_6 = tmp_1*tmp_3 - tmp_4*tmp_5;
      real_t tmp_7 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_8 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_12 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_13 = -Blending_DF_Tetrahedron_blend_out3_id0*tmp_11 + Blending_DF_Tetrahedron_blend_out3_id0*tmp_9 - Blending_DF_Tetrahedron_blend_out4_id0*tmp_12 + Blending_DF_Tetrahedron_blend_out4_id0*tmp_7 - Blending_DF_Tetrahedron_blend_out5_id0*tmp_10 + Blending_DF_Tetrahedron_blend_out5_id0*tmp_8;
      real_t tmp_14 = -p_affine_0_2;
      real_t tmp_15 = p_affine_3_2 + tmp_14;
      real_t tmp_16 = tmp_1*tmp_15;
      real_t tmp_17 = p_affine_3_1 + tmp_2;
      real_t tmp_18 = p_affine_1_2 + tmp_14;
      real_t tmp_19 = tmp_18*tmp_4;
      real_t tmp_20 = p_affine_3_0 + tmp_0;
      real_t tmp_21 = p_affine_2_2 + tmp_14;
      real_t tmp_22 = tmp_20*tmp_21;
      real_t tmp_23 = tmp_1*tmp_21;
      real_t tmp_24 = tmp_15*tmp_4;
      real_t tmp_25 = tmp_18*tmp_20;
      real_t tmp_26 = 1/(tmp_13*(tmp_16*tmp_3 + tmp_17*tmp_19 - tmp_17*tmp_23 + tmp_22*tmp_5 - tmp_24*tmp_5 - tmp_25*tmp_3));
      real_t tmp_27 = tmp_26*(Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out7_id0 - Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out6_id0);
      real_t tmp_28 = tmp_27*tmp_6;
      real_t tmp_29 = -tmp_1*tmp_17 + tmp_20*tmp_5;
      real_t tmp_30 = tmp_27*tmp_29;
      real_t tmp_31 = tmp_17*tmp_4 - tmp_20*tmp_3;
      real_t tmp_32 = tmp_27*tmp_31;
      real_t tmp_33 = tmp_19 - tmp_23;
      real_t tmp_34 = tmp_26*(-Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out8_id0 + Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out6_id0);
      real_t tmp_35 = tmp_33*tmp_34;
      real_t tmp_36 = tmp_16 - tmp_25;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = tmp_22 - tmp_24;
      real_t tmp_39 = tmp_34*tmp_38;
      real_t tmp_40 = -tmp_18*tmp_3 + tmp_21*tmp_5;
      real_t tmp_41 = tmp_26*(Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out8_id0 - Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out7_id0);
      real_t tmp_42 = tmp_40*tmp_41;
      real_t tmp_43 = -tmp_15*tmp_5 + tmp_17*tmp_18;
      real_t tmp_44 = tmp_41*tmp_43;
      real_t tmp_45 = tmp_15*tmp_3 - tmp_17*tmp_21;
      real_t tmp_46 = tmp_41*tmp_45;
      real_t tmp_47 = 0.5*tmp_26;
      real_t tmp_48 = tmp_47*(-tmp_10 + tmp_8);
      real_t tmp_49 = tmp_47*(-tmp_12 + tmp_7);
      real_t tmp_50 = tmp_47*(-tmp_11 + tmp_9);
      real_t tmp_51 = p_affine_0_0*p_affine_1_1;
      real_t tmp_52 = p_affine_0_0*p_affine_1_2;
      real_t tmp_53 = p_affine_2_1*p_affine_3_2;
      real_t tmp_54 = p_affine_0_1*p_affine_1_0;
      real_t tmp_55 = p_affine_0_1*p_affine_1_2;
      real_t tmp_56 = p_affine_2_2*p_affine_3_0;
      real_t tmp_57 = p_affine_0_2*p_affine_1_0;
      real_t tmp_58 = p_affine_0_2*p_affine_1_1;
      real_t tmp_59 = p_affine_2_0*p_affine_3_1;
      real_t tmp_60 = p_affine_2_2*p_affine_3_1;
      real_t tmp_61 = p_affine_2_0*p_affine_3_2;
      real_t tmp_62 = p_affine_2_1*p_affine_3_0;
      real_t tmp_63 = 0.33333333333333326*(-tmp_29*tmp_48 - tmp_31*tmp_48 - tmp_33*tmp_49 - tmp_36*tmp_49 - tmp_38*tmp_49 - tmp_40*tmp_50 - tmp_43*tmp_50 - tmp_45*tmp_50 - tmp_48*tmp_6)*std::abs(tmp_13)*std::abs(p_affine_0_0*tmp_53 - p_affine_0_0*tmp_60 + p_affine_0_1*tmp_56 - p_affine_0_1*tmp_61 + p_affine_0_2*tmp_59 - p_affine_0_2*tmp_62 - p_affine_1_0*tmp_53 + p_affine_1_0*tmp_60 - p_affine_1_1*tmp_56 + p_affine_1_1*tmp_61 - p_affine_1_2*tmp_59 + p_affine_1_2*tmp_62 + p_affine_2_0*tmp_55 - p_affine_2_0*tmp_58 - p_affine_2_1*tmp_52 + p_affine_2_1*tmp_57 + p_affine_2_2*tmp_51 - p_affine_2_2*tmp_54 - p_affine_3_0*tmp_55 + p_affine_3_0*tmp_58 + p_affine_3_1*tmp_52 - p_affine_3_1*tmp_57 - p_affine_3_2*tmp_51 + p_affine_3_2*tmp_54);
      real_t a_0_0 = tmp_63*(-1.0*tmp_28 - 1.0*tmp_30 - 1.0*tmp_32 - 1.0*tmp_35 - 1.0*tmp_37 - 1.0*tmp_39 - 1.0*tmp_42 - 1.0*tmp_44 - 1.0*tmp_46);
      real_t a_0_1 = tmp_63*(tmp_32 + tmp_39 + tmp_46);
      real_t a_0_2 = tmp_63*(tmp_30 + tmp_37 + tmp_44);
      real_t a_0_3 = tmp_63*(tmp_28 + tmp_35 + tmp_42);
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
   }

   void p1_epsiloncc_0_1_blending_q1::Blending_DF_Triangle_blend( real_t in_0, real_t in_1, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3 ) const
   {
      Point3D  mappedPt( in_0, in_1, 0 );
      Matrix2r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 1, 0 );
      *out_3 = DPsi( 1, 1 );
   }

   void p1_epsiloncc_0_1_blending_q1::Blending_DF_Tetrahedron_blend( real_t in_0, real_t in_1, real_t in_2, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3, real_t * out_4, real_t * out_5, real_t * out_6, real_t * out_7, real_t * out_8 ) const
   {
      Point3D  mappedPt( in_0, in_1, in_2 );
      Matrix3r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 0, 2 );
      *out_3 = DPsi( 1, 0 );
      *out_4 = DPsi( 1, 1 );
      *out_5 = DPsi( 1, 2 );
      *out_6 = DPsi( 2, 0 );
      *out_7 = DPsi( 2, 1 );
      *out_8 = DPsi( 2, 2 );
   }

   void p1_epsiloncc_0_2_blending_q1::integrateAll( const std::array< Point3D, 3 >& , Matrix< real_t, 3, 3 >&  ) const
   {
      
   }

   void p1_epsiloncc_0_2_blending_q1::integrateRow0( const std::array< Point3D, 3 >& , Matrix< real_t, 1, 3 >&  ) const
   {
      
   }

   void p1_epsiloncc_0_2_blending_q1::integrateAll( const std::array< Point3D, 4 >& coords, Matrix< real_t, 4, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = tmp_1*tmp_3;
      real_t tmp_5 = p_affine_2_0 + tmp_0;
      real_t tmp_6 = p_affine_1_1 + tmp_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = tmp_4 - tmp_7;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out4_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out5_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_12 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out5_id0;
      real_t tmp_13 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_14 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out4_id0;
      real_t tmp_15 = Blending_DF_Tetrahedron_blend_out6_id0*tmp_10 - Blending_DF_Tetrahedron_blend_out6_id0*tmp_14 + Blending_DF_Tetrahedron_blend_out7_id0*tmp_11 - Blending_DF_Tetrahedron_blend_out7_id0*tmp_12 - Blending_DF_Tetrahedron_blend_out8_id0*tmp_13 + Blending_DF_Tetrahedron_blend_out8_id0*tmp_9;
      real_t tmp_16 = -p_affine_0_2;
      real_t tmp_17 = p_affine_3_2 + tmp_16;
      real_t tmp_18 = p_affine_1_2 + tmp_16;
      real_t tmp_19 = p_affine_3_1 + tmp_2;
      real_t tmp_20 = tmp_19*tmp_5;
      real_t tmp_21 = p_affine_2_2 + tmp_16;
      real_t tmp_22 = p_affine_3_0 + tmp_0;
      real_t tmp_23 = tmp_22*tmp_6;
      real_t tmp_24 = tmp_1*tmp_19;
      real_t tmp_25 = tmp_22*tmp_3;
      real_t tmp_26 = 1/(tmp_15*(tmp_17*tmp_4 - tmp_17*tmp_7 + tmp_18*tmp_20 - tmp_18*tmp_25 + tmp_21*tmp_23 - tmp_21*tmp_24));
      real_t tmp_27 = tmp_26*(Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out7_id0 - Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out6_id0);
      real_t tmp_28 = tmp_27*tmp_8;
      real_t tmp_29 = tmp_23 - tmp_24;
      real_t tmp_30 = tmp_27*tmp_29;
      real_t tmp_31 = tmp_20 - tmp_25;
      real_t tmp_32 = tmp_27*tmp_31;
      real_t tmp_33 = -tmp_1*tmp_21 + tmp_18*tmp_5;
      real_t tmp_34 = tmp_26*(-Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out8_id0 + Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out6_id0);
      real_t tmp_35 = tmp_33*tmp_34;
      real_t tmp_36 = tmp_1*tmp_17 - tmp_18*tmp_22;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = -tmp_17*tmp_5 + tmp_21*tmp_22;
      real_t tmp_39 = tmp_34*tmp_38;
      real_t tmp_40 = -tmp_18*tmp_3 + tmp_21*tmp_6;
      real_t tmp_41 = tmp_26*(Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out8_id0 - Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out7_id0);
      real_t tmp_42 = tmp_40*tmp_41;
      real_t tmp_43 = -tmp_17*tmp_6 + tmp_18*tmp_19;
      real_t tmp_44 = tmp_41*tmp_43;
      real_t tmp_45 = tmp_17*tmp_3 - tmp_19*tmp_21;
      real_t tmp_46 = tmp_41*tmp_45;
      real_t tmp_47 = -1.0*tmp_28 - 1.0*tmp_30 - 1.0*tmp_32 - 1.0*tmp_35 - 1.0*tmp_37 - 1.0*tmp_39 - 1.0*tmp_42 - 1.0*tmp_44 - 1.0*tmp_46;
      real_t tmp_48 = 0.5*tmp_26;
      real_t tmp_49 = tmp_48*(-tmp_13 + tmp_9);
      real_t tmp_50 = tmp_49*tmp_8;
      real_t tmp_51 = tmp_29*tmp_49;
      real_t tmp_52 = tmp_31*tmp_49;
      real_t tmp_53 = tmp_48*(tmp_11 - tmp_12);
      real_t tmp_54 = tmp_33*tmp_53;
      real_t tmp_55 = tmp_36*tmp_53;
      real_t tmp_56 = tmp_38*tmp_53;
      real_t tmp_57 = tmp_48*(tmp_10 - tmp_14);
      real_t tmp_58 = tmp_40*tmp_57;
      real_t tmp_59 = tmp_43*tmp_57;
      real_t tmp_60 = tmp_45*tmp_57;
      real_t tmp_61 = p_affine_0_0*p_affine_1_1;
      real_t tmp_62 = p_affine_0_0*p_affine_1_2;
      real_t tmp_63 = p_affine_2_1*p_affine_3_2;
      real_t tmp_64 = p_affine_0_1*p_affine_1_0;
      real_t tmp_65 = p_affine_0_1*p_affine_1_2;
      real_t tmp_66 = p_affine_2_2*p_affine_3_0;
      real_t tmp_67 = p_affine_0_2*p_affine_1_0;
      real_t tmp_68 = p_affine_0_2*p_affine_1_1;
      real_t tmp_69 = p_affine_2_0*p_affine_3_1;
      real_t tmp_70 = p_affine_2_2*p_affine_3_1;
      real_t tmp_71 = p_affine_2_0*p_affine_3_2;
      real_t tmp_72 = p_affine_2_1*p_affine_3_0;
      real_t tmp_73 = 0.33333333333333326*std::abs(tmp_15)*std::abs(p_affine_0_0*tmp_63 - p_affine_0_0*tmp_70 + p_affine_0_1*tmp_66 - p_affine_0_1*tmp_71 + p_affine_0_2*tmp_69 - p_affine_0_2*tmp_72 - p_affine_1_0*tmp_63 + p_affine_1_0*tmp_70 - p_affine_1_1*tmp_66 + p_affine_1_1*tmp_71 - p_affine_1_2*tmp_69 + p_affine_1_2*tmp_72 + p_affine_2_0*tmp_65 - p_affine_2_0*tmp_68 - p_affine_2_1*tmp_62 + p_affine_2_1*tmp_67 + p_affine_2_2*tmp_61 - p_affine_2_2*tmp_64 - p_affine_3_0*tmp_65 + p_affine_3_0*tmp_68 + p_affine_3_1*tmp_62 - p_affine_3_1*tmp_67 - p_affine_3_2*tmp_61 + p_affine_3_2*tmp_64);
      real_t tmp_74 = tmp_73*(-tmp_50 - tmp_51 - tmp_52 - tmp_54 - tmp_55 - tmp_56 - tmp_58 - tmp_59 - tmp_60);
      real_t tmp_75 = tmp_32 + tmp_39 + tmp_46;
      real_t tmp_76 = tmp_30 + tmp_37 + tmp_44;
      real_t tmp_77 = tmp_28 + tmp_35 + tmp_42;
      real_t tmp_78 = tmp_73*(tmp_52 + tmp_56 + tmp_60);
      real_t tmp_79 = tmp_73*(tmp_51 + tmp_55 + tmp_59);
      real_t tmp_80 = tmp_73*(tmp_50 + tmp_54 + tmp_58);
      real_t a_0_0 = tmp_47*tmp_74;
      real_t a_0_1 = tmp_74*tmp_75;
      real_t a_0_2 = tmp_74*tmp_76;
      real_t a_0_3 = tmp_74*tmp_77;
      real_t a_1_0 = tmp_47*tmp_78;
      real_t a_1_1 = tmp_75*tmp_78;
      real_t a_1_2 = tmp_76*tmp_78;
      real_t a_1_3 = tmp_77*tmp_78;
      real_t a_2_0 = tmp_47*tmp_79;
      real_t a_2_1 = tmp_75*tmp_79;
      real_t a_2_2 = tmp_76*tmp_79;
      real_t a_2_3 = tmp_77*tmp_79;
      real_t a_3_0 = tmp_47*tmp_80;
      real_t a_3_1 = tmp_75*tmp_80;
      real_t a_3_2 = tmp_76*tmp_80;
      real_t a_3_3 = tmp_77*tmp_80;
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(1, 3)) = a_1_3;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
      (elMat(2, 3)) = a_2_3;
      (elMat(3, 0)) = a_3_0;
      (elMat(3, 1)) = a_3_1;
      (elMat(3, 2)) = a_3_2;
      (elMat(3, 3)) = a_3_3;
   }

   void p1_epsiloncc_0_2_blending_q1::integrateRow0( const std::array< Point3D, 4 >& coords, Matrix< real_t, 1, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = tmp_1*tmp_3;
      real_t tmp_5 = p_affine_2_0 + tmp_0;
      real_t tmp_6 = p_affine_1_1 + tmp_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = tmp_4 - tmp_7;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out4_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out5_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_12 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out5_id0;
      real_t tmp_13 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_14 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out4_id0;
      real_t tmp_15 = Blending_DF_Tetrahedron_blend_out6_id0*tmp_10 - Blending_DF_Tetrahedron_blend_out6_id0*tmp_14 + Blending_DF_Tetrahedron_blend_out7_id0*tmp_11 - Blending_DF_Tetrahedron_blend_out7_id0*tmp_12 - Blending_DF_Tetrahedron_blend_out8_id0*tmp_13 + Blending_DF_Tetrahedron_blend_out8_id0*tmp_9;
      real_t tmp_16 = -p_affine_0_2;
      real_t tmp_17 = p_affine_3_2 + tmp_16;
      real_t tmp_18 = p_affine_1_2 + tmp_16;
      real_t tmp_19 = p_affine_3_1 + tmp_2;
      real_t tmp_20 = tmp_19*tmp_5;
      real_t tmp_21 = p_affine_2_2 + tmp_16;
      real_t tmp_22 = p_affine_3_0 + tmp_0;
      real_t tmp_23 = tmp_22*tmp_6;
      real_t tmp_24 = tmp_1*tmp_19;
      real_t tmp_25 = tmp_22*tmp_3;
      real_t tmp_26 = 1/(tmp_15*(tmp_17*tmp_4 - tmp_17*tmp_7 + tmp_18*tmp_20 - tmp_18*tmp_25 + tmp_21*tmp_23 - tmp_21*tmp_24));
      real_t tmp_27 = tmp_26*(Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out7_id0 - Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out6_id0);
      real_t tmp_28 = tmp_27*tmp_8;
      real_t tmp_29 = tmp_23 - tmp_24;
      real_t tmp_30 = tmp_27*tmp_29;
      real_t tmp_31 = tmp_20 - tmp_25;
      real_t tmp_32 = tmp_27*tmp_31;
      real_t tmp_33 = -tmp_1*tmp_21 + tmp_18*tmp_5;
      real_t tmp_34 = tmp_26*(-Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out8_id0 + Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out6_id0);
      real_t tmp_35 = tmp_33*tmp_34;
      real_t tmp_36 = tmp_1*tmp_17 - tmp_18*tmp_22;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = -tmp_17*tmp_5 + tmp_21*tmp_22;
      real_t tmp_39 = tmp_34*tmp_38;
      real_t tmp_40 = -tmp_18*tmp_3 + tmp_21*tmp_6;
      real_t tmp_41 = tmp_26*(Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out8_id0 - Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out7_id0);
      real_t tmp_42 = tmp_40*tmp_41;
      real_t tmp_43 = -tmp_17*tmp_6 + tmp_18*tmp_19;
      real_t tmp_44 = tmp_41*tmp_43;
      real_t tmp_45 = tmp_17*tmp_3 - tmp_19*tmp_21;
      real_t tmp_46 = tmp_41*tmp_45;
      real_t tmp_47 = 0.5*tmp_26;
      real_t tmp_48 = tmp_47*(-tmp_13 + tmp_9);
      real_t tmp_49 = tmp_47*(tmp_11 - tmp_12);
      real_t tmp_50 = tmp_47*(tmp_10 - tmp_14);
      real_t tmp_51 = p_affine_0_0*p_affine_1_1;
      real_t tmp_52 = p_affine_0_0*p_affine_1_2;
      real_t tmp_53 = p_affine_2_1*p_affine_3_2;
      real_t tmp_54 = p_affine_0_1*p_affine_1_0;
      real_t tmp_55 = p_affine_0_1*p_affine_1_2;
      real_t tmp_56 = p_affine_2_2*p_affine_3_0;
      real_t tmp_57 = p_affine_0_2*p_affine_1_0;
      real_t tmp_58 = p_affine_0_2*p_affine_1_1;
      real_t tmp_59 = p_affine_2_0*p_affine_3_1;
      real_t tmp_60 = p_affine_2_2*p_affine_3_1;
      real_t tmp_61 = p_affine_2_0*p_affine_3_2;
      real_t tmp_62 = p_affine_2_1*p_affine_3_0;
      real_t tmp_63 = 0.33333333333333326*(-tmp_29*tmp_48 - tmp_31*tmp_48 - tmp_33*tmp_49 - tmp_36*tmp_49 - tmp_38*tmp_49 - tmp_40*tmp_50 - tmp_43*tmp_50 - tmp_45*tmp_50 - tmp_48*tmp_8)*std::abs(tmp_15)*std::abs(p_affine_0_0*tmp_53 - p_affine_0_0*tmp_60 + p_affine_0_1*tmp_56 - p_affine_0_1*tmp_61 + p_affine_0_2*tmp_59 - p_affine_0_2*tmp_62 - p_affine_1_0*tmp_53 + p_affine_1_0*tmp_60 - p_affine_1_1*tmp_56 + p_affine_1_1*tmp_61 - p_affine_1_2*tmp_59 + p_affine_1_2*tmp_62 + p_affine_2_0*tmp_55 - p_affine_2_0*tmp_58 - p_affine_2_1*tmp_52 + p_affine_2_1*tmp_57 + p_affine_2_2*tmp_51 - p_affine_2_2*tmp_54 - p_affine_3_0*tmp_55 + p_affine_3_0*tmp_58 + p_affine_3_1*tmp_52 - p_affine_3_1*tmp_57 - p_affine_3_2*tmp_51 + p_affine_3_2*tmp_54);
      real_t a_0_0 = tmp_63*(-1.0*tmp_28 - 1.0*tmp_30 - 1.0*tmp_32 - 1.0*tmp_35 - 1.0*tmp_37 - 1.0*tmp_39 - 1.0*tmp_42 - 1.0*tmp_44 - 1.0*tmp_46);
      real_t a_0_1 = tmp_63*(tmp_32 + tmp_39 + tmp_46);
      real_t a_0_2 = tmp_63*(tmp_30 + tmp_37 + tmp_44);
      real_t a_0_3 = tmp_63*(tmp_28 + tmp_35 + tmp_42);
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
   }

   void p1_epsiloncc_0_2_blending_q1::Blending_DF_Tetrahedron_blend( real_t in_0, real_t in_1, real_t in_2, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3, real_t * out_4, real_t * out_5, real_t * out_6, real_t * out_7, real_t * out_8 ) const
   {
      Point3D  mappedPt( in_0, in_1, in_2 );
      Matrix3r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 0, 2 );
      *out_3 = DPsi( 1, 0 );
      *out_4 = DPsi( 1, 1 );
      *out_5 = DPsi( 1, 2 );
      *out_6 = DPsi( 2, 0 );
      *out_7 = DPsi( 2, 1 );
      *out_8 = DPsi( 2, 2 );
   }

   void p1_epsiloncc_1_0_blending_q1::integrateAll( const std::array< Point3D, 3 >& coords, Matrix< real_t, 3, 3 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t Blending_DF_Triangle_blend_out0_id0 = 0;
      real_t Blending_DF_Triangle_blend_out1_id0 = 0;
      real_t Blending_DF_Triangle_blend_out2_id0 = 0;
      real_t Blending_DF_Triangle_blend_out3_id0 = 0;
      Blending_DF_Triangle_blend( 0.33333333333333343*p_affine_0_0 + 0.33333333333333331*p_affine_1_0 + 0.33333333333333331*p_affine_2_0, 0.33333333333333343*p_affine_0_1 + 0.33333333333333331*p_affine_1_1 + 0.33333333333333331*p_affine_2_1, &Blending_DF_Triangle_blend_out0_id0, &Blending_DF_Triangle_blend_out1_id0, &Blending_DF_Triangle_blend_out2_id0, &Blending_DF_Triangle_blend_out3_id0 );
      real_t tmp_0 = -p_affine_0_1;
      real_t tmp_1 = p_affine_2_1 + tmp_0;
      real_t tmp_2 = Blending_DF_Triangle_blend_out0_id0*Blending_DF_Triangle_blend_out3_id0 - Blending_DF_Triangle_blend_out1_id0*Blending_DF_Triangle_blend_out2_id0;
      real_t tmp_3 = -p_affine_0_0;
      real_t tmp_4 = p_affine_1_0 + tmp_3;
      real_t tmp_5 = 1/(tmp_2*(tmp_1*tmp_4 - (p_affine_1_1 + tmp_0)*(p_affine_2_0 + tmp_3)));
      real_t tmp_6 = Blending_DF_Triangle_blend_out1_id0*tmp_5;
      real_t tmp_7 = tmp_1*tmp_6;
      real_t tmp_8 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_9 = tmp_6*tmp_8;
      real_t tmp_10 = Blending_DF_Triangle_blend_out0_id0*tmp_5;
      real_t tmp_11 = tmp_10*tmp_4;
      real_t tmp_12 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_13 = tmp_10*tmp_12;
      real_t tmp_14 = -1.0*tmp_11 - 1.0*tmp_13 + tmp_7 + tmp_9;
      real_t tmp_15 = 0.5*tmp_5;
      real_t tmp_16 = Blending_DF_Triangle_blend_out2_id0*tmp_15;
      real_t tmp_17 = tmp_16*tmp_4;
      real_t tmp_18 = tmp_12*tmp_16;
      real_t tmp_19 = Blending_DF_Triangle_blend_out3_id0*tmp_15;
      real_t tmp_20 = tmp_1*tmp_19;
      real_t tmp_21 = tmp_19*tmp_8;
      real_t tmp_22 = 1.0*std::abs(tmp_2)*std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_23 = tmp_22*(tmp_17 + tmp_18 - tmp_20 - tmp_21);
      real_t tmp_24 = tmp_13 - 1.0*tmp_7;
      real_t tmp_25 = tmp_11 - 1.0*tmp_9;
      real_t tmp_26 = tmp_22*(-tmp_18 + tmp_20);
      real_t tmp_27 = tmp_22*(-tmp_17 + tmp_21);
      real_t a_0_0 = tmp_14*tmp_23;
      real_t a_0_1 = tmp_23*tmp_24;
      real_t a_0_2 = tmp_23*tmp_25;
      real_t a_1_0 = tmp_14*tmp_26;
      real_t a_1_1 = tmp_24*tmp_26;
      real_t a_1_2 = tmp_25*tmp_26;
      real_t a_2_0 = tmp_14*tmp_27;
      real_t a_2_1 = tmp_24*tmp_27;
      real_t a_2_2 = tmp_25*tmp_27;
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
   }

   void p1_epsiloncc_1_0_blending_q1::integrateRow0( const std::array< Point3D, 3 >& coords, Matrix< real_t, 1, 3 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t Blending_DF_Triangle_blend_out0_id0 = 0;
      real_t Blending_DF_Triangle_blend_out1_id0 = 0;
      real_t Blending_DF_Triangle_blend_out2_id0 = 0;
      real_t Blending_DF_Triangle_blend_out3_id0 = 0;
      Blending_DF_Triangle_blend( 0.33333333333333343*p_affine_0_0 + 0.33333333333333331*p_affine_1_0 + 0.33333333333333331*p_affine_2_0, 0.33333333333333343*p_affine_0_1 + 0.33333333333333331*p_affine_1_1 + 0.33333333333333331*p_affine_2_1, &Blending_DF_Triangle_blend_out0_id0, &Blending_DF_Triangle_blend_out1_id0, &Blending_DF_Triangle_blend_out2_id0, &Blending_DF_Triangle_blend_out3_id0 );
      real_t tmp_0 = -p_affine_0_1;
      real_t tmp_1 = p_affine_2_1 + tmp_0;
      real_t tmp_2 = Blending_DF_Triangle_blend_out0_id0*Blending_DF_Triangle_blend_out3_id0 - Blending_DF_Triangle_blend_out1_id0*Blending_DF_Triangle_blend_out2_id0;
      real_t tmp_3 = -p_affine_0_0;
      real_t tmp_4 = p_affine_1_0 + tmp_3;
      real_t tmp_5 = 1/(tmp_2*(tmp_1*tmp_4 - (p_affine_1_1 + tmp_0)*(p_affine_2_0 + tmp_3)));
      real_t tmp_6 = Blending_DF_Triangle_blend_out1_id0*tmp_5;
      real_t tmp_7 = tmp_1*tmp_6;
      real_t tmp_8 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_9 = tmp_6*tmp_8;
      real_t tmp_10 = Blending_DF_Triangle_blend_out0_id0*tmp_5;
      real_t tmp_11 = tmp_10*tmp_4;
      real_t tmp_12 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_13 = tmp_10*tmp_12;
      real_t tmp_14 = 0.5*tmp_5;
      real_t tmp_15 = Blending_DF_Triangle_blend_out2_id0*tmp_14;
      real_t tmp_16 = Blending_DF_Triangle_blend_out3_id0*tmp_14;
      real_t tmp_17 = 1.0*(-tmp_1*tmp_16 + tmp_12*tmp_15 + tmp_15*tmp_4 - tmp_16*tmp_8)*std::abs(tmp_2)*std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t a_0_0 = tmp_17*(-1.0*tmp_11 - 1.0*tmp_13 + tmp_7 + tmp_9);
      real_t a_0_1 = tmp_17*(tmp_13 - 1.0*tmp_7);
      real_t a_0_2 = tmp_17*(tmp_11 - 1.0*tmp_9);
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
   }

   void p1_epsiloncc_1_0_blending_q1::integrateAll( const std::array< Point3D, 4 >& coords, Matrix< real_t, 4, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = tmp_1*tmp_3;
      real_t tmp_5 = p_affine_2_0 + tmp_0;
      real_t tmp_6 = p_affine_1_1 + tmp_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = tmp_4 - tmp_7;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_12 = Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_13 = Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_14 = Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_15 = -Blending_DF_Tetrahedron_blend_out0_id0*tmp_12 + Blending_DF_Tetrahedron_blend_out0_id0*tmp_9 + Blending_DF_Tetrahedron_blend_out1_id0*tmp_10 - Blending_DF_Tetrahedron_blend_out1_id0*tmp_13 + Blending_DF_Tetrahedron_blend_out2_id0*tmp_11 - Blending_DF_Tetrahedron_blend_out2_id0*tmp_14;
      real_t tmp_16 = -p_affine_0_2;
      real_t tmp_17 = p_affine_3_2 + tmp_16;
      real_t tmp_18 = p_affine_1_2 + tmp_16;
      real_t tmp_19 = p_affine_3_1 + tmp_2;
      real_t tmp_20 = tmp_19*tmp_5;
      real_t tmp_21 = p_affine_2_2 + tmp_16;
      real_t tmp_22 = p_affine_3_0 + tmp_0;
      real_t tmp_23 = tmp_22*tmp_6;
      real_t tmp_24 = tmp_1*tmp_19;
      real_t tmp_25 = tmp_22*tmp_3;
      real_t tmp_26 = 1/(tmp_15*(tmp_17*tmp_4 - tmp_17*tmp_7 + tmp_18*tmp_20 - tmp_18*tmp_25 + tmp_21*tmp_23 - tmp_21*tmp_24));
      real_t tmp_27 = tmp_26*(-Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out7_id0 + Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out6_id0);
      real_t tmp_28 = tmp_27*tmp_8;
      real_t tmp_29 = tmp_23 - tmp_24;
      real_t tmp_30 = tmp_27*tmp_29;
      real_t tmp_31 = tmp_20 - tmp_25;
      real_t tmp_32 = tmp_27*tmp_31;
      real_t tmp_33 = -tmp_1*tmp_21 + tmp_18*tmp_5;
      real_t tmp_34 = tmp_26*(Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out8_id0 - Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out6_id0);
      real_t tmp_35 = tmp_33*tmp_34;
      real_t tmp_36 = tmp_1*tmp_17 - tmp_18*tmp_22;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = -tmp_17*tmp_5 + tmp_21*tmp_22;
      real_t tmp_39 = tmp_34*tmp_38;
      real_t tmp_40 = -tmp_18*tmp_3 + tmp_21*tmp_6;
      real_t tmp_41 = tmp_26*(-Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out8_id0 + Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out7_id0);
      real_t tmp_42 = tmp_40*tmp_41;
      real_t tmp_43 = -tmp_17*tmp_6 + tmp_18*tmp_19;
      real_t tmp_44 = tmp_41*tmp_43;
      real_t tmp_45 = tmp_17*tmp_3 - tmp_19*tmp_21;
      real_t tmp_46 = tmp_41*tmp_45;
      real_t tmp_47 = -1.0*tmp_28 - 1.0*tmp_30 - 1.0*tmp_32 - 1.0*tmp_35 - 1.0*tmp_37 - 1.0*tmp_39 - 1.0*tmp_42 - 1.0*tmp_44 - 1.0*tmp_46;
      real_t tmp_48 = 0.5*tmp_26;
      real_t tmp_49 = tmp_48*(tmp_11 - tmp_14);
      real_t tmp_50 = tmp_49*tmp_8;
      real_t tmp_51 = tmp_29*tmp_49;
      real_t tmp_52 = tmp_31*tmp_49;
      real_t tmp_53 = tmp_48*(tmp_10 - tmp_13);
      real_t tmp_54 = tmp_33*tmp_53;
      real_t tmp_55 = tmp_36*tmp_53;
      real_t tmp_56 = tmp_38*tmp_53;
      real_t tmp_57 = tmp_48*(-tmp_12 + tmp_9);
      real_t tmp_58 = tmp_40*tmp_57;
      real_t tmp_59 = tmp_43*tmp_57;
      real_t tmp_60 = tmp_45*tmp_57;
      real_t tmp_61 = p_affine_0_0*p_affine_1_1;
      real_t tmp_62 = p_affine_0_0*p_affine_1_2;
      real_t tmp_63 = p_affine_2_1*p_affine_3_2;
      real_t tmp_64 = p_affine_0_1*p_affine_1_0;
      real_t tmp_65 = p_affine_0_1*p_affine_1_2;
      real_t tmp_66 = p_affine_2_2*p_affine_3_0;
      real_t tmp_67 = p_affine_0_2*p_affine_1_0;
      real_t tmp_68 = p_affine_0_2*p_affine_1_1;
      real_t tmp_69 = p_affine_2_0*p_affine_3_1;
      real_t tmp_70 = p_affine_2_2*p_affine_3_1;
      real_t tmp_71 = p_affine_2_0*p_affine_3_2;
      real_t tmp_72 = p_affine_2_1*p_affine_3_0;
      real_t tmp_73 = 0.33333333333333326*std::abs(tmp_15)*std::abs(p_affine_0_0*tmp_63 - p_affine_0_0*tmp_70 + p_affine_0_1*tmp_66 - p_affine_0_1*tmp_71 + p_affine_0_2*tmp_69 - p_affine_0_2*tmp_72 - p_affine_1_0*tmp_63 + p_affine_1_0*tmp_70 - p_affine_1_1*tmp_66 + p_affine_1_1*tmp_71 - p_affine_1_2*tmp_69 + p_affine_1_2*tmp_72 + p_affine_2_0*tmp_65 - p_affine_2_0*tmp_68 - p_affine_2_1*tmp_62 + p_affine_2_1*tmp_67 + p_affine_2_2*tmp_61 - p_affine_2_2*tmp_64 - p_affine_3_0*tmp_65 + p_affine_3_0*tmp_68 + p_affine_3_1*tmp_62 - p_affine_3_1*tmp_67 - p_affine_3_2*tmp_61 + p_affine_3_2*tmp_64);
      real_t tmp_74 = tmp_73*(-tmp_50 - tmp_51 - tmp_52 - tmp_54 - tmp_55 - tmp_56 - tmp_58 - tmp_59 - tmp_60);
      real_t tmp_75 = tmp_32 + tmp_39 + tmp_46;
      real_t tmp_76 = tmp_30 + tmp_37 + tmp_44;
      real_t tmp_77 = tmp_28 + tmp_35 + tmp_42;
      real_t tmp_78 = tmp_73*(tmp_52 + tmp_56 + tmp_60);
      real_t tmp_79 = tmp_73*(tmp_51 + tmp_55 + tmp_59);
      real_t tmp_80 = tmp_73*(tmp_50 + tmp_54 + tmp_58);
      real_t a_0_0 = tmp_47*tmp_74;
      real_t a_0_1 = tmp_74*tmp_75;
      real_t a_0_2 = tmp_74*tmp_76;
      real_t a_0_3 = tmp_74*tmp_77;
      real_t a_1_0 = tmp_47*tmp_78;
      real_t a_1_1 = tmp_75*tmp_78;
      real_t a_1_2 = tmp_76*tmp_78;
      real_t a_1_3 = tmp_77*tmp_78;
      real_t a_2_0 = tmp_47*tmp_79;
      real_t a_2_1 = tmp_75*tmp_79;
      real_t a_2_2 = tmp_76*tmp_79;
      real_t a_2_3 = tmp_77*tmp_79;
      real_t a_3_0 = tmp_47*tmp_80;
      real_t a_3_1 = tmp_75*tmp_80;
      real_t a_3_2 = tmp_76*tmp_80;
      real_t a_3_3 = tmp_77*tmp_80;
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(1, 3)) = a_1_3;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
      (elMat(2, 3)) = a_2_3;
      (elMat(3, 0)) = a_3_0;
      (elMat(3, 1)) = a_3_1;
      (elMat(3, 2)) = a_3_2;
      (elMat(3, 3)) = a_3_3;
   }

   void p1_epsiloncc_1_0_blending_q1::integrateRow0( const std::array< Point3D, 4 >& coords, Matrix< real_t, 1, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = tmp_1*tmp_3;
      real_t tmp_5 = p_affine_2_0 + tmp_0;
      real_t tmp_6 = p_affine_1_1 + tmp_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = tmp_4 - tmp_7;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_12 = Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_13 = Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_14 = Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_15 = -Blending_DF_Tetrahedron_blend_out0_id0*tmp_12 + Blending_DF_Tetrahedron_blend_out0_id0*tmp_9 + Blending_DF_Tetrahedron_blend_out1_id0*tmp_10 - Blending_DF_Tetrahedron_blend_out1_id0*tmp_13 + Blending_DF_Tetrahedron_blend_out2_id0*tmp_11 - Blending_DF_Tetrahedron_blend_out2_id0*tmp_14;
      real_t tmp_16 = -p_affine_0_2;
      real_t tmp_17 = p_affine_3_2 + tmp_16;
      real_t tmp_18 = p_affine_1_2 + tmp_16;
      real_t tmp_19 = p_affine_3_1 + tmp_2;
      real_t tmp_20 = tmp_19*tmp_5;
      real_t tmp_21 = p_affine_2_2 + tmp_16;
      real_t tmp_22 = p_affine_3_0 + tmp_0;
      real_t tmp_23 = tmp_22*tmp_6;
      real_t tmp_24 = tmp_1*tmp_19;
      real_t tmp_25 = tmp_22*tmp_3;
      real_t tmp_26 = 1/(tmp_15*(tmp_17*tmp_4 - tmp_17*tmp_7 + tmp_18*tmp_20 - tmp_18*tmp_25 + tmp_21*tmp_23 - tmp_21*tmp_24));
      real_t tmp_27 = tmp_26*(-Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out7_id0 + Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out6_id0);
      real_t tmp_28 = tmp_27*tmp_8;
      real_t tmp_29 = tmp_23 - tmp_24;
      real_t tmp_30 = tmp_27*tmp_29;
      real_t tmp_31 = tmp_20 - tmp_25;
      real_t tmp_32 = tmp_27*tmp_31;
      real_t tmp_33 = -tmp_1*tmp_21 + tmp_18*tmp_5;
      real_t tmp_34 = tmp_26*(Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out8_id0 - Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out6_id0);
      real_t tmp_35 = tmp_33*tmp_34;
      real_t tmp_36 = tmp_1*tmp_17 - tmp_18*tmp_22;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = -tmp_17*tmp_5 + tmp_21*tmp_22;
      real_t tmp_39 = tmp_34*tmp_38;
      real_t tmp_40 = -tmp_18*tmp_3 + tmp_21*tmp_6;
      real_t tmp_41 = tmp_26*(-Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out8_id0 + Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out7_id0);
      real_t tmp_42 = tmp_40*tmp_41;
      real_t tmp_43 = -tmp_17*tmp_6 + tmp_18*tmp_19;
      real_t tmp_44 = tmp_41*tmp_43;
      real_t tmp_45 = tmp_17*tmp_3 - tmp_19*tmp_21;
      real_t tmp_46 = tmp_41*tmp_45;
      real_t tmp_47 = 0.5*tmp_26;
      real_t tmp_48 = tmp_47*(tmp_11 - tmp_14);
      real_t tmp_49 = tmp_47*(tmp_10 - tmp_13);
      real_t tmp_50 = tmp_47*(-tmp_12 + tmp_9);
      real_t tmp_51 = p_affine_0_0*p_affine_1_1;
      real_t tmp_52 = p_affine_0_0*p_affine_1_2;
      real_t tmp_53 = p_affine_2_1*p_affine_3_2;
      real_t tmp_54 = p_affine_0_1*p_affine_1_0;
      real_t tmp_55 = p_affine_0_1*p_affine_1_2;
      real_t tmp_56 = p_affine_2_2*p_affine_3_0;
      real_t tmp_57 = p_affine_0_2*p_affine_1_0;
      real_t tmp_58 = p_affine_0_2*p_affine_1_1;
      real_t tmp_59 = p_affine_2_0*p_affine_3_1;
      real_t tmp_60 = p_affine_2_2*p_affine_3_1;
      real_t tmp_61 = p_affine_2_0*p_affine_3_2;
      real_t tmp_62 = p_affine_2_1*p_affine_3_0;
      real_t tmp_63 = 0.33333333333333326*(-tmp_29*tmp_48 - tmp_31*tmp_48 - tmp_33*tmp_49 - tmp_36*tmp_49 - tmp_38*tmp_49 - tmp_40*tmp_50 - tmp_43*tmp_50 - tmp_45*tmp_50 - tmp_48*tmp_8)*std::abs(tmp_15)*std::abs(p_affine_0_0*tmp_53 - p_affine_0_0*tmp_60 + p_affine_0_1*tmp_56 - p_affine_0_1*tmp_61 + p_affine_0_2*tmp_59 - p_affine_0_2*tmp_62 - p_affine_1_0*tmp_53 + p_affine_1_0*tmp_60 - p_affine_1_1*tmp_56 + p_affine_1_1*tmp_61 - p_affine_1_2*tmp_59 + p_affine_1_2*tmp_62 + p_affine_2_0*tmp_55 - p_affine_2_0*tmp_58 - p_affine_2_1*tmp_52 + p_affine_2_1*tmp_57 + p_affine_2_2*tmp_51 - p_affine_2_2*tmp_54 - p_affine_3_0*tmp_55 + p_affine_3_0*tmp_58 + p_affine_3_1*tmp_52 - p_affine_3_1*tmp_57 - p_affine_3_2*tmp_51 + p_affine_3_2*tmp_54);
      real_t a_0_0 = tmp_63*(-1.0*tmp_28 - 1.0*tmp_30 - 1.0*tmp_32 - 1.0*tmp_35 - 1.0*tmp_37 - 1.0*tmp_39 - 1.0*tmp_42 - 1.0*tmp_44 - 1.0*tmp_46);
      real_t a_0_1 = tmp_63*(tmp_32 + tmp_39 + tmp_46);
      real_t a_0_2 = tmp_63*(tmp_30 + tmp_37 + tmp_44);
      real_t a_0_3 = tmp_63*(tmp_28 + tmp_35 + tmp_42);
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
   }

   void p1_epsiloncc_1_0_blending_q1::Blending_DF_Triangle_blend( real_t in_0, real_t in_1, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3 ) const
   {
      Point3D  mappedPt( in_0, in_1, 0 );
      Matrix2r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 1, 0 );
      *out_3 = DPsi( 1, 1 );
   }

   void p1_epsiloncc_1_0_blending_q1::Blending_DF_Tetrahedron_blend( real_t in_0, real_t in_1, real_t in_2, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3, real_t * out_4, real_t * out_5, real_t * out_6, real_t * out_7, real_t * out_8 ) const
   {
      Point3D  mappedPt( in_0, in_1, in_2 );
      Matrix3r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 0, 2 );
      *out_3 = DPsi( 1, 0 );
      *out_4 = DPsi( 1, 1 );
      *out_5 = DPsi( 1, 2 );
      *out_6 = DPsi( 2, 0 );
      *out_7 = DPsi( 2, 1 );
      *out_8 = DPsi( 2, 2 );
   }

   void p1_epsiloncc_1_1_blending_q1::integrateAll( const std::array< Point3D, 3 >& coords, Matrix< real_t, 3, 3 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t Blending_DF_Triangle_blend_out0_id0 = 0;
      real_t Blending_DF_Triangle_blend_out1_id0 = 0;
      real_t Blending_DF_Triangle_blend_out2_id0 = 0;
      real_t Blending_DF_Triangle_blend_out3_id0 = 0;
      Blending_DF_Triangle_blend( 0.33333333333333343*p_affine_0_0 + 0.33333333333333331*p_affine_1_0 + 0.33333333333333331*p_affine_2_0, 0.33333333333333343*p_affine_0_1 + 0.33333333333333331*p_affine_1_1 + 0.33333333333333331*p_affine_2_1, &Blending_DF_Triangle_blend_out0_id0, &Blending_DF_Triangle_blend_out1_id0, &Blending_DF_Triangle_blend_out2_id0, &Blending_DF_Triangle_blend_out3_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = Blending_DF_Triangle_blend_out0_id0*Blending_DF_Triangle_blend_out3_id0 - Blending_DF_Triangle_blend_out1_id0*Blending_DF_Triangle_blend_out2_id0;
      real_t tmp_3 = -p_affine_0_1;
      real_t tmp_4 = p_affine_2_1 + tmp_3;
      real_t tmp_5 = 1/(tmp_2*(tmp_1*tmp_4 - (p_affine_1_1 + tmp_3)*(p_affine_2_0 + tmp_0)));
      real_t tmp_6 = Blending_DF_Triangle_blend_out2_id0*tmp_5;
      real_t tmp_7 = tmp_1*tmp_6;
      real_t tmp_8 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_9 = tmp_6*tmp_8;
      real_t tmp_10 = Blending_DF_Triangle_blend_out3_id0*tmp_5;
      real_t tmp_11 = tmp_10*tmp_4;
      real_t tmp_12 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_13 = tmp_10*tmp_12;
      real_t tmp_14 = -1.0*tmp_11 - 1.0*tmp_13 + tmp_7 + tmp_9;
      real_t tmp_15 = 0.5*tmp_7;
      real_t tmp_16 = 0.5*tmp_9;
      real_t tmp_17 = 0.5*tmp_11;
      real_t tmp_18 = 0.5*tmp_13;
      real_t tmp_19 = 2*tmp_15 + 2*tmp_16 - 2*tmp_17 - 2*tmp_18;
      real_t tmp_20 = 2.0*tmp_5;
      real_t tmp_21 = Blending_DF_Triangle_blend_out0_id0*tmp_20;
      real_t tmp_22 = tmp_1*tmp_21;
      real_t tmp_23 = tmp_21*tmp_8;
      real_t tmp_24 = Blending_DF_Triangle_blend_out1_id0*tmp_20;
      real_t tmp_25 = tmp_24*tmp_4;
      real_t tmp_26 = tmp_12*tmp_24;
      real_t tmp_27 = -tmp_22 - tmp_23 + tmp_25 + tmp_26;
      real_t tmp_28 = 1.0*tmp_5;
      real_t tmp_29 = Blending_DF_Triangle_blend_out0_id0*tmp_28;
      real_t tmp_30 = tmp_1*tmp_29;
      real_t tmp_31 = tmp_29*tmp_8;
      real_t tmp_32 = Blending_DF_Triangle_blend_out1_id0*tmp_28;
      real_t tmp_33 = tmp_32*tmp_4;
      real_t tmp_34 = tmp_12*tmp_32;
      real_t tmp_35 = -tmp_30 - tmp_31 + tmp_33 + tmp_34;
      real_t tmp_36 = 0.5*std::abs(tmp_2)*std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_37 = tmp_23 - tmp_25;
      real_t tmp_38 = tmp_11 - 1.0*tmp_9;
      real_t tmp_39 = tmp_22 - tmp_26;
      real_t tmp_40 = tmp_13 - 1.0*tmp_7;
      real_t tmp_41 = -2*tmp_16 + 2*tmp_17;
      real_t tmp_42 = tmp_31 - tmp_33;
      real_t tmp_43 = -2*tmp_15 + 2*tmp_18;
      real_t tmp_44 = tmp_30 - tmp_34;
      real_t a_0_0 = tmp_36*(tmp_14*tmp_19 + tmp_27*tmp_35);
      real_t a_0_1 = tmp_36*(tmp_19*tmp_38 + tmp_35*tmp_37);
      real_t a_0_2 = tmp_36*(tmp_19*tmp_40 + tmp_35*tmp_39);
      real_t a_1_0 = tmp_36*(tmp_14*tmp_41 + tmp_27*tmp_42);
      real_t a_1_1 = tmp_36*(tmp_37*tmp_42 + tmp_38*tmp_41);
      real_t a_1_2 = tmp_36*(tmp_39*tmp_42 + tmp_40*tmp_41);
      real_t a_2_0 = tmp_36*(tmp_14*tmp_43 + tmp_27*tmp_44);
      real_t a_2_1 = tmp_36*(tmp_37*tmp_44 + tmp_38*tmp_43);
      real_t a_2_2 = tmp_36*(tmp_39*tmp_44 + tmp_40*tmp_43);
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
   }

   void p1_epsiloncc_1_1_blending_q1::integrateRow0( const std::array< Point3D, 3 >& coords, Matrix< real_t, 1, 3 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t Blending_DF_Triangle_blend_out0_id0 = 0;
      real_t Blending_DF_Triangle_blend_out1_id0 = 0;
      real_t Blending_DF_Triangle_blend_out2_id0 = 0;
      real_t Blending_DF_Triangle_blend_out3_id0 = 0;
      Blending_DF_Triangle_blend( 0.33333333333333343*p_affine_0_0 + 0.33333333333333331*p_affine_1_0 + 0.33333333333333331*p_affine_2_0, 0.33333333333333343*p_affine_0_1 + 0.33333333333333331*p_affine_1_1 + 0.33333333333333331*p_affine_2_1, &Blending_DF_Triangle_blend_out0_id0, &Blending_DF_Triangle_blend_out1_id0, &Blending_DF_Triangle_blend_out2_id0, &Blending_DF_Triangle_blend_out3_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = Blending_DF_Triangle_blend_out0_id0*Blending_DF_Triangle_blend_out3_id0 - Blending_DF_Triangle_blend_out1_id0*Blending_DF_Triangle_blend_out2_id0;
      real_t tmp_3 = -p_affine_0_1;
      real_t tmp_4 = p_affine_2_1 + tmp_3;
      real_t tmp_5 = 1/(tmp_2*(tmp_1*tmp_4 - (p_affine_1_1 + tmp_3)*(p_affine_2_0 + tmp_0)));
      real_t tmp_6 = Blending_DF_Triangle_blend_out2_id0*tmp_5;
      real_t tmp_7 = tmp_1*tmp_6;
      real_t tmp_8 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_9 = tmp_6*tmp_8;
      real_t tmp_10 = Blending_DF_Triangle_blend_out3_id0*tmp_5;
      real_t tmp_11 = tmp_10*tmp_4;
      real_t tmp_12 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_13 = tmp_10*tmp_12;
      real_t tmp_14 = -1.0*tmp_11 - 1.0*tmp_13 + tmp_7 + tmp_9;
      real_t tmp_15 = 2.0*tmp_5;
      real_t tmp_16 = Blending_DF_Triangle_blend_out0_id0*tmp_15;
      real_t tmp_17 = tmp_1*tmp_16;
      real_t tmp_18 = tmp_16*tmp_8;
      real_t tmp_19 = Blending_DF_Triangle_blend_out1_id0*tmp_15;
      real_t tmp_20 = tmp_19*tmp_4;
      real_t tmp_21 = tmp_12*tmp_19;
      real_t tmp_22 = 1.0*tmp_5;
      real_t tmp_23 = Blending_DF_Triangle_blend_out0_id0*tmp_22;
      real_t tmp_24 = Blending_DF_Triangle_blend_out1_id0*tmp_22;
      real_t tmp_25 = -tmp_1*tmp_23 + tmp_12*tmp_24 - tmp_23*tmp_8 + tmp_24*tmp_4;
      real_t tmp_26 = 0.5*std::abs(tmp_2)*std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t a_0_0 = tmp_26*(tmp_14*(-1.0*tmp_11 - 1.0*tmp_13 + tmp_7 + tmp_9) + tmp_25*(-tmp_17 - tmp_18 + tmp_20 + tmp_21));
      real_t a_0_1 = tmp_26*(tmp_14*(tmp_11 - 1.0*tmp_9) + tmp_25*(tmp_18 - tmp_20));
      real_t a_0_2 = tmp_26*(tmp_14*(tmp_13 - 1.0*tmp_7) + tmp_25*(tmp_17 - tmp_21));
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
   }

   void p1_epsiloncc_1_1_blending_q1::integrateAll( const std::array< Point3D, 4 >& coords, Matrix< real_t, 4, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = p_affine_2_0 + tmp_0;
      real_t tmp_5 = p_affine_1_1 + tmp_2;
      real_t tmp_6 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_7 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_8 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_12 = -Blending_DF_Tetrahedron_blend_out3_id0*tmp_10 + Blending_DF_Tetrahedron_blend_out3_id0*tmp_8 - Blending_DF_Tetrahedron_blend_out4_id0*tmp_11 + Blending_DF_Tetrahedron_blend_out4_id0*tmp_6 + Blending_DF_Tetrahedron_blend_out5_id0*tmp_7 - Blending_DF_Tetrahedron_blend_out5_id0*tmp_9;
      real_t tmp_13 = -p_affine_0_2;
      real_t tmp_14 = p_affine_3_2 + tmp_13;
      real_t tmp_15 = tmp_1*tmp_14;
      real_t tmp_16 = p_affine_3_1 + tmp_2;
      real_t tmp_17 = p_affine_1_2 + tmp_13;
      real_t tmp_18 = tmp_17*tmp_4;
      real_t tmp_19 = p_affine_3_0 + tmp_0;
      real_t tmp_20 = p_affine_2_2 + tmp_13;
      real_t tmp_21 = tmp_19*tmp_20;
      real_t tmp_22 = tmp_1*tmp_20;
      real_t tmp_23 = tmp_14*tmp_4;
      real_t tmp_24 = tmp_17*tmp_19;
      real_t tmp_25 = 1/(tmp_12*(tmp_15*tmp_3 + tmp_16*tmp_18 - tmp_16*tmp_22 + tmp_21*tmp_5 - tmp_23*tmp_5 - tmp_24*tmp_3));
      real_t tmp_26 = tmp_25*(tmp_1*tmp_3 - tmp_4*tmp_5);
      real_t tmp_27 = tmp_7 - tmp_9;
      real_t tmp_28 = 2.0*tmp_27;
      real_t tmp_29 = tmp_26*tmp_28;
      real_t tmp_30 = tmp_25*(-tmp_1*tmp_16 + tmp_19*tmp_5);
      real_t tmp_31 = tmp_28*tmp_30;
      real_t tmp_32 = tmp_25*(tmp_16*tmp_4 - tmp_19*tmp_3);
      real_t tmp_33 = tmp_28*tmp_32;
      real_t tmp_34 = tmp_25*(tmp_18 - tmp_22);
      real_t tmp_35 = -tmp_11 + tmp_6;
      real_t tmp_36 = 2.0*tmp_35;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = tmp_25*(tmp_15 - tmp_24);
      real_t tmp_39 = tmp_36*tmp_38;
      real_t tmp_40 = tmp_25*(tmp_21 - tmp_23);
      real_t tmp_41 = tmp_36*tmp_40;
      real_t tmp_42 = tmp_25*(-tmp_17*tmp_3 + tmp_20*tmp_5);
      real_t tmp_43 = -tmp_10 + tmp_8;
      real_t tmp_44 = 2.0*tmp_43;
      real_t tmp_45 = tmp_42*tmp_44;
      real_t tmp_46 = tmp_25*(-tmp_14*tmp_5 + tmp_16*tmp_17);
      real_t tmp_47 = tmp_44*tmp_46;
      real_t tmp_48 = tmp_25*(tmp_14*tmp_3 - tmp_16*tmp_20);
      real_t tmp_49 = tmp_44*tmp_48;
      real_t tmp_50 = -tmp_29 - tmp_31 - tmp_33 - tmp_37 - tmp_39 - tmp_41 - tmp_45 - tmp_47 - tmp_49;
      real_t tmp_51 = 1.0*tmp_27;
      real_t tmp_52 = tmp_26*tmp_51;
      real_t tmp_53 = tmp_30*tmp_51;
      real_t tmp_54 = tmp_32*tmp_51;
      real_t tmp_55 = 1.0*tmp_35;
      real_t tmp_56 = tmp_34*tmp_55;
      real_t tmp_57 = tmp_38*tmp_55;
      real_t tmp_58 = tmp_40*tmp_55;
      real_t tmp_59 = 1.0*tmp_43;
      real_t tmp_60 = tmp_42*tmp_59;
      real_t tmp_61 = tmp_46*tmp_59;
      real_t tmp_62 = tmp_48*tmp_59;
      real_t tmp_63 = -tmp_52 - tmp_53 - tmp_54 - tmp_56 - tmp_57 - tmp_58 - tmp_60 - tmp_61 - tmp_62;
      real_t tmp_64 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out4_id0 - Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_65 = tmp_26*tmp_64;
      real_t tmp_66 = tmp_30*tmp_64;
      real_t tmp_67 = tmp_32*tmp_64;
      real_t tmp_68 = -Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out5_id0 + Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_69 = tmp_34*tmp_68;
      real_t tmp_70 = tmp_38*tmp_68;
      real_t tmp_71 = tmp_40*tmp_68;
      real_t tmp_72 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out5_id0 - Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out4_id0;
      real_t tmp_73 = tmp_42*tmp_72;
      real_t tmp_74 = tmp_46*tmp_72;
      real_t tmp_75 = tmp_48*tmp_72;
      real_t tmp_76 = -1.0*tmp_65 - 1.0*tmp_66 - 1.0*tmp_67 - 1.0*tmp_69 - 1.0*tmp_70 - 1.0*tmp_71 - 1.0*tmp_73 - 1.0*tmp_74 - 1.0*tmp_75;
      real_t tmp_77 = 0.5*tmp_65;
      real_t tmp_78 = 0.5*tmp_66;
      real_t tmp_79 = 0.5*tmp_67;
      real_t tmp_80 = 0.5*tmp_69;
      real_t tmp_81 = 0.5*tmp_70;
      real_t tmp_82 = 0.5*tmp_71;
      real_t tmp_83 = 0.5*tmp_73;
      real_t tmp_84 = 0.5*tmp_74;
      real_t tmp_85 = 0.5*tmp_75;
      real_t tmp_86 = -2*tmp_77 - 2*tmp_78 - 2*tmp_79 - 2*tmp_80 - 2*tmp_81 - 2*tmp_82 - 2*tmp_83 - 2*tmp_84 - 2*tmp_85;
      real_t tmp_87 = Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out7_id0 - Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_88 = tmp_26*tmp_87;
      real_t tmp_89 = tmp_30*tmp_87;
      real_t tmp_90 = tmp_32*tmp_87;
      real_t tmp_91 = -Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out8_id0 + Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_92 = tmp_34*tmp_91;
      real_t tmp_93 = tmp_38*tmp_91;
      real_t tmp_94 = tmp_40*tmp_91;
      real_t tmp_95 = Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out8_id0 - Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_96 = tmp_42*tmp_95;
      real_t tmp_97 = tmp_46*tmp_95;
      real_t tmp_98 = tmp_48*tmp_95;
      real_t tmp_99 = -1.0*tmp_88 - 1.0*tmp_89 - 1.0*tmp_90 - 1.0*tmp_92 - 1.0*tmp_93 - 1.0*tmp_94 - 1.0*tmp_96 - 1.0*tmp_97 - 1.0*tmp_98;
      real_t tmp_100 = 0.5*tmp_88;
      real_t tmp_101 = 0.5*tmp_89;
      real_t tmp_102 = 0.5*tmp_90;
      real_t tmp_103 = 0.5*tmp_92;
      real_t tmp_104 = 0.5*tmp_93;
      real_t tmp_105 = 0.5*tmp_94;
      real_t tmp_106 = 0.5*tmp_96;
      real_t tmp_107 = 0.5*tmp_97;
      real_t tmp_108 = 0.5*tmp_98;
      real_t tmp_109 = -2*tmp_100 - 2*tmp_101 - 2*tmp_102 - 2*tmp_103 - 2*tmp_104 - 2*tmp_105 - 2*tmp_106 - 2*tmp_107 - 2*tmp_108;
      real_t tmp_110 = p_affine_0_0*p_affine_1_1;
      real_t tmp_111 = p_affine_0_0*p_affine_1_2;
      real_t tmp_112 = p_affine_2_1*p_affine_3_2;
      real_t tmp_113 = p_affine_0_1*p_affine_1_0;
      real_t tmp_114 = p_affine_0_1*p_affine_1_2;
      real_t tmp_115 = p_affine_2_2*p_affine_3_0;
      real_t tmp_116 = p_affine_0_2*p_affine_1_0;
      real_t tmp_117 = p_affine_0_2*p_affine_1_1;
      real_t tmp_118 = p_affine_2_0*p_affine_3_1;
      real_t tmp_119 = p_affine_2_2*p_affine_3_1;
      real_t tmp_120 = p_affine_2_0*p_affine_3_2;
      real_t tmp_121 = p_affine_2_1*p_affine_3_0;
      real_t tmp_122 = 0.16666666666666663*std::abs(tmp_12)*std::abs(p_affine_0_0*tmp_112 - p_affine_0_0*tmp_119 + p_affine_0_1*tmp_115 - p_affine_0_1*tmp_120 + p_affine_0_2*tmp_118 - p_affine_0_2*tmp_121 - p_affine_1_0*tmp_112 + p_affine_1_0*tmp_119 - p_affine_1_1*tmp_115 + p_affine_1_1*tmp_120 - p_affine_1_2*tmp_118 + p_affine_1_2*tmp_121 + p_affine_2_0*tmp_114 - p_affine_2_0*tmp_117 - p_affine_2_1*tmp_111 + p_affine_2_1*tmp_116 + p_affine_2_2*tmp_110 - p_affine_2_2*tmp_113 - p_affine_3_0*tmp_114 + p_affine_3_0*tmp_117 + p_affine_3_1*tmp_111 - p_affine_3_1*tmp_116 - p_affine_3_2*tmp_110 + p_affine_3_2*tmp_113);
      real_t tmp_123 = tmp_67 + tmp_71 + tmp_75;
      real_t tmp_124 = tmp_90 + tmp_94 + tmp_98;
      real_t tmp_125 = tmp_33 + tmp_41 + tmp_49;
      real_t tmp_126 = tmp_66 + tmp_70 + tmp_74;
      real_t tmp_127 = tmp_89 + tmp_93 + tmp_97;
      real_t tmp_128 = tmp_31 + tmp_39 + tmp_47;
      real_t tmp_129 = tmp_65 + tmp_69 + tmp_73;
      real_t tmp_130 = tmp_88 + tmp_92 + tmp_96;
      real_t tmp_131 = tmp_29 + tmp_37 + tmp_45;
      real_t tmp_132 = tmp_54 + tmp_58 + tmp_62;
      real_t tmp_133 = 2*tmp_79 + 2*tmp_82 + 2*tmp_85;
      real_t tmp_134 = 2*tmp_102 + 2*tmp_105 + 2*tmp_108;
      real_t tmp_135 = tmp_53 + tmp_57 + tmp_61;
      real_t tmp_136 = 2*tmp_78 + 2*tmp_81 + 2*tmp_84;
      real_t tmp_137 = 2*tmp_101 + 2*tmp_104 + 2*tmp_107;
      real_t tmp_138 = tmp_52 + tmp_56 + tmp_60;
      real_t tmp_139 = 2*tmp_77 + 2*tmp_80 + 2*tmp_83;
      real_t tmp_140 = 2*tmp_100 + 2*tmp_103 + 2*tmp_106;
      real_t a_0_0 = tmp_122*(tmp_109*tmp_99 + tmp_50*tmp_63 + tmp_76*tmp_86);
      real_t a_0_1 = tmp_122*(tmp_109*tmp_124 + tmp_123*tmp_86 + tmp_125*tmp_63);
      real_t a_0_2 = tmp_122*(tmp_109*tmp_127 + tmp_126*tmp_86 + tmp_128*tmp_63);
      real_t a_0_3 = tmp_122*(tmp_109*tmp_130 + tmp_129*tmp_86 + tmp_131*tmp_63);
      real_t a_1_0 = tmp_122*(tmp_132*tmp_50 + tmp_133*tmp_76 + tmp_134*tmp_99);
      real_t a_1_1 = tmp_122*(tmp_123*tmp_133 + tmp_124*tmp_134 + tmp_125*tmp_132);
      real_t a_1_2 = tmp_122*(tmp_126*tmp_133 + tmp_127*tmp_134 + tmp_128*tmp_132);
      real_t a_1_3 = tmp_122*(tmp_129*tmp_133 + tmp_130*tmp_134 + tmp_131*tmp_132);
      real_t a_2_0 = tmp_122*(tmp_135*tmp_50 + tmp_136*tmp_76 + tmp_137*tmp_99);
      real_t a_2_1 = tmp_122*(tmp_123*tmp_136 + tmp_124*tmp_137 + tmp_125*tmp_135);
      real_t a_2_2 = tmp_122*(tmp_126*tmp_136 + tmp_127*tmp_137 + tmp_128*tmp_135);
      real_t a_2_3 = tmp_122*(tmp_129*tmp_136 + tmp_130*tmp_137 + tmp_131*tmp_135);
      real_t a_3_0 = tmp_122*(tmp_138*tmp_50 + tmp_139*tmp_76 + tmp_140*tmp_99);
      real_t a_3_1 = tmp_122*(tmp_123*tmp_139 + tmp_124*tmp_140 + tmp_125*tmp_138);
      real_t a_3_2 = tmp_122*(tmp_126*tmp_139 + tmp_127*tmp_140 + tmp_128*tmp_138);
      real_t a_3_3 = tmp_122*(tmp_129*tmp_139 + tmp_130*tmp_140 + tmp_131*tmp_138);
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(1, 3)) = a_1_3;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
      (elMat(2, 3)) = a_2_3;
      (elMat(3, 0)) = a_3_0;
      (elMat(3, 1)) = a_3_1;
      (elMat(3, 2)) = a_3_2;
      (elMat(3, 3)) = a_3_3;
   }

   void p1_epsiloncc_1_1_blending_q1::integrateRow0( const std::array< Point3D, 4 >& coords, Matrix< real_t, 1, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = p_affine_2_0 + tmp_0;
      real_t tmp_5 = p_affine_1_1 + tmp_2;
      real_t tmp_6 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_7 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_8 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_12 = -Blending_DF_Tetrahedron_blend_out3_id0*tmp_10 + Blending_DF_Tetrahedron_blend_out3_id0*tmp_8 - Blending_DF_Tetrahedron_blend_out4_id0*tmp_11 + Blending_DF_Tetrahedron_blend_out4_id0*tmp_6 + Blending_DF_Tetrahedron_blend_out5_id0*tmp_7 - Blending_DF_Tetrahedron_blend_out5_id0*tmp_9;
      real_t tmp_13 = -p_affine_0_2;
      real_t tmp_14 = p_affine_3_2 + tmp_13;
      real_t tmp_15 = tmp_1*tmp_14;
      real_t tmp_16 = p_affine_3_1 + tmp_2;
      real_t tmp_17 = p_affine_1_2 + tmp_13;
      real_t tmp_18 = tmp_17*tmp_4;
      real_t tmp_19 = p_affine_3_0 + tmp_0;
      real_t tmp_20 = p_affine_2_2 + tmp_13;
      real_t tmp_21 = tmp_19*tmp_20;
      real_t tmp_22 = tmp_1*tmp_20;
      real_t tmp_23 = tmp_14*tmp_4;
      real_t tmp_24 = tmp_17*tmp_19;
      real_t tmp_25 = 1/(tmp_12*(tmp_15*tmp_3 + tmp_16*tmp_18 - tmp_16*tmp_22 + tmp_21*tmp_5 - tmp_23*tmp_5 - tmp_24*tmp_3));
      real_t tmp_26 = tmp_25*(tmp_1*tmp_3 - tmp_4*tmp_5);
      real_t tmp_27 = tmp_7 - tmp_9;
      real_t tmp_28 = 2.0*tmp_27;
      real_t tmp_29 = tmp_26*tmp_28;
      real_t tmp_30 = tmp_25*(-tmp_1*tmp_16 + tmp_19*tmp_5);
      real_t tmp_31 = tmp_28*tmp_30;
      real_t tmp_32 = tmp_25*(tmp_16*tmp_4 - tmp_19*tmp_3);
      real_t tmp_33 = tmp_28*tmp_32;
      real_t tmp_34 = tmp_25*(tmp_18 - tmp_22);
      real_t tmp_35 = -tmp_11 + tmp_6;
      real_t tmp_36 = 2.0*tmp_35;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = tmp_25*(tmp_15 - tmp_24);
      real_t tmp_39 = tmp_36*tmp_38;
      real_t tmp_40 = tmp_25*(tmp_21 - tmp_23);
      real_t tmp_41 = tmp_36*tmp_40;
      real_t tmp_42 = tmp_25*(-tmp_17*tmp_3 + tmp_20*tmp_5);
      real_t tmp_43 = -tmp_10 + tmp_8;
      real_t tmp_44 = 2.0*tmp_43;
      real_t tmp_45 = tmp_42*tmp_44;
      real_t tmp_46 = tmp_25*(-tmp_14*tmp_5 + tmp_16*tmp_17);
      real_t tmp_47 = tmp_44*tmp_46;
      real_t tmp_48 = tmp_25*(tmp_14*tmp_3 - tmp_16*tmp_20);
      real_t tmp_49 = tmp_44*tmp_48;
      real_t tmp_50 = 1.0*tmp_27;
      real_t tmp_51 = 1.0*tmp_35;
      real_t tmp_52 = 1.0*tmp_43;
      real_t tmp_53 = -tmp_26*tmp_50 - tmp_30*tmp_50 - tmp_32*tmp_50 - tmp_34*tmp_51 - tmp_38*tmp_51 - tmp_40*tmp_51 - tmp_42*tmp_52 - tmp_46*tmp_52 - tmp_48*tmp_52;
      real_t tmp_54 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out4_id0 - Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_55 = tmp_26*tmp_54;
      real_t tmp_56 = tmp_30*tmp_54;
      real_t tmp_57 = tmp_32*tmp_54;
      real_t tmp_58 = -Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out5_id0 + Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_59 = tmp_34*tmp_58;
      real_t tmp_60 = tmp_38*tmp_58;
      real_t tmp_61 = tmp_40*tmp_58;
      real_t tmp_62 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out5_id0 - Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out4_id0;
      real_t tmp_63 = tmp_42*tmp_62;
      real_t tmp_64 = tmp_46*tmp_62;
      real_t tmp_65 = tmp_48*tmp_62;
      real_t tmp_66 = -1.0*tmp_55 - 1.0*tmp_56 - 1.0*tmp_57 - 1.0*tmp_59 - 1.0*tmp_60 - 1.0*tmp_61 - 1.0*tmp_63 - 1.0*tmp_64 - 1.0*tmp_65;
      real_t tmp_67 = Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out7_id0 - Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_68 = tmp_26*tmp_67;
      real_t tmp_69 = tmp_30*tmp_67;
      real_t tmp_70 = tmp_32*tmp_67;
      real_t tmp_71 = -Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out8_id0 + Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_72 = tmp_34*tmp_71;
      real_t tmp_73 = tmp_38*tmp_71;
      real_t tmp_74 = tmp_40*tmp_71;
      real_t tmp_75 = Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out8_id0 - Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_76 = tmp_42*tmp_75;
      real_t tmp_77 = tmp_46*tmp_75;
      real_t tmp_78 = tmp_48*tmp_75;
      real_t tmp_79 = -1.0*tmp_68 - 1.0*tmp_69 - 1.0*tmp_70 - 1.0*tmp_72 - 1.0*tmp_73 - 1.0*tmp_74 - 1.0*tmp_76 - 1.0*tmp_77 - 1.0*tmp_78;
      real_t tmp_80 = p_affine_0_0*p_affine_1_1;
      real_t tmp_81 = p_affine_0_0*p_affine_1_2;
      real_t tmp_82 = p_affine_2_1*p_affine_3_2;
      real_t tmp_83 = p_affine_0_1*p_affine_1_0;
      real_t tmp_84 = p_affine_0_1*p_affine_1_2;
      real_t tmp_85 = p_affine_2_2*p_affine_3_0;
      real_t tmp_86 = p_affine_0_2*p_affine_1_0;
      real_t tmp_87 = p_affine_0_2*p_affine_1_1;
      real_t tmp_88 = p_affine_2_0*p_affine_3_1;
      real_t tmp_89 = p_affine_2_2*p_affine_3_1;
      real_t tmp_90 = p_affine_2_0*p_affine_3_2;
      real_t tmp_91 = p_affine_2_1*p_affine_3_0;
      real_t tmp_92 = 0.16666666666666663*std::abs(tmp_12)*std::abs(p_affine_0_0*tmp_82 - p_affine_0_0*tmp_89 + p_affine_0_1*tmp_85 - p_affine_0_1*tmp_90 + p_affine_0_2*tmp_88 - p_affine_0_2*tmp_91 - p_affine_1_0*tmp_82 + p_affine_1_0*tmp_89 - p_affine_1_1*tmp_85 + p_affine_1_1*tmp_90 - p_affine_1_2*tmp_88 + p_affine_1_2*tmp_91 + p_affine_2_0*tmp_84 - p_affine_2_0*tmp_87 - p_affine_2_1*tmp_81 + p_affine_2_1*tmp_86 + p_affine_2_2*tmp_80 - p_affine_2_2*tmp_83 - p_affine_3_0*tmp_84 + p_affine_3_0*tmp_87 + p_affine_3_1*tmp_81 - p_affine_3_1*tmp_86 - p_affine_3_2*tmp_80 + p_affine_3_2*tmp_83);
      real_t a_0_0 = tmp_92*(tmp_53*(-tmp_29 - tmp_31 - tmp_33 - tmp_37 - tmp_39 - tmp_41 - tmp_45 - tmp_47 - tmp_49) + tmp_66*(-1.0*tmp_55 - 1.0*tmp_56 - 1.0*tmp_57 - 1.0*tmp_59 - 1.0*tmp_60 - 1.0*tmp_61 - 1.0*tmp_63 - 1.0*tmp_64 - 1.0*tmp_65) + tmp_79*(-1.0*tmp_68 - 1.0*tmp_69 - 1.0*tmp_70 - 1.0*tmp_72 - 1.0*tmp_73 - 1.0*tmp_74 - 1.0*tmp_76 - 1.0*tmp_77 - 1.0*tmp_78));
      real_t a_0_1 = tmp_92*(tmp_53*(tmp_33 + tmp_41 + tmp_49) + tmp_66*(tmp_57 + tmp_61 + tmp_65) + tmp_79*(tmp_70 + tmp_74 + tmp_78));
      real_t a_0_2 = tmp_92*(tmp_53*(tmp_31 + tmp_39 + tmp_47) + tmp_66*(tmp_56 + tmp_60 + tmp_64) + tmp_79*(tmp_69 + tmp_73 + tmp_77));
      real_t a_0_3 = tmp_92*(tmp_53*(tmp_29 + tmp_37 + tmp_45) + tmp_66*(tmp_55 + tmp_59 + tmp_63) + tmp_79*(tmp_68 + tmp_72 + tmp_76));
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
   }

   void p1_epsiloncc_1_1_blending_q1::Blending_DF_Triangle_blend( real_t in_0, real_t in_1, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3 ) const
   {
      Point3D  mappedPt( in_0, in_1, 0 );
      Matrix2r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 1, 0 );
      *out_3 = DPsi( 1, 1 );
   }

   void p1_epsiloncc_1_1_blending_q1::Blending_DF_Tetrahedron_blend( real_t in_0, real_t in_1, real_t in_2, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3, real_t * out_4, real_t * out_5, real_t * out_6, real_t * out_7, real_t * out_8 ) const
   {
      Point3D  mappedPt( in_0, in_1, in_2 );
      Matrix3r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 0, 2 );
      *out_3 = DPsi( 1, 0 );
      *out_4 = DPsi( 1, 1 );
      *out_5 = DPsi( 1, 2 );
      *out_6 = DPsi( 2, 0 );
      *out_7 = DPsi( 2, 1 );
      *out_8 = DPsi( 2, 2 );
   }

   void p1_epsiloncc_1_2_blending_q1::integrateAll( const std::array< Point3D, 3 >& , Matrix< real_t, 3, 3 >&  ) const
   {
      
   }

   void p1_epsiloncc_1_2_blending_q1::integrateRow0( const std::array< Point3D, 3 >& , Matrix< real_t, 1, 3 >&  ) const
   {
      
   }

   void p1_epsiloncc_1_2_blending_q1::integrateAll( const std::array< Point3D, 4 >& coords, Matrix< real_t, 4, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = tmp_1*tmp_3;
      real_t tmp_5 = p_affine_2_0 + tmp_0;
      real_t tmp_6 = p_affine_1_1 + tmp_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = tmp_4 - tmp_7;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out4_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out5_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_12 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out5_id0;
      real_t tmp_13 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_14 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out4_id0;
      real_t tmp_15 = Blending_DF_Tetrahedron_blend_out6_id0*tmp_10 - Blending_DF_Tetrahedron_blend_out6_id0*tmp_14 + Blending_DF_Tetrahedron_blend_out7_id0*tmp_11 - Blending_DF_Tetrahedron_blend_out7_id0*tmp_12 - Blending_DF_Tetrahedron_blend_out8_id0*tmp_13 + Blending_DF_Tetrahedron_blend_out8_id0*tmp_9;
      real_t tmp_16 = -p_affine_0_2;
      real_t tmp_17 = p_affine_3_2 + tmp_16;
      real_t tmp_18 = p_affine_1_2 + tmp_16;
      real_t tmp_19 = p_affine_3_1 + tmp_2;
      real_t tmp_20 = tmp_19*tmp_5;
      real_t tmp_21 = p_affine_2_2 + tmp_16;
      real_t tmp_22 = p_affine_3_0 + tmp_0;
      real_t tmp_23 = tmp_22*tmp_6;
      real_t tmp_24 = tmp_1*tmp_19;
      real_t tmp_25 = tmp_22*tmp_3;
      real_t tmp_26 = 1/(tmp_15*(tmp_17*tmp_4 - tmp_17*tmp_7 + tmp_18*tmp_20 - tmp_18*tmp_25 + tmp_21*tmp_23 - tmp_21*tmp_24));
      real_t tmp_27 = tmp_26*(-Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out7_id0 + Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out6_id0);
      real_t tmp_28 = tmp_27*tmp_8;
      real_t tmp_29 = tmp_23 - tmp_24;
      real_t tmp_30 = tmp_27*tmp_29;
      real_t tmp_31 = tmp_20 - tmp_25;
      real_t tmp_32 = tmp_27*tmp_31;
      real_t tmp_33 = -tmp_1*tmp_21 + tmp_18*tmp_5;
      real_t tmp_34 = tmp_26*(Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out8_id0 - Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out6_id0);
      real_t tmp_35 = tmp_33*tmp_34;
      real_t tmp_36 = tmp_1*tmp_17 - tmp_18*tmp_22;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = -tmp_17*tmp_5 + tmp_21*tmp_22;
      real_t tmp_39 = tmp_34*tmp_38;
      real_t tmp_40 = -tmp_18*tmp_3 + tmp_21*tmp_6;
      real_t tmp_41 = tmp_26*(-Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out8_id0 + Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out7_id0);
      real_t tmp_42 = tmp_40*tmp_41;
      real_t tmp_43 = -tmp_17*tmp_6 + tmp_18*tmp_19;
      real_t tmp_44 = tmp_41*tmp_43;
      real_t tmp_45 = tmp_17*tmp_3 - tmp_19*tmp_21;
      real_t tmp_46 = tmp_41*tmp_45;
      real_t tmp_47 = -1.0*tmp_28 - 1.0*tmp_30 - 1.0*tmp_32 - 1.0*tmp_35 - 1.0*tmp_37 - 1.0*tmp_39 - 1.0*tmp_42 - 1.0*tmp_44 - 1.0*tmp_46;
      real_t tmp_48 = 0.5*tmp_26;
      real_t tmp_49 = tmp_48*(-tmp_13 + tmp_9);
      real_t tmp_50 = tmp_49*tmp_8;
      real_t tmp_51 = tmp_29*tmp_49;
      real_t tmp_52 = tmp_31*tmp_49;
      real_t tmp_53 = tmp_48*(tmp_11 - tmp_12);
      real_t tmp_54 = tmp_33*tmp_53;
      real_t tmp_55 = tmp_36*tmp_53;
      real_t tmp_56 = tmp_38*tmp_53;
      real_t tmp_57 = tmp_48*(tmp_10 - tmp_14);
      real_t tmp_58 = tmp_40*tmp_57;
      real_t tmp_59 = tmp_43*tmp_57;
      real_t tmp_60 = tmp_45*tmp_57;
      real_t tmp_61 = p_affine_0_0*p_affine_1_1;
      real_t tmp_62 = p_affine_0_0*p_affine_1_2;
      real_t tmp_63 = p_affine_2_1*p_affine_3_2;
      real_t tmp_64 = p_affine_0_1*p_affine_1_0;
      real_t tmp_65 = p_affine_0_1*p_affine_1_2;
      real_t tmp_66 = p_affine_2_2*p_affine_3_0;
      real_t tmp_67 = p_affine_0_2*p_affine_1_0;
      real_t tmp_68 = p_affine_0_2*p_affine_1_1;
      real_t tmp_69 = p_affine_2_0*p_affine_3_1;
      real_t tmp_70 = p_affine_2_2*p_affine_3_1;
      real_t tmp_71 = p_affine_2_0*p_affine_3_2;
      real_t tmp_72 = p_affine_2_1*p_affine_3_0;
      real_t tmp_73 = 0.33333333333333326*std::abs(tmp_15)*std::abs(p_affine_0_0*tmp_63 - p_affine_0_0*tmp_70 + p_affine_0_1*tmp_66 - p_affine_0_1*tmp_71 + p_affine_0_2*tmp_69 - p_affine_0_2*tmp_72 - p_affine_1_0*tmp_63 + p_affine_1_0*tmp_70 - p_affine_1_1*tmp_66 + p_affine_1_1*tmp_71 - p_affine_1_2*tmp_69 + p_affine_1_2*tmp_72 + p_affine_2_0*tmp_65 - p_affine_2_0*tmp_68 - p_affine_2_1*tmp_62 + p_affine_2_1*tmp_67 + p_affine_2_2*tmp_61 - p_affine_2_2*tmp_64 - p_affine_3_0*tmp_65 + p_affine_3_0*tmp_68 + p_affine_3_1*tmp_62 - p_affine_3_1*tmp_67 - p_affine_3_2*tmp_61 + p_affine_3_2*tmp_64);
      real_t tmp_74 = tmp_73*(-tmp_50 - tmp_51 - tmp_52 - tmp_54 - tmp_55 - tmp_56 - tmp_58 - tmp_59 - tmp_60);
      real_t tmp_75 = tmp_32 + tmp_39 + tmp_46;
      real_t tmp_76 = tmp_30 + tmp_37 + tmp_44;
      real_t tmp_77 = tmp_28 + tmp_35 + tmp_42;
      real_t tmp_78 = tmp_73*(tmp_52 + tmp_56 + tmp_60);
      real_t tmp_79 = tmp_73*(tmp_51 + tmp_55 + tmp_59);
      real_t tmp_80 = tmp_73*(tmp_50 + tmp_54 + tmp_58);
      real_t a_0_0 = tmp_47*tmp_74;
      real_t a_0_1 = tmp_74*tmp_75;
      real_t a_0_2 = tmp_74*tmp_76;
      real_t a_0_3 = tmp_74*tmp_77;
      real_t a_1_0 = tmp_47*tmp_78;
      real_t a_1_1 = tmp_75*tmp_78;
      real_t a_1_2 = tmp_76*tmp_78;
      real_t a_1_3 = tmp_77*tmp_78;
      real_t a_2_0 = tmp_47*tmp_79;
      real_t a_2_1 = tmp_75*tmp_79;
      real_t a_2_2 = tmp_76*tmp_79;
      real_t a_2_3 = tmp_77*tmp_79;
      real_t a_3_0 = tmp_47*tmp_80;
      real_t a_3_1 = tmp_75*tmp_80;
      real_t a_3_2 = tmp_76*tmp_80;
      real_t a_3_3 = tmp_77*tmp_80;
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(1, 3)) = a_1_3;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
      (elMat(2, 3)) = a_2_3;
      (elMat(3, 0)) = a_3_0;
      (elMat(3, 1)) = a_3_1;
      (elMat(3, 2)) = a_3_2;
      (elMat(3, 3)) = a_3_3;
   }

   void p1_epsiloncc_1_2_blending_q1::integrateRow0( const std::array< Point3D, 4 >& coords, Matrix< real_t, 1, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = tmp_1*tmp_3;
      real_t tmp_5 = p_affine_2_0 + tmp_0;
      real_t tmp_6 = p_affine_1_1 + tmp_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = tmp_4 - tmp_7;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out4_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out5_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_12 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out5_id0;
      real_t tmp_13 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_14 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out4_id0;
      real_t tmp_15 = Blending_DF_Tetrahedron_blend_out6_id0*tmp_10 - Blending_DF_Tetrahedron_blend_out6_id0*tmp_14 + Blending_DF_Tetrahedron_blend_out7_id0*tmp_11 - Blending_DF_Tetrahedron_blend_out7_id0*tmp_12 - Blending_DF_Tetrahedron_blend_out8_id0*tmp_13 + Blending_DF_Tetrahedron_blend_out8_id0*tmp_9;
      real_t tmp_16 = -p_affine_0_2;
      real_t tmp_17 = p_affine_3_2 + tmp_16;
      real_t tmp_18 = p_affine_1_2 + tmp_16;
      real_t tmp_19 = p_affine_3_1 + tmp_2;
      real_t tmp_20 = tmp_19*tmp_5;
      real_t tmp_21 = p_affine_2_2 + tmp_16;
      real_t tmp_22 = p_affine_3_0 + tmp_0;
      real_t tmp_23 = tmp_22*tmp_6;
      real_t tmp_24 = tmp_1*tmp_19;
      real_t tmp_25 = tmp_22*tmp_3;
      real_t tmp_26 = 1/(tmp_15*(tmp_17*tmp_4 - tmp_17*tmp_7 + tmp_18*tmp_20 - tmp_18*tmp_25 + tmp_21*tmp_23 - tmp_21*tmp_24));
      real_t tmp_27 = tmp_26*(-Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out7_id0 + Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out6_id0);
      real_t tmp_28 = tmp_27*tmp_8;
      real_t tmp_29 = tmp_23 - tmp_24;
      real_t tmp_30 = tmp_27*tmp_29;
      real_t tmp_31 = tmp_20 - tmp_25;
      real_t tmp_32 = tmp_27*tmp_31;
      real_t tmp_33 = -tmp_1*tmp_21 + tmp_18*tmp_5;
      real_t tmp_34 = tmp_26*(Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out8_id0 - Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out6_id0);
      real_t tmp_35 = tmp_33*tmp_34;
      real_t tmp_36 = tmp_1*tmp_17 - tmp_18*tmp_22;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = -tmp_17*tmp_5 + tmp_21*tmp_22;
      real_t tmp_39 = tmp_34*tmp_38;
      real_t tmp_40 = -tmp_18*tmp_3 + tmp_21*tmp_6;
      real_t tmp_41 = tmp_26*(-Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out8_id0 + Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out7_id0);
      real_t tmp_42 = tmp_40*tmp_41;
      real_t tmp_43 = -tmp_17*tmp_6 + tmp_18*tmp_19;
      real_t tmp_44 = tmp_41*tmp_43;
      real_t tmp_45 = tmp_17*tmp_3 - tmp_19*tmp_21;
      real_t tmp_46 = tmp_41*tmp_45;
      real_t tmp_47 = 0.5*tmp_26;
      real_t tmp_48 = tmp_47*(-tmp_13 + tmp_9);
      real_t tmp_49 = tmp_47*(tmp_11 - tmp_12);
      real_t tmp_50 = tmp_47*(tmp_10 - tmp_14);
      real_t tmp_51 = p_affine_0_0*p_affine_1_1;
      real_t tmp_52 = p_affine_0_0*p_affine_1_2;
      real_t tmp_53 = p_affine_2_1*p_affine_3_2;
      real_t tmp_54 = p_affine_0_1*p_affine_1_0;
      real_t tmp_55 = p_affine_0_1*p_affine_1_2;
      real_t tmp_56 = p_affine_2_2*p_affine_3_0;
      real_t tmp_57 = p_affine_0_2*p_affine_1_0;
      real_t tmp_58 = p_affine_0_2*p_affine_1_1;
      real_t tmp_59 = p_affine_2_0*p_affine_3_1;
      real_t tmp_60 = p_affine_2_2*p_affine_3_1;
      real_t tmp_61 = p_affine_2_0*p_affine_3_2;
      real_t tmp_62 = p_affine_2_1*p_affine_3_0;
      real_t tmp_63 = 0.33333333333333326*(-tmp_29*tmp_48 - tmp_31*tmp_48 - tmp_33*tmp_49 - tmp_36*tmp_49 - tmp_38*tmp_49 - tmp_40*tmp_50 - tmp_43*tmp_50 - tmp_45*tmp_50 - tmp_48*tmp_8)*std::abs(tmp_15)*std::abs(p_affine_0_0*tmp_53 - p_affine_0_0*tmp_60 + p_affine_0_1*tmp_56 - p_affine_0_1*tmp_61 + p_affine_0_2*tmp_59 - p_affine_0_2*tmp_62 - p_affine_1_0*tmp_53 + p_affine_1_0*tmp_60 - p_affine_1_1*tmp_56 + p_affine_1_1*tmp_61 - p_affine_1_2*tmp_59 + p_affine_1_2*tmp_62 + p_affine_2_0*tmp_55 - p_affine_2_0*tmp_58 - p_affine_2_1*tmp_52 + p_affine_2_1*tmp_57 + p_affine_2_2*tmp_51 - p_affine_2_2*tmp_54 - p_affine_3_0*tmp_55 + p_affine_3_0*tmp_58 + p_affine_3_1*tmp_52 - p_affine_3_1*tmp_57 - p_affine_3_2*tmp_51 + p_affine_3_2*tmp_54);
      real_t a_0_0 = tmp_63*(-1.0*tmp_28 - 1.0*tmp_30 - 1.0*tmp_32 - 1.0*tmp_35 - 1.0*tmp_37 - 1.0*tmp_39 - 1.0*tmp_42 - 1.0*tmp_44 - 1.0*tmp_46);
      real_t a_0_1 = tmp_63*(tmp_32 + tmp_39 + tmp_46);
      real_t a_0_2 = tmp_63*(tmp_30 + tmp_37 + tmp_44);
      real_t a_0_3 = tmp_63*(tmp_28 + tmp_35 + tmp_42);
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
   }

   void p1_epsiloncc_1_2_blending_q1::Blending_DF_Tetrahedron_blend( real_t in_0, real_t in_1, real_t in_2, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3, real_t * out_4, real_t * out_5, real_t * out_6, real_t * out_7, real_t * out_8 ) const
   {
      Point3D  mappedPt( in_0, in_1, in_2 );
      Matrix3r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 0, 2 );
      *out_3 = DPsi( 1, 0 );
      *out_4 = DPsi( 1, 1 );
      *out_5 = DPsi( 1, 2 );
      *out_6 = DPsi( 2, 0 );
      *out_7 = DPsi( 2, 1 );
      *out_8 = DPsi( 2, 2 );
   }

   void p1_epsiloncc_2_0_blending_q1::integrateAll( const std::array< Point3D, 3 >& , Matrix< real_t, 3, 3 >&  ) const
   {
      
   }

   void p1_epsiloncc_2_0_blending_q1::integrateRow0( const std::array< Point3D, 3 >& , Matrix< real_t, 1, 3 >&  ) const
   {
      
   }

   void p1_epsiloncc_2_0_blending_q1::integrateAll( const std::array< Point3D, 4 >& coords, Matrix< real_t, 4, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = tmp_1*tmp_3;
      real_t tmp_5 = p_affine_2_0 + tmp_0;
      real_t tmp_6 = p_affine_1_1 + tmp_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = tmp_4 - tmp_7;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_12 = Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_13 = Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_14 = Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_15 = -Blending_DF_Tetrahedron_blend_out0_id0*tmp_12 + Blending_DF_Tetrahedron_blend_out0_id0*tmp_9 + Blending_DF_Tetrahedron_blend_out1_id0*tmp_10 - Blending_DF_Tetrahedron_blend_out1_id0*tmp_13 + Blending_DF_Tetrahedron_blend_out2_id0*tmp_11 - Blending_DF_Tetrahedron_blend_out2_id0*tmp_14;
      real_t tmp_16 = -p_affine_0_2;
      real_t tmp_17 = p_affine_3_2 + tmp_16;
      real_t tmp_18 = p_affine_1_2 + tmp_16;
      real_t tmp_19 = p_affine_3_1 + tmp_2;
      real_t tmp_20 = tmp_19*tmp_5;
      real_t tmp_21 = p_affine_2_2 + tmp_16;
      real_t tmp_22 = p_affine_3_0 + tmp_0;
      real_t tmp_23 = tmp_22*tmp_6;
      real_t tmp_24 = tmp_1*tmp_19;
      real_t tmp_25 = tmp_22*tmp_3;
      real_t tmp_26 = 1/(tmp_15*(tmp_17*tmp_4 - tmp_17*tmp_7 + tmp_18*tmp_20 - tmp_18*tmp_25 + tmp_21*tmp_23 - tmp_21*tmp_24));
      real_t tmp_27 = tmp_26*(Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out4_id0 - Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out3_id0);
      real_t tmp_28 = tmp_27*tmp_8;
      real_t tmp_29 = tmp_23 - tmp_24;
      real_t tmp_30 = tmp_27*tmp_29;
      real_t tmp_31 = tmp_20 - tmp_25;
      real_t tmp_32 = tmp_27*tmp_31;
      real_t tmp_33 = -tmp_1*tmp_21 + tmp_18*tmp_5;
      real_t tmp_34 = tmp_26*(-Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out5_id0 + Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out3_id0);
      real_t tmp_35 = tmp_33*tmp_34;
      real_t tmp_36 = tmp_1*tmp_17 - tmp_18*tmp_22;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = -tmp_17*tmp_5 + tmp_21*tmp_22;
      real_t tmp_39 = tmp_34*tmp_38;
      real_t tmp_40 = -tmp_18*tmp_3 + tmp_21*tmp_6;
      real_t tmp_41 = tmp_26*(Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out5_id0 - Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out4_id0);
      real_t tmp_42 = tmp_40*tmp_41;
      real_t tmp_43 = -tmp_17*tmp_6 + tmp_18*tmp_19;
      real_t tmp_44 = tmp_41*tmp_43;
      real_t tmp_45 = tmp_17*tmp_3 - tmp_19*tmp_21;
      real_t tmp_46 = tmp_41*tmp_45;
      real_t tmp_47 = -1.0*tmp_28 - 1.0*tmp_30 - 1.0*tmp_32 - 1.0*tmp_35 - 1.0*tmp_37 - 1.0*tmp_39 - 1.0*tmp_42 - 1.0*tmp_44 - 1.0*tmp_46;
      real_t tmp_48 = 0.5*tmp_26;
      real_t tmp_49 = tmp_48*(tmp_11 - tmp_14);
      real_t tmp_50 = tmp_49*tmp_8;
      real_t tmp_51 = tmp_29*tmp_49;
      real_t tmp_52 = tmp_31*tmp_49;
      real_t tmp_53 = tmp_48*(tmp_10 - tmp_13);
      real_t tmp_54 = tmp_33*tmp_53;
      real_t tmp_55 = tmp_36*tmp_53;
      real_t tmp_56 = tmp_38*tmp_53;
      real_t tmp_57 = tmp_48*(-tmp_12 + tmp_9);
      real_t tmp_58 = tmp_40*tmp_57;
      real_t tmp_59 = tmp_43*tmp_57;
      real_t tmp_60 = tmp_45*tmp_57;
      real_t tmp_61 = p_affine_0_0*p_affine_1_1;
      real_t tmp_62 = p_affine_0_0*p_affine_1_2;
      real_t tmp_63 = p_affine_2_1*p_affine_3_2;
      real_t tmp_64 = p_affine_0_1*p_affine_1_0;
      real_t tmp_65 = p_affine_0_1*p_affine_1_2;
      real_t tmp_66 = p_affine_2_2*p_affine_3_0;
      real_t tmp_67 = p_affine_0_2*p_affine_1_0;
      real_t tmp_68 = p_affine_0_2*p_affine_1_1;
      real_t tmp_69 = p_affine_2_0*p_affine_3_1;
      real_t tmp_70 = p_affine_2_2*p_affine_3_1;
      real_t tmp_71 = p_affine_2_0*p_affine_3_2;
      real_t tmp_72 = p_affine_2_1*p_affine_3_0;
      real_t tmp_73 = 0.33333333333333326*std::abs(tmp_15)*std::abs(p_affine_0_0*tmp_63 - p_affine_0_0*tmp_70 + p_affine_0_1*tmp_66 - p_affine_0_1*tmp_71 + p_affine_0_2*tmp_69 - p_affine_0_2*tmp_72 - p_affine_1_0*tmp_63 + p_affine_1_0*tmp_70 - p_affine_1_1*tmp_66 + p_affine_1_1*tmp_71 - p_affine_1_2*tmp_69 + p_affine_1_2*tmp_72 + p_affine_2_0*tmp_65 - p_affine_2_0*tmp_68 - p_affine_2_1*tmp_62 + p_affine_2_1*tmp_67 + p_affine_2_2*tmp_61 - p_affine_2_2*tmp_64 - p_affine_3_0*tmp_65 + p_affine_3_0*tmp_68 + p_affine_3_1*tmp_62 - p_affine_3_1*tmp_67 - p_affine_3_2*tmp_61 + p_affine_3_2*tmp_64);
      real_t tmp_74 = tmp_73*(-tmp_50 - tmp_51 - tmp_52 - tmp_54 - tmp_55 - tmp_56 - tmp_58 - tmp_59 - tmp_60);
      real_t tmp_75 = tmp_32 + tmp_39 + tmp_46;
      real_t tmp_76 = tmp_30 + tmp_37 + tmp_44;
      real_t tmp_77 = tmp_28 + tmp_35 + tmp_42;
      real_t tmp_78 = tmp_73*(tmp_52 + tmp_56 + tmp_60);
      real_t tmp_79 = tmp_73*(tmp_51 + tmp_55 + tmp_59);
      real_t tmp_80 = tmp_73*(tmp_50 + tmp_54 + tmp_58);
      real_t a_0_0 = tmp_47*tmp_74;
      real_t a_0_1 = tmp_74*tmp_75;
      real_t a_0_2 = tmp_74*tmp_76;
      real_t a_0_3 = tmp_74*tmp_77;
      real_t a_1_0 = tmp_47*tmp_78;
      real_t a_1_1 = tmp_75*tmp_78;
      real_t a_1_2 = tmp_76*tmp_78;
      real_t a_1_3 = tmp_77*tmp_78;
      real_t a_2_0 = tmp_47*tmp_79;
      real_t a_2_1 = tmp_75*tmp_79;
      real_t a_2_2 = tmp_76*tmp_79;
      real_t a_2_3 = tmp_77*tmp_79;
      real_t a_3_0 = tmp_47*tmp_80;
      real_t a_3_1 = tmp_75*tmp_80;
      real_t a_3_2 = tmp_76*tmp_80;
      real_t a_3_3 = tmp_77*tmp_80;
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(1, 3)) = a_1_3;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
      (elMat(2, 3)) = a_2_3;
      (elMat(3, 0)) = a_3_0;
      (elMat(3, 1)) = a_3_1;
      (elMat(3, 2)) = a_3_2;
      (elMat(3, 3)) = a_3_3;
   }

   void p1_epsiloncc_2_0_blending_q1::integrateRow0( const std::array< Point3D, 4 >& coords, Matrix< real_t, 1, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = tmp_1*tmp_3;
      real_t tmp_5 = p_affine_2_0 + tmp_0;
      real_t tmp_6 = p_affine_1_1 + tmp_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = tmp_4 - tmp_7;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_12 = Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_13 = Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_14 = Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_15 = -Blending_DF_Tetrahedron_blend_out0_id0*tmp_12 + Blending_DF_Tetrahedron_blend_out0_id0*tmp_9 + Blending_DF_Tetrahedron_blend_out1_id0*tmp_10 - Blending_DF_Tetrahedron_blend_out1_id0*tmp_13 + Blending_DF_Tetrahedron_blend_out2_id0*tmp_11 - Blending_DF_Tetrahedron_blend_out2_id0*tmp_14;
      real_t tmp_16 = -p_affine_0_2;
      real_t tmp_17 = p_affine_3_2 + tmp_16;
      real_t tmp_18 = p_affine_1_2 + tmp_16;
      real_t tmp_19 = p_affine_3_1 + tmp_2;
      real_t tmp_20 = tmp_19*tmp_5;
      real_t tmp_21 = p_affine_2_2 + tmp_16;
      real_t tmp_22 = p_affine_3_0 + tmp_0;
      real_t tmp_23 = tmp_22*tmp_6;
      real_t tmp_24 = tmp_1*tmp_19;
      real_t tmp_25 = tmp_22*tmp_3;
      real_t tmp_26 = 1/(tmp_15*(tmp_17*tmp_4 - tmp_17*tmp_7 + tmp_18*tmp_20 - tmp_18*tmp_25 + tmp_21*tmp_23 - tmp_21*tmp_24));
      real_t tmp_27 = tmp_26*(Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out4_id0 - Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out3_id0);
      real_t tmp_28 = tmp_27*tmp_8;
      real_t tmp_29 = tmp_23 - tmp_24;
      real_t tmp_30 = tmp_27*tmp_29;
      real_t tmp_31 = tmp_20 - tmp_25;
      real_t tmp_32 = tmp_27*tmp_31;
      real_t tmp_33 = -tmp_1*tmp_21 + tmp_18*tmp_5;
      real_t tmp_34 = tmp_26*(-Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out5_id0 + Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out3_id0);
      real_t tmp_35 = tmp_33*tmp_34;
      real_t tmp_36 = tmp_1*tmp_17 - tmp_18*tmp_22;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = -tmp_17*tmp_5 + tmp_21*tmp_22;
      real_t tmp_39 = tmp_34*tmp_38;
      real_t tmp_40 = -tmp_18*tmp_3 + tmp_21*tmp_6;
      real_t tmp_41 = tmp_26*(Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out5_id0 - Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out4_id0);
      real_t tmp_42 = tmp_40*tmp_41;
      real_t tmp_43 = -tmp_17*tmp_6 + tmp_18*tmp_19;
      real_t tmp_44 = tmp_41*tmp_43;
      real_t tmp_45 = tmp_17*tmp_3 - tmp_19*tmp_21;
      real_t tmp_46 = tmp_41*tmp_45;
      real_t tmp_47 = 0.5*tmp_26;
      real_t tmp_48 = tmp_47*(tmp_11 - tmp_14);
      real_t tmp_49 = tmp_47*(tmp_10 - tmp_13);
      real_t tmp_50 = tmp_47*(-tmp_12 + tmp_9);
      real_t tmp_51 = p_affine_0_0*p_affine_1_1;
      real_t tmp_52 = p_affine_0_0*p_affine_1_2;
      real_t tmp_53 = p_affine_2_1*p_affine_3_2;
      real_t tmp_54 = p_affine_0_1*p_affine_1_0;
      real_t tmp_55 = p_affine_0_1*p_affine_1_2;
      real_t tmp_56 = p_affine_2_2*p_affine_3_0;
      real_t tmp_57 = p_affine_0_2*p_affine_1_0;
      real_t tmp_58 = p_affine_0_2*p_affine_1_1;
      real_t tmp_59 = p_affine_2_0*p_affine_3_1;
      real_t tmp_60 = p_affine_2_2*p_affine_3_1;
      real_t tmp_61 = p_affine_2_0*p_affine_3_2;
      real_t tmp_62 = p_affine_2_1*p_affine_3_0;
      real_t tmp_63 = 0.33333333333333326*(-tmp_29*tmp_48 - tmp_31*tmp_48 - tmp_33*tmp_49 - tmp_36*tmp_49 - tmp_38*tmp_49 - tmp_40*tmp_50 - tmp_43*tmp_50 - tmp_45*tmp_50 - tmp_48*tmp_8)*std::abs(tmp_15)*std::abs(p_affine_0_0*tmp_53 - p_affine_0_0*tmp_60 + p_affine_0_1*tmp_56 - p_affine_0_1*tmp_61 + p_affine_0_2*tmp_59 - p_affine_0_2*tmp_62 - p_affine_1_0*tmp_53 + p_affine_1_0*tmp_60 - p_affine_1_1*tmp_56 + p_affine_1_1*tmp_61 - p_affine_1_2*tmp_59 + p_affine_1_2*tmp_62 + p_affine_2_0*tmp_55 - p_affine_2_0*tmp_58 - p_affine_2_1*tmp_52 + p_affine_2_1*tmp_57 + p_affine_2_2*tmp_51 - p_affine_2_2*tmp_54 - p_affine_3_0*tmp_55 + p_affine_3_0*tmp_58 + p_affine_3_1*tmp_52 - p_affine_3_1*tmp_57 - p_affine_3_2*tmp_51 + p_affine_3_2*tmp_54);
      real_t a_0_0 = tmp_63*(-1.0*tmp_28 - 1.0*tmp_30 - 1.0*tmp_32 - 1.0*tmp_35 - 1.0*tmp_37 - 1.0*tmp_39 - 1.0*tmp_42 - 1.0*tmp_44 - 1.0*tmp_46);
      real_t a_0_1 = tmp_63*(tmp_32 + tmp_39 + tmp_46);
      real_t a_0_2 = tmp_63*(tmp_30 + tmp_37 + tmp_44);
      real_t a_0_3 = tmp_63*(tmp_28 + tmp_35 + tmp_42);
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
   }

   void p1_epsiloncc_2_0_blending_q1::Blending_DF_Tetrahedron_blend( real_t in_0, real_t in_1, real_t in_2, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3, real_t * out_4, real_t * out_5, real_t * out_6, real_t * out_7, real_t * out_8 ) const
   {
      Point3D  mappedPt( in_0, in_1, in_2 );
      Matrix3r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 0, 2 );
      *out_3 = DPsi( 1, 0 );
      *out_4 = DPsi( 1, 1 );
      *out_5 = DPsi( 1, 2 );
      *out_6 = DPsi( 2, 0 );
      *out_7 = DPsi( 2, 1 );
      *out_8 = DPsi( 2, 2 );
   }

   void p1_epsiloncc_2_1_blending_q1::integrateAll( const std::array< Point3D, 3 >& , Matrix< real_t, 3, 3 >&  ) const
   {
      
   }

   void p1_epsiloncc_2_1_blending_q1::integrateRow0( const std::array< Point3D, 3 >& , Matrix< real_t, 1, 3 >&  ) const
   {
      
   }

   void p1_epsiloncc_2_1_blending_q1::integrateAll( const std::array< Point3D, 4 >& coords, Matrix< real_t, 4, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = p_affine_2_0 + tmp_0;
      real_t tmp_5 = p_affine_1_1 + tmp_2;
      real_t tmp_6 = tmp_1*tmp_3 - tmp_4*tmp_5;
      real_t tmp_7 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_8 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_12 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_13 = -Blending_DF_Tetrahedron_blend_out3_id0*tmp_11 + Blending_DF_Tetrahedron_blend_out3_id0*tmp_9 - Blending_DF_Tetrahedron_blend_out4_id0*tmp_12 + Blending_DF_Tetrahedron_blend_out4_id0*tmp_7 - Blending_DF_Tetrahedron_blend_out5_id0*tmp_10 + Blending_DF_Tetrahedron_blend_out5_id0*tmp_8;
      real_t tmp_14 = -p_affine_0_2;
      real_t tmp_15 = p_affine_3_2 + tmp_14;
      real_t tmp_16 = tmp_1*tmp_15;
      real_t tmp_17 = p_affine_3_1 + tmp_2;
      real_t tmp_18 = p_affine_1_2 + tmp_14;
      real_t tmp_19 = tmp_18*tmp_4;
      real_t tmp_20 = p_affine_3_0 + tmp_0;
      real_t tmp_21 = p_affine_2_2 + tmp_14;
      real_t tmp_22 = tmp_20*tmp_21;
      real_t tmp_23 = tmp_1*tmp_21;
      real_t tmp_24 = tmp_15*tmp_4;
      real_t tmp_25 = tmp_18*tmp_20;
      real_t tmp_26 = 1/(tmp_13*(tmp_16*tmp_3 + tmp_17*tmp_19 - tmp_17*tmp_23 + tmp_22*tmp_5 - tmp_24*tmp_5 - tmp_25*tmp_3));
      real_t tmp_27 = tmp_26*(Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out4_id0 - Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out3_id0);
      real_t tmp_28 = tmp_27*tmp_6;
      real_t tmp_29 = -tmp_1*tmp_17 + tmp_20*tmp_5;
      real_t tmp_30 = tmp_27*tmp_29;
      real_t tmp_31 = tmp_17*tmp_4 - tmp_20*tmp_3;
      real_t tmp_32 = tmp_27*tmp_31;
      real_t tmp_33 = tmp_19 - tmp_23;
      real_t tmp_34 = tmp_26*(-Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out5_id0 + Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out3_id0);
      real_t tmp_35 = tmp_33*tmp_34;
      real_t tmp_36 = tmp_16 - tmp_25;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = tmp_22 - tmp_24;
      real_t tmp_39 = tmp_34*tmp_38;
      real_t tmp_40 = -tmp_18*tmp_3 + tmp_21*tmp_5;
      real_t tmp_41 = tmp_26*(Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out5_id0 - Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out4_id0);
      real_t tmp_42 = tmp_40*tmp_41;
      real_t tmp_43 = -tmp_15*tmp_5 + tmp_17*tmp_18;
      real_t tmp_44 = tmp_41*tmp_43;
      real_t tmp_45 = tmp_15*tmp_3 - tmp_17*tmp_21;
      real_t tmp_46 = tmp_41*tmp_45;
      real_t tmp_47 = -1.0*tmp_28 - 1.0*tmp_30 - 1.0*tmp_32 - 1.0*tmp_35 - 1.0*tmp_37 - 1.0*tmp_39 - 1.0*tmp_42 - 1.0*tmp_44 - 1.0*tmp_46;
      real_t tmp_48 = 0.5*tmp_26;
      real_t tmp_49 = tmp_48*(-tmp_10 + tmp_8);
      real_t tmp_50 = tmp_49*tmp_6;
      real_t tmp_51 = tmp_29*tmp_49;
      real_t tmp_52 = tmp_31*tmp_49;
      real_t tmp_53 = tmp_48*(-tmp_12 + tmp_7);
      real_t tmp_54 = tmp_33*tmp_53;
      real_t tmp_55 = tmp_36*tmp_53;
      real_t tmp_56 = tmp_38*tmp_53;
      real_t tmp_57 = tmp_48*(-tmp_11 + tmp_9);
      real_t tmp_58 = tmp_40*tmp_57;
      real_t tmp_59 = tmp_43*tmp_57;
      real_t tmp_60 = tmp_45*tmp_57;
      real_t tmp_61 = p_affine_0_0*p_affine_1_1;
      real_t tmp_62 = p_affine_0_0*p_affine_1_2;
      real_t tmp_63 = p_affine_2_1*p_affine_3_2;
      real_t tmp_64 = p_affine_0_1*p_affine_1_0;
      real_t tmp_65 = p_affine_0_1*p_affine_1_2;
      real_t tmp_66 = p_affine_2_2*p_affine_3_0;
      real_t tmp_67 = p_affine_0_2*p_affine_1_0;
      real_t tmp_68 = p_affine_0_2*p_affine_1_1;
      real_t tmp_69 = p_affine_2_0*p_affine_3_1;
      real_t tmp_70 = p_affine_2_2*p_affine_3_1;
      real_t tmp_71 = p_affine_2_0*p_affine_3_2;
      real_t tmp_72 = p_affine_2_1*p_affine_3_0;
      real_t tmp_73 = 0.33333333333333326*std::abs(tmp_13)*std::abs(p_affine_0_0*tmp_63 - p_affine_0_0*tmp_70 + p_affine_0_1*tmp_66 - p_affine_0_1*tmp_71 + p_affine_0_2*tmp_69 - p_affine_0_2*tmp_72 - p_affine_1_0*tmp_63 + p_affine_1_0*tmp_70 - p_affine_1_1*tmp_66 + p_affine_1_1*tmp_71 - p_affine_1_2*tmp_69 + p_affine_1_2*tmp_72 + p_affine_2_0*tmp_65 - p_affine_2_0*tmp_68 - p_affine_2_1*tmp_62 + p_affine_2_1*tmp_67 + p_affine_2_2*tmp_61 - p_affine_2_2*tmp_64 - p_affine_3_0*tmp_65 + p_affine_3_0*tmp_68 + p_affine_3_1*tmp_62 - p_affine_3_1*tmp_67 - p_affine_3_2*tmp_61 + p_affine_3_2*tmp_64);
      real_t tmp_74 = tmp_73*(-tmp_50 - tmp_51 - tmp_52 - tmp_54 - tmp_55 - tmp_56 - tmp_58 - tmp_59 - tmp_60);
      real_t tmp_75 = tmp_32 + tmp_39 + tmp_46;
      real_t tmp_76 = tmp_30 + tmp_37 + tmp_44;
      real_t tmp_77 = tmp_28 + tmp_35 + tmp_42;
      real_t tmp_78 = tmp_73*(tmp_52 + tmp_56 + tmp_60);
      real_t tmp_79 = tmp_73*(tmp_51 + tmp_55 + tmp_59);
      real_t tmp_80 = tmp_73*(tmp_50 + tmp_54 + tmp_58);
      real_t a_0_0 = tmp_47*tmp_74;
      real_t a_0_1 = tmp_74*tmp_75;
      real_t a_0_2 = tmp_74*tmp_76;
      real_t a_0_3 = tmp_74*tmp_77;
      real_t a_1_0 = tmp_47*tmp_78;
      real_t a_1_1 = tmp_75*tmp_78;
      real_t a_1_2 = tmp_76*tmp_78;
      real_t a_1_3 = tmp_77*tmp_78;
      real_t a_2_0 = tmp_47*tmp_79;
      real_t a_2_1 = tmp_75*tmp_79;
      real_t a_2_2 = tmp_76*tmp_79;
      real_t a_2_3 = tmp_77*tmp_79;
      real_t a_3_0 = tmp_47*tmp_80;
      real_t a_3_1 = tmp_75*tmp_80;
      real_t a_3_2 = tmp_76*tmp_80;
      real_t a_3_3 = tmp_77*tmp_80;
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(1, 3)) = a_1_3;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
      (elMat(2, 3)) = a_2_3;
      (elMat(3, 0)) = a_3_0;
      (elMat(3, 1)) = a_3_1;
      (elMat(3, 2)) = a_3_2;
      (elMat(3, 3)) = a_3_3;
   }

   void p1_epsiloncc_2_1_blending_q1::integrateRow0( const std::array< Point3D, 4 >& coords, Matrix< real_t, 1, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = p_affine_2_0 + tmp_0;
      real_t tmp_5 = p_affine_1_1 + tmp_2;
      real_t tmp_6 = tmp_1*tmp_3 - tmp_4*tmp_5;
      real_t tmp_7 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_8 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out8_id0;
      real_t tmp_12 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_13 = -Blending_DF_Tetrahedron_blend_out3_id0*tmp_11 + Blending_DF_Tetrahedron_blend_out3_id0*tmp_9 - Blending_DF_Tetrahedron_blend_out4_id0*tmp_12 + Blending_DF_Tetrahedron_blend_out4_id0*tmp_7 - Blending_DF_Tetrahedron_blend_out5_id0*tmp_10 + Blending_DF_Tetrahedron_blend_out5_id0*tmp_8;
      real_t tmp_14 = -p_affine_0_2;
      real_t tmp_15 = p_affine_3_2 + tmp_14;
      real_t tmp_16 = tmp_1*tmp_15;
      real_t tmp_17 = p_affine_3_1 + tmp_2;
      real_t tmp_18 = p_affine_1_2 + tmp_14;
      real_t tmp_19 = tmp_18*tmp_4;
      real_t tmp_20 = p_affine_3_0 + tmp_0;
      real_t tmp_21 = p_affine_2_2 + tmp_14;
      real_t tmp_22 = tmp_20*tmp_21;
      real_t tmp_23 = tmp_1*tmp_21;
      real_t tmp_24 = tmp_15*tmp_4;
      real_t tmp_25 = tmp_18*tmp_20;
      real_t tmp_26 = 1/(tmp_13*(tmp_16*tmp_3 + tmp_17*tmp_19 - tmp_17*tmp_23 + tmp_22*tmp_5 - tmp_24*tmp_5 - tmp_25*tmp_3));
      real_t tmp_27 = tmp_26*(Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out4_id0 - Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out3_id0);
      real_t tmp_28 = tmp_27*tmp_6;
      real_t tmp_29 = -tmp_1*tmp_17 + tmp_20*tmp_5;
      real_t tmp_30 = tmp_27*tmp_29;
      real_t tmp_31 = tmp_17*tmp_4 - tmp_20*tmp_3;
      real_t tmp_32 = tmp_27*tmp_31;
      real_t tmp_33 = tmp_19 - tmp_23;
      real_t tmp_34 = tmp_26*(-Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out5_id0 + Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out3_id0);
      real_t tmp_35 = tmp_33*tmp_34;
      real_t tmp_36 = tmp_16 - tmp_25;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = tmp_22 - tmp_24;
      real_t tmp_39 = tmp_34*tmp_38;
      real_t tmp_40 = -tmp_18*tmp_3 + tmp_21*tmp_5;
      real_t tmp_41 = tmp_26*(Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out5_id0 - Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out4_id0);
      real_t tmp_42 = tmp_40*tmp_41;
      real_t tmp_43 = -tmp_15*tmp_5 + tmp_17*tmp_18;
      real_t tmp_44 = tmp_41*tmp_43;
      real_t tmp_45 = tmp_15*tmp_3 - tmp_17*tmp_21;
      real_t tmp_46 = tmp_41*tmp_45;
      real_t tmp_47 = 0.5*tmp_26;
      real_t tmp_48 = tmp_47*(-tmp_10 + tmp_8);
      real_t tmp_49 = tmp_47*(-tmp_12 + tmp_7);
      real_t tmp_50 = tmp_47*(-tmp_11 + tmp_9);
      real_t tmp_51 = p_affine_0_0*p_affine_1_1;
      real_t tmp_52 = p_affine_0_0*p_affine_1_2;
      real_t tmp_53 = p_affine_2_1*p_affine_3_2;
      real_t tmp_54 = p_affine_0_1*p_affine_1_0;
      real_t tmp_55 = p_affine_0_1*p_affine_1_2;
      real_t tmp_56 = p_affine_2_2*p_affine_3_0;
      real_t tmp_57 = p_affine_0_2*p_affine_1_0;
      real_t tmp_58 = p_affine_0_2*p_affine_1_1;
      real_t tmp_59 = p_affine_2_0*p_affine_3_1;
      real_t tmp_60 = p_affine_2_2*p_affine_3_1;
      real_t tmp_61 = p_affine_2_0*p_affine_3_2;
      real_t tmp_62 = p_affine_2_1*p_affine_3_0;
      real_t tmp_63 = 0.33333333333333326*(-tmp_29*tmp_48 - tmp_31*tmp_48 - tmp_33*tmp_49 - tmp_36*tmp_49 - tmp_38*tmp_49 - tmp_40*tmp_50 - tmp_43*tmp_50 - tmp_45*tmp_50 - tmp_48*tmp_6)*std::abs(tmp_13)*std::abs(p_affine_0_0*tmp_53 - p_affine_0_0*tmp_60 + p_affine_0_1*tmp_56 - p_affine_0_1*tmp_61 + p_affine_0_2*tmp_59 - p_affine_0_2*tmp_62 - p_affine_1_0*tmp_53 + p_affine_1_0*tmp_60 - p_affine_1_1*tmp_56 + p_affine_1_1*tmp_61 - p_affine_1_2*tmp_59 + p_affine_1_2*tmp_62 + p_affine_2_0*tmp_55 - p_affine_2_0*tmp_58 - p_affine_2_1*tmp_52 + p_affine_2_1*tmp_57 + p_affine_2_2*tmp_51 - p_affine_2_2*tmp_54 - p_affine_3_0*tmp_55 + p_affine_3_0*tmp_58 + p_affine_3_1*tmp_52 - p_affine_3_1*tmp_57 - p_affine_3_2*tmp_51 + p_affine_3_2*tmp_54);
      real_t a_0_0 = tmp_63*(-1.0*tmp_28 - 1.0*tmp_30 - 1.0*tmp_32 - 1.0*tmp_35 - 1.0*tmp_37 - 1.0*tmp_39 - 1.0*tmp_42 - 1.0*tmp_44 - 1.0*tmp_46);
      real_t a_0_1 = tmp_63*(tmp_32 + tmp_39 + tmp_46);
      real_t a_0_2 = tmp_63*(tmp_30 + tmp_37 + tmp_44);
      real_t a_0_3 = tmp_63*(tmp_28 + tmp_35 + tmp_42);
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
   }

   void p1_epsiloncc_2_1_blending_q1::Blending_DF_Tetrahedron_blend( real_t in_0, real_t in_1, real_t in_2, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3, real_t * out_4, real_t * out_5, real_t * out_6, real_t * out_7, real_t * out_8 ) const
   {
      Point3D  mappedPt( in_0, in_1, in_2 );
      Matrix3r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 0, 2 );
      *out_3 = DPsi( 1, 0 );
      *out_4 = DPsi( 1, 1 );
      *out_5 = DPsi( 1, 2 );
      *out_6 = DPsi( 2, 0 );
      *out_7 = DPsi( 2, 1 );
      *out_8 = DPsi( 2, 2 );
   }

   void p1_epsiloncc_2_2_blending_q1::integrateAll( const std::array< Point3D, 3 >& , Matrix< real_t, 3, 3 >&  ) const
   {
      
   }

   void p1_epsiloncc_2_2_blending_q1::integrateRow0( const std::array< Point3D, 3 >& , Matrix< real_t, 1, 3 >&  ) const
   {
      
   }

   void p1_epsiloncc_2_2_blending_q1::integrateAll( const std::array< Point3D, 4 >& coords, Matrix< real_t, 4, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = tmp_1*tmp_3;
      real_t tmp_5 = p_affine_2_0 + tmp_0;
      real_t tmp_6 = p_affine_1_1 + tmp_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out4_id0;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out5_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out5_id0;
      real_t tmp_12 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_13 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out4_id0;
      real_t tmp_14 = -Blending_DF_Tetrahedron_blend_out6_id0*tmp_13 + Blending_DF_Tetrahedron_blend_out6_id0*tmp_9 + Blending_DF_Tetrahedron_blend_out7_id0*tmp_10 - Blending_DF_Tetrahedron_blend_out7_id0*tmp_11 - Blending_DF_Tetrahedron_blend_out8_id0*tmp_12 + Blending_DF_Tetrahedron_blend_out8_id0*tmp_8;
      real_t tmp_15 = -p_affine_0_2;
      real_t tmp_16 = p_affine_3_2 + tmp_15;
      real_t tmp_17 = p_affine_1_2 + tmp_15;
      real_t tmp_18 = p_affine_3_1 + tmp_2;
      real_t tmp_19 = tmp_18*tmp_5;
      real_t tmp_20 = p_affine_2_2 + tmp_15;
      real_t tmp_21 = p_affine_3_0 + tmp_0;
      real_t tmp_22 = tmp_21*tmp_6;
      real_t tmp_23 = tmp_1*tmp_18;
      real_t tmp_24 = tmp_21*tmp_3;
      real_t tmp_25 = 1/(tmp_14*(tmp_16*tmp_4 - tmp_16*tmp_7 + tmp_17*tmp_19 - tmp_17*tmp_24 + tmp_20*tmp_22 - tmp_20*tmp_23));
      real_t tmp_26 = tmp_25*(tmp_4 - tmp_7);
      real_t tmp_27 = -tmp_12 + tmp_8;
      real_t tmp_28 = 2.0*tmp_27;
      real_t tmp_29 = tmp_26*tmp_28;
      real_t tmp_30 = tmp_25*(tmp_22 - tmp_23);
      real_t tmp_31 = tmp_28*tmp_30;
      real_t tmp_32 = tmp_25*(tmp_19 - tmp_24);
      real_t tmp_33 = tmp_28*tmp_32;
      real_t tmp_34 = tmp_25*(-tmp_1*tmp_20 + tmp_17*tmp_5);
      real_t tmp_35 = tmp_10 - tmp_11;
      real_t tmp_36 = 2.0*tmp_35;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = tmp_25*(tmp_1*tmp_16 - tmp_17*tmp_21);
      real_t tmp_39 = tmp_36*tmp_38;
      real_t tmp_40 = tmp_25*(-tmp_16*tmp_5 + tmp_20*tmp_21);
      real_t tmp_41 = tmp_36*tmp_40;
      real_t tmp_42 = tmp_25*(-tmp_17*tmp_3 + tmp_20*tmp_6);
      real_t tmp_43 = -tmp_13 + tmp_9;
      real_t tmp_44 = 2.0*tmp_43;
      real_t tmp_45 = tmp_42*tmp_44;
      real_t tmp_46 = tmp_25*(-tmp_16*tmp_6 + tmp_17*tmp_18);
      real_t tmp_47 = tmp_44*tmp_46;
      real_t tmp_48 = tmp_25*(tmp_16*tmp_3 - tmp_18*tmp_20);
      real_t tmp_49 = tmp_44*tmp_48;
      real_t tmp_50 = -tmp_29 - tmp_31 - tmp_33 - tmp_37 - tmp_39 - tmp_41 - tmp_45 - tmp_47 - tmp_49;
      real_t tmp_51 = 1.0*tmp_27;
      real_t tmp_52 = tmp_26*tmp_51;
      real_t tmp_53 = tmp_30*tmp_51;
      real_t tmp_54 = tmp_32*tmp_51;
      real_t tmp_55 = 1.0*tmp_35;
      real_t tmp_56 = tmp_34*tmp_55;
      real_t tmp_57 = tmp_38*tmp_55;
      real_t tmp_58 = tmp_40*tmp_55;
      real_t tmp_59 = 1.0*tmp_43;
      real_t tmp_60 = tmp_42*tmp_59;
      real_t tmp_61 = tmp_46*tmp_59;
      real_t tmp_62 = tmp_48*tmp_59;
      real_t tmp_63 = -tmp_52 - tmp_53 - tmp_54 - tmp_56 - tmp_57 - tmp_58 - tmp_60 - tmp_61 - tmp_62;
      real_t tmp_64 = -Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out7_id0 + Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_65 = tmp_26*tmp_64;
      real_t tmp_66 = tmp_30*tmp_64;
      real_t tmp_67 = tmp_32*tmp_64;
      real_t tmp_68 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out8_id0 - Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_69 = tmp_34*tmp_68;
      real_t tmp_70 = tmp_38*tmp_68;
      real_t tmp_71 = tmp_40*tmp_68;
      real_t tmp_72 = -Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out8_id0 + Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_73 = tmp_42*tmp_72;
      real_t tmp_74 = tmp_46*tmp_72;
      real_t tmp_75 = tmp_48*tmp_72;
      real_t tmp_76 = -1.0*tmp_65 - 1.0*tmp_66 - 1.0*tmp_67 - 1.0*tmp_69 - 1.0*tmp_70 - 1.0*tmp_71 - 1.0*tmp_73 - 1.0*tmp_74 - 1.0*tmp_75;
      real_t tmp_77 = 0.5*tmp_65;
      real_t tmp_78 = 0.5*tmp_66;
      real_t tmp_79 = 0.5*tmp_67;
      real_t tmp_80 = 0.5*tmp_69;
      real_t tmp_81 = 0.5*tmp_70;
      real_t tmp_82 = 0.5*tmp_71;
      real_t tmp_83 = 0.5*tmp_73;
      real_t tmp_84 = 0.5*tmp_74;
      real_t tmp_85 = 0.5*tmp_75;
      real_t tmp_86 = -2*tmp_77 - 2*tmp_78 - 2*tmp_79 - 2*tmp_80 - 2*tmp_81 - 2*tmp_82 - 2*tmp_83 - 2*tmp_84 - 2*tmp_85;
      real_t tmp_87 = Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out7_id0 - Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_88 = tmp_26*tmp_87;
      real_t tmp_89 = tmp_30*tmp_87;
      real_t tmp_90 = tmp_32*tmp_87;
      real_t tmp_91 = -Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out8_id0 + Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_92 = tmp_34*tmp_91;
      real_t tmp_93 = tmp_38*tmp_91;
      real_t tmp_94 = tmp_40*tmp_91;
      real_t tmp_95 = Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out8_id0 - Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_96 = tmp_42*tmp_95;
      real_t tmp_97 = tmp_46*tmp_95;
      real_t tmp_98 = tmp_48*tmp_95;
      real_t tmp_99 = -1.0*tmp_88 - 1.0*tmp_89 - 1.0*tmp_90 - 1.0*tmp_92 - 1.0*tmp_93 - 1.0*tmp_94 - 1.0*tmp_96 - 1.0*tmp_97 - 1.0*tmp_98;
      real_t tmp_100 = 0.5*tmp_88;
      real_t tmp_101 = 0.5*tmp_89;
      real_t tmp_102 = 0.5*tmp_90;
      real_t tmp_103 = 0.5*tmp_92;
      real_t tmp_104 = 0.5*tmp_93;
      real_t tmp_105 = 0.5*tmp_94;
      real_t tmp_106 = 0.5*tmp_96;
      real_t tmp_107 = 0.5*tmp_97;
      real_t tmp_108 = 0.5*tmp_98;
      real_t tmp_109 = -2*tmp_100 - 2*tmp_101 - 2*tmp_102 - 2*tmp_103 - 2*tmp_104 - 2*tmp_105 - 2*tmp_106 - 2*tmp_107 - 2*tmp_108;
      real_t tmp_110 = p_affine_0_0*p_affine_1_1;
      real_t tmp_111 = p_affine_0_0*p_affine_1_2;
      real_t tmp_112 = p_affine_2_1*p_affine_3_2;
      real_t tmp_113 = p_affine_0_1*p_affine_1_0;
      real_t tmp_114 = p_affine_0_1*p_affine_1_2;
      real_t tmp_115 = p_affine_2_2*p_affine_3_0;
      real_t tmp_116 = p_affine_0_2*p_affine_1_0;
      real_t tmp_117 = p_affine_0_2*p_affine_1_1;
      real_t tmp_118 = p_affine_2_0*p_affine_3_1;
      real_t tmp_119 = p_affine_2_2*p_affine_3_1;
      real_t tmp_120 = p_affine_2_0*p_affine_3_2;
      real_t tmp_121 = p_affine_2_1*p_affine_3_0;
      real_t tmp_122 = 0.16666666666666663*std::abs(tmp_14)*std::abs(p_affine_0_0*tmp_112 - p_affine_0_0*tmp_119 + p_affine_0_1*tmp_115 - p_affine_0_1*tmp_120 + p_affine_0_2*tmp_118 - p_affine_0_2*tmp_121 - p_affine_1_0*tmp_112 + p_affine_1_0*tmp_119 - p_affine_1_1*tmp_115 + p_affine_1_1*tmp_120 - p_affine_1_2*tmp_118 + p_affine_1_2*tmp_121 + p_affine_2_0*tmp_114 - p_affine_2_0*tmp_117 - p_affine_2_1*tmp_111 + p_affine_2_1*tmp_116 + p_affine_2_2*tmp_110 - p_affine_2_2*tmp_113 - p_affine_3_0*tmp_114 + p_affine_3_0*tmp_117 + p_affine_3_1*tmp_111 - p_affine_3_1*tmp_116 - p_affine_3_2*tmp_110 + p_affine_3_2*tmp_113);
      real_t tmp_123 = tmp_67 + tmp_71 + tmp_75;
      real_t tmp_124 = tmp_90 + tmp_94 + tmp_98;
      real_t tmp_125 = tmp_33 + tmp_41 + tmp_49;
      real_t tmp_126 = tmp_66 + tmp_70 + tmp_74;
      real_t tmp_127 = tmp_89 + tmp_93 + tmp_97;
      real_t tmp_128 = tmp_31 + tmp_39 + tmp_47;
      real_t tmp_129 = tmp_65 + tmp_69 + tmp_73;
      real_t tmp_130 = tmp_88 + tmp_92 + tmp_96;
      real_t tmp_131 = tmp_29 + tmp_37 + tmp_45;
      real_t tmp_132 = tmp_54 + tmp_58 + tmp_62;
      real_t tmp_133 = 2*tmp_79 + 2*tmp_82 + 2*tmp_85;
      real_t tmp_134 = 2*tmp_102 + 2*tmp_105 + 2*tmp_108;
      real_t tmp_135 = tmp_53 + tmp_57 + tmp_61;
      real_t tmp_136 = 2*tmp_78 + 2*tmp_81 + 2*tmp_84;
      real_t tmp_137 = 2*tmp_101 + 2*tmp_104 + 2*tmp_107;
      real_t tmp_138 = tmp_52 + tmp_56 + tmp_60;
      real_t tmp_139 = 2*tmp_77 + 2*tmp_80 + 2*tmp_83;
      real_t tmp_140 = 2*tmp_100 + 2*tmp_103 + 2*tmp_106;
      real_t a_0_0 = tmp_122*(tmp_109*tmp_99 + tmp_50*tmp_63 + tmp_76*tmp_86);
      real_t a_0_1 = tmp_122*(tmp_109*tmp_124 + tmp_123*tmp_86 + tmp_125*tmp_63);
      real_t a_0_2 = tmp_122*(tmp_109*tmp_127 + tmp_126*tmp_86 + tmp_128*tmp_63);
      real_t a_0_3 = tmp_122*(tmp_109*tmp_130 + tmp_129*tmp_86 + tmp_131*tmp_63);
      real_t a_1_0 = tmp_122*(tmp_132*tmp_50 + tmp_133*tmp_76 + tmp_134*tmp_99);
      real_t a_1_1 = tmp_122*(tmp_123*tmp_133 + tmp_124*tmp_134 + tmp_125*tmp_132);
      real_t a_1_2 = tmp_122*(tmp_126*tmp_133 + tmp_127*tmp_134 + tmp_128*tmp_132);
      real_t a_1_3 = tmp_122*(tmp_129*tmp_133 + tmp_130*tmp_134 + tmp_131*tmp_132);
      real_t a_2_0 = tmp_122*(tmp_135*tmp_50 + tmp_136*tmp_76 + tmp_137*tmp_99);
      real_t a_2_1 = tmp_122*(tmp_123*tmp_136 + tmp_124*tmp_137 + tmp_125*tmp_135);
      real_t a_2_2 = tmp_122*(tmp_126*tmp_136 + tmp_127*tmp_137 + tmp_128*tmp_135);
      real_t a_2_3 = tmp_122*(tmp_129*tmp_136 + tmp_130*tmp_137 + tmp_131*tmp_135);
      real_t a_3_0 = tmp_122*(tmp_138*tmp_50 + tmp_139*tmp_76 + tmp_140*tmp_99);
      real_t a_3_1 = tmp_122*(tmp_123*tmp_139 + tmp_124*tmp_140 + tmp_125*tmp_138);
      real_t a_3_2 = tmp_122*(tmp_126*tmp_139 + tmp_127*tmp_140 + tmp_128*tmp_138);
      real_t a_3_3 = tmp_122*(tmp_129*tmp_139 + tmp_130*tmp_140 + tmp_131*tmp_138);
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(1, 3)) = a_1_3;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
      (elMat(2, 3)) = a_2_3;
      (elMat(3, 0)) = a_3_0;
      (elMat(3, 1)) = a_3_1;
      (elMat(3, 2)) = a_3_2;
      (elMat(3, 3)) = a_3_3;
   }

   void p1_epsiloncc_2_2_blending_q1::integrateRow0( const std::array< Point3D, 4 >& coords, Matrix< real_t, 1, 4 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_blend_out0_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out1_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out2_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out3_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out4_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out5_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out6_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out7_id0 = 0;
      real_t Blending_DF_Tetrahedron_blend_out8_id0 = 0;
      Blending_DF_Tetrahedron_blend( 0.25*p_affine_0_0 + 0.25*p_affine_1_0 + 0.25*p_affine_2_0 + 0.25*p_affine_3_0, 0.25*p_affine_0_1 + 0.25*p_affine_1_1 + 0.25*p_affine_2_1 + 0.25*p_affine_3_1, 0.25*p_affine_0_2 + 0.25*p_affine_1_2 + 0.25*p_affine_2_2 + 0.25*p_affine_3_2, &Blending_DF_Tetrahedron_blend_out0_id0, &Blending_DF_Tetrahedron_blend_out1_id0, &Blending_DF_Tetrahedron_blend_out2_id0, &Blending_DF_Tetrahedron_blend_out3_id0, &Blending_DF_Tetrahedron_blend_out4_id0, &Blending_DF_Tetrahedron_blend_out5_id0, &Blending_DF_Tetrahedron_blend_out6_id0, &Blending_DF_Tetrahedron_blend_out7_id0, &Blending_DF_Tetrahedron_blend_out8_id0 );
      real_t tmp_0 = -p_affine_0_0;
      real_t tmp_1 = p_affine_1_0 + tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = p_affine_2_1 + tmp_2;
      real_t tmp_4 = tmp_1*tmp_3;
      real_t tmp_5 = p_affine_2_0 + tmp_0;
      real_t tmp_6 = p_affine_1_1 + tmp_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out4_id0;
      real_t tmp_9 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out5_id0;
      real_t tmp_10 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_11 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out5_id0;
      real_t tmp_12 = Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out3_id0;
      real_t tmp_13 = Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out4_id0;
      real_t tmp_14 = -Blending_DF_Tetrahedron_blend_out6_id0*tmp_13 + Blending_DF_Tetrahedron_blend_out6_id0*tmp_9 + Blending_DF_Tetrahedron_blend_out7_id0*tmp_10 - Blending_DF_Tetrahedron_blend_out7_id0*tmp_11 - Blending_DF_Tetrahedron_blend_out8_id0*tmp_12 + Blending_DF_Tetrahedron_blend_out8_id0*tmp_8;
      real_t tmp_15 = -p_affine_0_2;
      real_t tmp_16 = p_affine_3_2 + tmp_15;
      real_t tmp_17 = p_affine_1_2 + tmp_15;
      real_t tmp_18 = p_affine_3_1 + tmp_2;
      real_t tmp_19 = tmp_18*tmp_5;
      real_t tmp_20 = p_affine_2_2 + tmp_15;
      real_t tmp_21 = p_affine_3_0 + tmp_0;
      real_t tmp_22 = tmp_21*tmp_6;
      real_t tmp_23 = tmp_1*tmp_18;
      real_t tmp_24 = tmp_21*tmp_3;
      real_t tmp_25 = 1/(tmp_14*(tmp_16*tmp_4 - tmp_16*tmp_7 + tmp_17*tmp_19 - tmp_17*tmp_24 + tmp_20*tmp_22 - tmp_20*tmp_23));
      real_t tmp_26 = tmp_25*(tmp_4 - tmp_7);
      real_t tmp_27 = -tmp_12 + tmp_8;
      real_t tmp_28 = 2.0*tmp_27;
      real_t tmp_29 = tmp_26*tmp_28;
      real_t tmp_30 = tmp_25*(tmp_22 - tmp_23);
      real_t tmp_31 = tmp_28*tmp_30;
      real_t tmp_32 = tmp_25*(tmp_19 - tmp_24);
      real_t tmp_33 = tmp_28*tmp_32;
      real_t tmp_34 = tmp_25*(-tmp_1*tmp_20 + tmp_17*tmp_5);
      real_t tmp_35 = tmp_10 - tmp_11;
      real_t tmp_36 = 2.0*tmp_35;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = tmp_25*(tmp_1*tmp_16 - tmp_17*tmp_21);
      real_t tmp_39 = tmp_36*tmp_38;
      real_t tmp_40 = tmp_25*(-tmp_16*tmp_5 + tmp_20*tmp_21);
      real_t tmp_41 = tmp_36*tmp_40;
      real_t tmp_42 = tmp_25*(-tmp_17*tmp_3 + tmp_20*tmp_6);
      real_t tmp_43 = -tmp_13 + tmp_9;
      real_t tmp_44 = 2.0*tmp_43;
      real_t tmp_45 = tmp_42*tmp_44;
      real_t tmp_46 = tmp_25*(-tmp_16*tmp_6 + tmp_17*tmp_18);
      real_t tmp_47 = tmp_44*tmp_46;
      real_t tmp_48 = tmp_25*(tmp_16*tmp_3 - tmp_18*tmp_20);
      real_t tmp_49 = tmp_44*tmp_48;
      real_t tmp_50 = 1.0*tmp_27;
      real_t tmp_51 = 1.0*tmp_35;
      real_t tmp_52 = 1.0*tmp_43;
      real_t tmp_53 = -tmp_26*tmp_50 - tmp_30*tmp_50 - tmp_32*tmp_50 - tmp_34*tmp_51 - tmp_38*tmp_51 - tmp_40*tmp_51 - tmp_42*tmp_52 - tmp_46*tmp_52 - tmp_48*tmp_52;
      real_t tmp_54 = -Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out7_id0 + Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_55 = tmp_26*tmp_54;
      real_t tmp_56 = tmp_30*tmp_54;
      real_t tmp_57 = tmp_32*tmp_54;
      real_t tmp_58 = Blending_DF_Tetrahedron_blend_out0_id0*Blending_DF_Tetrahedron_blend_out8_id0 - Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_59 = tmp_34*tmp_58;
      real_t tmp_60 = tmp_38*tmp_58;
      real_t tmp_61 = tmp_40*tmp_58;
      real_t tmp_62 = -Blending_DF_Tetrahedron_blend_out1_id0*Blending_DF_Tetrahedron_blend_out8_id0 + Blending_DF_Tetrahedron_blend_out2_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_63 = tmp_42*tmp_62;
      real_t tmp_64 = tmp_46*tmp_62;
      real_t tmp_65 = tmp_48*tmp_62;
      real_t tmp_66 = -1.0*tmp_55 - 1.0*tmp_56 - 1.0*tmp_57 - 1.0*tmp_59 - 1.0*tmp_60 - 1.0*tmp_61 - 1.0*tmp_63 - 1.0*tmp_64 - 1.0*tmp_65;
      real_t tmp_67 = Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out7_id0 - Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_68 = tmp_26*tmp_67;
      real_t tmp_69 = tmp_30*tmp_67;
      real_t tmp_70 = tmp_32*tmp_67;
      real_t tmp_71 = -Blending_DF_Tetrahedron_blend_out3_id0*Blending_DF_Tetrahedron_blend_out8_id0 + Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out6_id0;
      real_t tmp_72 = tmp_34*tmp_71;
      real_t tmp_73 = tmp_38*tmp_71;
      real_t tmp_74 = tmp_40*tmp_71;
      real_t tmp_75 = Blending_DF_Tetrahedron_blend_out4_id0*Blending_DF_Tetrahedron_blend_out8_id0 - Blending_DF_Tetrahedron_blend_out5_id0*Blending_DF_Tetrahedron_blend_out7_id0;
      real_t tmp_76 = tmp_42*tmp_75;
      real_t tmp_77 = tmp_46*tmp_75;
      real_t tmp_78 = tmp_48*tmp_75;
      real_t tmp_79 = -1.0*tmp_68 - 1.0*tmp_69 - 1.0*tmp_70 - 1.0*tmp_72 - 1.0*tmp_73 - 1.0*tmp_74 - 1.0*tmp_76 - 1.0*tmp_77 - 1.0*tmp_78;
      real_t tmp_80 = p_affine_0_0*p_affine_1_1;
      real_t tmp_81 = p_affine_0_0*p_affine_1_2;
      real_t tmp_82 = p_affine_2_1*p_affine_3_2;
      real_t tmp_83 = p_affine_0_1*p_affine_1_0;
      real_t tmp_84 = p_affine_0_1*p_affine_1_2;
      real_t tmp_85 = p_affine_2_2*p_affine_3_0;
      real_t tmp_86 = p_affine_0_2*p_affine_1_0;
      real_t tmp_87 = p_affine_0_2*p_affine_1_1;
      real_t tmp_88 = p_affine_2_0*p_affine_3_1;
      real_t tmp_89 = p_affine_2_2*p_affine_3_1;
      real_t tmp_90 = p_affine_2_0*p_affine_3_2;
      real_t tmp_91 = p_affine_2_1*p_affine_3_0;
      real_t tmp_92 = 0.16666666666666663*std::abs(tmp_14)*std::abs(p_affine_0_0*tmp_82 - p_affine_0_0*tmp_89 + p_affine_0_1*tmp_85 - p_affine_0_1*tmp_90 + p_affine_0_2*tmp_88 - p_affine_0_2*tmp_91 - p_affine_1_0*tmp_82 + p_affine_1_0*tmp_89 - p_affine_1_1*tmp_85 + p_affine_1_1*tmp_90 - p_affine_1_2*tmp_88 + p_affine_1_2*tmp_91 + p_affine_2_0*tmp_84 - p_affine_2_0*tmp_87 - p_affine_2_1*tmp_81 + p_affine_2_1*tmp_86 + p_affine_2_2*tmp_80 - p_affine_2_2*tmp_83 - p_affine_3_0*tmp_84 + p_affine_3_0*tmp_87 + p_affine_3_1*tmp_81 - p_affine_3_1*tmp_86 - p_affine_3_2*tmp_80 + p_affine_3_2*tmp_83);
      real_t a_0_0 = tmp_92*(tmp_53*(-tmp_29 - tmp_31 - tmp_33 - tmp_37 - tmp_39 - tmp_41 - tmp_45 - tmp_47 - tmp_49) + tmp_66*(-1.0*tmp_55 - 1.0*tmp_56 - 1.0*tmp_57 - 1.0*tmp_59 - 1.0*tmp_60 - 1.0*tmp_61 - 1.0*tmp_63 - 1.0*tmp_64 - 1.0*tmp_65) + tmp_79*(-1.0*tmp_68 - 1.0*tmp_69 - 1.0*tmp_70 - 1.0*tmp_72 - 1.0*tmp_73 - 1.0*tmp_74 - 1.0*tmp_76 - 1.0*tmp_77 - 1.0*tmp_78));
      real_t a_0_1 = tmp_92*(tmp_53*(tmp_33 + tmp_41 + tmp_49) + tmp_66*(tmp_57 + tmp_61 + tmp_65) + tmp_79*(tmp_70 + tmp_74 + tmp_78));
      real_t a_0_2 = tmp_92*(tmp_53*(tmp_31 + tmp_39 + tmp_47) + tmp_66*(tmp_56 + tmp_60 + tmp_64) + tmp_79*(tmp_69 + tmp_73 + tmp_77));
      real_t a_0_3 = tmp_92*(tmp_53*(tmp_29 + tmp_37 + tmp_45) + tmp_66*(tmp_55 + tmp_59 + tmp_63) + tmp_79*(tmp_68 + tmp_72 + tmp_76));
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
   }

   void p1_epsiloncc_2_2_blending_q1::Blending_DF_Tetrahedron_blend( real_t in_0, real_t in_1, real_t in_2, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3, real_t * out_4, real_t * out_5, real_t * out_6, real_t * out_7, real_t * out_8 ) const
   {
      Point3D  mappedPt( in_0, in_1, in_2 );
      Matrix3r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 0, 2 );
      *out_3 = DPsi( 1, 0 );
      *out_4 = DPsi( 1, 1 );
      *out_5 = DPsi( 1, 2 );
      *out_6 = DPsi( 2, 0 );
      *out_7 = DPsi( 2, 1 );
      *out_8 = DPsi( 2, 2 );
   }

} // namespace forms
} // namespace hyteg
