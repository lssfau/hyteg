/*
 * Copyright (c) 2017-2021 Nils Kohl.
 *
 * This file is part of HyTeG
 * (see https://i10git.cs.fau.de/hyteg/hyteg).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The entire file was generated with the HyTeG form generator.
 * 
 * Software:
 *
 * - quadpy version: 0.16.5
 *
 * Avoid modifying this file. If buggy, consider fixing the generator itself.
 */

#pragma once

#include "hyteg/geometry/GeometryMap.hpp"
#include "hyteg/forms/form_hyteg_base/P1FormHyTeG.hpp"
#include "hyteg/forms/form_hyteg_base/P2FormHyTeG.hpp"

namespace hyteg {

/// Implementation of the integration of a weak form over an element.
///
/// - name:        P2MassBlending
/// - description: 
/// - trial space: Lagrange, degree: 2
/// - test space:  Lagrange, degree: 2
///
class P2MassBlending : public P2FormHyTeG
{

 public:

   /// \brief Integrates the weak form over the passed element (vertices in computational space).
   ///
   /// - element geometry:                       triangle, dim: 2, vertices: 3
   /// - element matrix dimensions (rows, cols): (6, 6)
   /// - quadrature rule:                        Vioreanu-Rokhlin 2 | points: 6, degree: 4, test tolerance: 1.943e-16
   /// - floating point operations:
   ///                                             adds    muls    divs    abs    assignments    function_calls
   ///                                           ------  ------  ------  -----  -------------  ----------------
   ///                                              230     342       0      7            238                 6
   ///
   void integrateAll( const std::array< Point3D, 3 >& coords, Matrix< real_t, 6, 6 >& elMat ) const override
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t Blending_DF_Triangle_0_0 = 0;
      real_t Blending_DF_Triangle_0_1 = 0;
      real_t Blending_DF_Triangle_0_2 = 0;
      real_t Blending_DF_Triangle_0_3 = 0;
      real_t Blending_DF_Triangle_1_0 = 0;
      real_t Blending_DF_Triangle_1_1 = 0;
      real_t Blending_DF_Triangle_1_2 = 0;
      real_t Blending_DF_Triangle_1_3 = 0;
      real_t Blending_DF_Triangle_2_0 = 0;
      real_t Blending_DF_Triangle_2_1 = 0;
      real_t Blending_DF_Triangle_2_2 = 0;
      real_t Blending_DF_Triangle_2_3 = 0;
      real_t Blending_DF_Triangle_3_0 = 0;
      real_t Blending_DF_Triangle_3_1 = 0;
      real_t Blending_DF_Triangle_3_2 = 0;
      real_t Blending_DF_Triangle_3_3 = 0;
      real_t Blending_DF_Triangle_4_0 = 0;
      real_t Blending_DF_Triangle_4_1 = 0;
      real_t Blending_DF_Triangle_4_2 = 0;
      real_t Blending_DF_Triangle_4_3 = 0;
      real_t Blending_DF_Triangle_5_0 = 0;
      real_t Blending_DF_Triangle_5_1 = 0;
      real_t Blending_DF_Triangle_5_2 = 0;
      real_t Blending_DF_Triangle_5_3 = 0;
      real_t q_p_0_0 = 0.091576213509770743;
      real_t q_p_0_1 = 0.81684757298045851;
      real_t q_p_1_0 = 0.44594849091596489;
      real_t q_p_1_1 = 0.10810301816807022;
      real_t q_p_2_0 = 0.81684757298045851;
      real_t q_p_2_1 = 0.091576213509770743;
      real_t q_p_3_0 = 0.10810301816807022;
      real_t q_p_3_1 = 0.44594849091596489;
      real_t q_p_4_0 = 0.091576213509770743;
      real_t q_p_4_1 = 0.091576213509770743;
      real_t q_p_5_0 = 0.44594849091596489;
      real_t q_p_5_1 = 0.44594849091596489;
      real_t w_p_0 = 0.054975871827660928;
      real_t w_p_1 = 0.11169079483900572;
      real_t w_p_2 = 0.054975871827660928;
      real_t w_p_3 = 0.11169079483900572;
      real_t w_p_4 = 0.054975871827660928;
      real_t w_p_5 = 0.11169079483900572;
      Blending_DF_Triangle( -p_affine_0_0*q_p_0_0 - p_affine_0_0*q_p_0_1 + p_affine_0_0 + p_affine_1_0*q_p_0_0 + p_affine_2_0*q_p_0_1, -p_affine_0_1*q_p_0_0 - p_affine_0_1*q_p_0_1 + p_affine_0_1 + p_affine_1_1*q_p_0_0 + p_affine_2_1*q_p_0_1, &Blending_DF_Triangle_0_0, &Blending_DF_Triangle_0_1, &Blending_DF_Triangle_0_2, &Blending_DF_Triangle_0_3 );
      Blending_DF_Triangle( -p_affine_0_0*q_p_1_0 - p_affine_0_0*q_p_1_1 + p_affine_0_0 + p_affine_1_0*q_p_1_0 + p_affine_2_0*q_p_1_1, -p_affine_0_1*q_p_1_0 - p_affine_0_1*q_p_1_1 + p_affine_0_1 + p_affine_1_1*q_p_1_0 + p_affine_2_1*q_p_1_1, &Blending_DF_Triangle_1_0, &Blending_DF_Triangle_1_1, &Blending_DF_Triangle_1_2, &Blending_DF_Triangle_1_3 );
      Blending_DF_Triangle( -p_affine_0_0*q_p_2_0 - p_affine_0_0*q_p_2_1 + p_affine_0_0 + p_affine_1_0*q_p_2_0 + p_affine_2_0*q_p_2_1, -p_affine_0_1*q_p_2_0 - p_affine_0_1*q_p_2_1 + p_affine_0_1 + p_affine_1_1*q_p_2_0 + p_affine_2_1*q_p_2_1, &Blending_DF_Triangle_2_0, &Blending_DF_Triangle_2_1, &Blending_DF_Triangle_2_2, &Blending_DF_Triangle_2_3 );
      Blending_DF_Triangle( -p_affine_0_0*q_p_3_0 - p_affine_0_0*q_p_3_1 + p_affine_0_0 + p_affine_1_0*q_p_3_0 + p_affine_2_0*q_p_3_1, -p_affine_0_1*q_p_3_0 - p_affine_0_1*q_p_3_1 + p_affine_0_1 + p_affine_1_1*q_p_3_0 + p_affine_2_1*q_p_3_1, &Blending_DF_Triangle_3_0, &Blending_DF_Triangle_3_1, &Blending_DF_Triangle_3_2, &Blending_DF_Triangle_3_3 );
      Blending_DF_Triangle( -p_affine_0_0*q_p_4_0 - p_affine_0_0*q_p_4_1 + p_affine_0_0 + p_affine_1_0*q_p_4_0 + p_affine_2_0*q_p_4_1, -p_affine_0_1*q_p_4_0 - p_affine_0_1*q_p_4_1 + p_affine_0_1 + p_affine_1_1*q_p_4_0 + p_affine_2_1*q_p_4_1, &Blending_DF_Triangle_4_0, &Blending_DF_Triangle_4_1, &Blending_DF_Triangle_4_2, &Blending_DF_Triangle_4_3 );
      Blending_DF_Triangle( -p_affine_0_0*q_p_5_0 - p_affine_0_0*q_p_5_1 + p_affine_0_0 + p_affine_1_0*q_p_5_0 + p_affine_2_0*q_p_5_1, -p_affine_0_1*q_p_5_0 - p_affine_0_1*q_p_5_1 + p_affine_0_1 + p_affine_1_1*q_p_5_0 + p_affine_2_1*q_p_5_1, &Blending_DF_Triangle_5_0, &Blending_DF_Triangle_5_1, &Blending_DF_Triangle_5_2, &Blending_DF_Triangle_5_3 );
      real_t tmp_0 = 4*q_p_0_1;
      real_t tmp_1 = q_p_0_0*tmp_0;
      real_t tmp_2 = (q_p_0_0*q_p_0_0);
      real_t tmp_3 = 2*tmp_2;
      real_t tmp_4 = (q_p_0_1*q_p_0_1);
      real_t tmp_5 = 2*tmp_4;
      real_t tmp_6 = -3*q_p_0_0 - 3*q_p_0_1 + tmp_1 + tmp_3 + tmp_5 + 1;
      real_t tmp_7 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_8 = tmp_7*w_p_0*std::abs(Blending_DF_Triangle_0_0*Blending_DF_Triangle_0_3 - Blending_DF_Triangle_0_1*Blending_DF_Triangle_0_2);
      real_t tmp_9 = 4*q_p_1_1;
      real_t tmp_10 = q_p_1_0*tmp_9;
      real_t tmp_11 = (q_p_1_0*q_p_1_0);
      real_t tmp_12 = 2*tmp_11;
      real_t tmp_13 = (q_p_1_1*q_p_1_1);
      real_t tmp_14 = 2*tmp_13;
      real_t tmp_15 = -3*q_p_1_0 - 3*q_p_1_1 + tmp_10 + tmp_12 + tmp_14 + 1;
      real_t tmp_16 = tmp_7*w_p_1*std::abs(Blending_DF_Triangle_1_0*Blending_DF_Triangle_1_3 - Blending_DF_Triangle_1_1*Blending_DF_Triangle_1_2);
      real_t tmp_17 = 4*q_p_2_1;
      real_t tmp_18 = q_p_2_0*tmp_17;
      real_t tmp_19 = (q_p_2_0*q_p_2_0);
      real_t tmp_20 = 2*tmp_19;
      real_t tmp_21 = (q_p_2_1*q_p_2_1);
      real_t tmp_22 = 2*tmp_21;
      real_t tmp_23 = -3*q_p_2_0 - 3*q_p_2_1 + tmp_18 + tmp_20 + tmp_22 + 1;
      real_t tmp_24 = tmp_7*w_p_2*std::abs(Blending_DF_Triangle_2_0*Blending_DF_Triangle_2_3 - Blending_DF_Triangle_2_1*Blending_DF_Triangle_2_2);
      real_t tmp_25 = 4*q_p_3_1;
      real_t tmp_26 = q_p_3_0*tmp_25;
      real_t tmp_27 = (q_p_3_0*q_p_3_0);
      real_t tmp_28 = 2*tmp_27;
      real_t tmp_29 = (q_p_3_1*q_p_3_1);
      real_t tmp_30 = 2*tmp_29;
      real_t tmp_31 = -3*q_p_3_0 - 3*q_p_3_1 + tmp_26 + tmp_28 + tmp_30 + 1;
      real_t tmp_32 = tmp_7*w_p_3*std::abs(Blending_DF_Triangle_3_0*Blending_DF_Triangle_3_3 - Blending_DF_Triangle_3_1*Blending_DF_Triangle_3_2);
      real_t tmp_33 = 4*q_p_4_1;
      real_t tmp_34 = q_p_4_0*tmp_33;
      real_t tmp_35 = (q_p_4_0*q_p_4_0);
      real_t tmp_36 = 2*tmp_35;
      real_t tmp_37 = (q_p_4_1*q_p_4_1);
      real_t tmp_38 = 2*tmp_37;
      real_t tmp_39 = -3*q_p_4_0 - 3*q_p_4_1 + tmp_34 + tmp_36 + tmp_38 + 1;
      real_t tmp_40 = tmp_7*w_p_4*std::abs(Blending_DF_Triangle_4_0*Blending_DF_Triangle_4_3 - Blending_DF_Triangle_4_1*Blending_DF_Triangle_4_2);
      real_t tmp_41 = 4*q_p_5_1;
      real_t tmp_42 = q_p_5_0*tmp_41;
      real_t tmp_43 = (q_p_5_0*q_p_5_0);
      real_t tmp_44 = 2*tmp_43;
      real_t tmp_45 = (q_p_5_1*q_p_5_1);
      real_t tmp_46 = 2*tmp_45;
      real_t tmp_47 = -3*q_p_5_0 - 3*q_p_5_1 + tmp_42 + tmp_44 + tmp_46 + 1;
      real_t tmp_48 = tmp_7*w_p_5*std::abs(Blending_DF_Triangle_5_0*Blending_DF_Triangle_5_3 - Blending_DF_Triangle_5_1*Blending_DF_Triangle_5_2);
      real_t tmp_49 = -q_p_0_0 + tmp_3;
      real_t tmp_50 = tmp_6*tmp_8;
      real_t tmp_51 = -q_p_1_0 + tmp_12;
      real_t tmp_52 = tmp_15*tmp_16;
      real_t tmp_53 = -q_p_2_0 + tmp_20;
      real_t tmp_54 = tmp_23*tmp_24;
      real_t tmp_55 = -q_p_3_0 + tmp_28;
      real_t tmp_56 = tmp_31*tmp_32;
      real_t tmp_57 = -q_p_4_0 + tmp_36;
      real_t tmp_58 = tmp_39*tmp_40;
      real_t tmp_59 = -q_p_5_0 + tmp_44;
      real_t tmp_60 = tmp_47*tmp_48;
      real_t tmp_61 = tmp_49*tmp_50 + tmp_51*tmp_52 + tmp_53*tmp_54 + tmp_55*tmp_56 + tmp_57*tmp_58 + tmp_59*tmp_60;
      real_t tmp_62 = -q_p_0_1 + tmp_5;
      real_t tmp_63 = -q_p_1_1 + tmp_14;
      real_t tmp_64 = -q_p_2_1 + tmp_22;
      real_t tmp_65 = -q_p_3_1 + tmp_30;
      real_t tmp_66 = -q_p_4_1 + tmp_38;
      real_t tmp_67 = -q_p_5_1 + tmp_46;
      real_t tmp_68 = tmp_50*tmp_62 + tmp_52*tmp_63 + tmp_54*tmp_64 + tmp_56*tmp_65 + tmp_58*tmp_66 + tmp_60*tmp_67;
      real_t tmp_69 = tmp_1*tmp_50 + tmp_10*tmp_52 + tmp_18*tmp_54 + tmp_26*tmp_56 + tmp_34*tmp_58 + tmp_42*tmp_60;
      real_t tmp_70 = -tmp_1;
      real_t tmp_71 = tmp_0 - 4*tmp_4 + tmp_70;
      real_t tmp_72 = -tmp_10;
      real_t tmp_73 = -4*tmp_13 + tmp_72 + tmp_9;
      real_t tmp_74 = -tmp_18;
      real_t tmp_75 = tmp_17 - 4*tmp_21 + tmp_74;
      real_t tmp_76 = -tmp_26;
      real_t tmp_77 = tmp_25 - 4*tmp_29 + tmp_76;
      real_t tmp_78 = -tmp_34;
      real_t tmp_79 = tmp_33 - 4*tmp_37 + tmp_78;
      real_t tmp_80 = -tmp_42;
      real_t tmp_81 = tmp_41 - 4*tmp_45 + tmp_80;
      real_t tmp_82 = tmp_50*tmp_71 + tmp_52*tmp_73 + tmp_54*tmp_75 + tmp_56*tmp_77 + tmp_58*tmp_79 + tmp_60*tmp_81;
      real_t tmp_83 = 4*q_p_0_0 - 4*tmp_2 + tmp_70;
      real_t tmp_84 = 4*q_p_1_0 - 4*tmp_11 + tmp_72;
      real_t tmp_85 = 4*q_p_2_0 - 4*tmp_19 + tmp_74;
      real_t tmp_86 = 4*q_p_3_0 - 4*tmp_27 + tmp_76;
      real_t tmp_87 = 4*q_p_4_0 - 4*tmp_35 + tmp_78;
      real_t tmp_88 = 4*q_p_5_0 - 4*tmp_43 + tmp_80;
      real_t tmp_89 = tmp_50*tmp_83 + tmp_52*tmp_84 + tmp_54*tmp_85 + tmp_56*tmp_86 + tmp_58*tmp_87 + tmp_60*tmp_88;
      real_t tmp_90 = tmp_49*tmp_8;
      real_t tmp_91 = tmp_16*tmp_51;
      real_t tmp_92 = tmp_24*tmp_53;
      real_t tmp_93 = tmp_32*tmp_55;
      real_t tmp_94 = tmp_40*tmp_57;
      real_t tmp_95 = tmp_48*tmp_59;
      real_t tmp_96 = tmp_62*tmp_90 + tmp_63*tmp_91 + tmp_64*tmp_92 + tmp_65*tmp_93 + tmp_66*tmp_94 + tmp_67*tmp_95;
      real_t tmp_97 = tmp_1*tmp_90 + tmp_10*tmp_91 + tmp_18*tmp_92 + tmp_26*tmp_93 + tmp_34*tmp_94 + tmp_42*tmp_95;
      real_t tmp_98 = tmp_71*tmp_90 + tmp_73*tmp_91 + tmp_75*tmp_92 + tmp_77*tmp_93 + tmp_79*tmp_94 + tmp_81*tmp_95;
      real_t tmp_99 = tmp_83*tmp_90 + tmp_84*tmp_91 + tmp_85*tmp_92 + tmp_86*tmp_93 + tmp_87*tmp_94 + tmp_88*tmp_95;
      real_t tmp_100 = tmp_62*tmp_8;
      real_t tmp_101 = tmp_16*tmp_63;
      real_t tmp_102 = tmp_24*tmp_64;
      real_t tmp_103 = tmp_32*tmp_65;
      real_t tmp_104 = tmp_40*tmp_66;
      real_t tmp_105 = tmp_48*tmp_67;
      real_t tmp_106 = tmp_1*tmp_100 + tmp_10*tmp_101 + tmp_102*tmp_18 + tmp_103*tmp_26 + tmp_104*tmp_34 + tmp_105*tmp_42;
      real_t tmp_107 = tmp_100*tmp_71 + tmp_101*tmp_73 + tmp_102*tmp_75 + tmp_103*tmp_77 + tmp_104*tmp_79 + tmp_105*tmp_81;
      real_t tmp_108 = tmp_100*tmp_83 + tmp_101*tmp_84 + tmp_102*tmp_85 + tmp_103*tmp_86 + tmp_104*tmp_87 + tmp_105*tmp_88;
      real_t tmp_109 = tmp_71*tmp_8;
      real_t tmp_110 = tmp_16*tmp_73;
      real_t tmp_111 = tmp_24*tmp_75;
      real_t tmp_112 = tmp_32*tmp_77;
      real_t tmp_113 = tmp_40*tmp_79;
      real_t tmp_114 = tmp_48*tmp_81;
      real_t tmp_115 = tmp_1*tmp_109 + tmp_10*tmp_110 + tmp_111*tmp_18 + tmp_112*tmp_26 + tmp_113*tmp_34 + tmp_114*tmp_42;
      real_t tmp_116 = tmp_1*tmp_8*tmp_83 + tmp_10*tmp_16*tmp_84 + tmp_18*tmp_24*tmp_85 + tmp_26*tmp_32*tmp_86 + tmp_34*tmp_40*tmp_87 + tmp_42*tmp_48*tmp_88;
      real_t tmp_117 = tmp_109*tmp_83 + tmp_110*tmp_84 + tmp_111*tmp_85 + tmp_112*tmp_86 + tmp_113*tmp_87 + tmp_114*tmp_88;
      real_t a_0_0 = (tmp_15*tmp_15)*tmp_16 + (tmp_23*tmp_23)*tmp_24 + (tmp_31*tmp_31)*tmp_32 + (tmp_39*tmp_39)*tmp_40 + (tmp_47*tmp_47)*tmp_48 + (tmp_6*tmp_6)*tmp_8;
      real_t a_0_1 = tmp_61;
      real_t a_0_2 = tmp_68;
      real_t a_0_3 = tmp_69;
      real_t a_0_4 = tmp_82;
      real_t a_0_5 = tmp_89;
      real_t a_1_0 = tmp_61;
      real_t a_1_1 = tmp_16*(tmp_51*tmp_51) + tmp_24*(tmp_53*tmp_53) + tmp_32*(tmp_55*tmp_55) + tmp_40*(tmp_57*tmp_57) + tmp_48*(tmp_59*tmp_59) + (tmp_49*tmp_49)*tmp_8;
      real_t a_1_2 = tmp_96;
      real_t a_1_3 = tmp_97;
      real_t a_1_4 = tmp_98;
      real_t a_1_5 = tmp_99;
      real_t a_2_0 = tmp_68;
      real_t a_2_1 = tmp_96;
      real_t a_2_2 = tmp_16*(tmp_63*tmp_63) + tmp_24*(tmp_64*tmp_64) + tmp_32*(tmp_65*tmp_65) + tmp_40*(tmp_66*tmp_66) + tmp_48*(tmp_67*tmp_67) + (tmp_62*tmp_62)*tmp_8;
      real_t a_2_3 = tmp_106;
      real_t a_2_4 = tmp_107;
      real_t a_2_5 = tmp_108;
      real_t a_3_0 = tmp_69;
      real_t a_3_1 = tmp_97;
      real_t a_3_2 = tmp_106;
      real_t a_3_3 = 16*tmp_11*tmp_13*tmp_16 + 16*tmp_19*tmp_21*tmp_24 + 16*tmp_2*tmp_4*tmp_8 + 16*tmp_27*tmp_29*tmp_32 + 16*tmp_35*tmp_37*tmp_40 + 16*tmp_43*tmp_45*tmp_48;
      real_t a_3_4 = tmp_115;
      real_t a_3_5 = tmp_116;
      real_t a_4_0 = tmp_82;
      real_t a_4_1 = tmp_98;
      real_t a_4_2 = tmp_107;
      real_t a_4_3 = tmp_115;
      real_t a_4_4 = tmp_16*(tmp_73*tmp_73) + tmp_24*(tmp_75*tmp_75) + tmp_32*(tmp_77*tmp_77) + tmp_40*(tmp_79*tmp_79) + tmp_48*(tmp_81*tmp_81) + (tmp_71*tmp_71)*tmp_8;
      real_t a_4_5 = tmp_117;
      real_t a_5_0 = tmp_89;
      real_t a_5_1 = tmp_99;
      real_t a_5_2 = tmp_108;
      real_t a_5_3 = tmp_116;
      real_t a_5_4 = tmp_117;
      real_t a_5_5 = tmp_16*(tmp_84*tmp_84) + tmp_24*(tmp_85*tmp_85) + tmp_32*(tmp_86*tmp_86) + tmp_40*(tmp_87*tmp_87) + tmp_48*(tmp_88*tmp_88) + tmp_8*(tmp_83*tmp_83);
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
      (elMat(0, 4)) = a_0_4;
      (elMat(0, 5)) = a_0_5;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(1, 3)) = a_1_3;
      (elMat(1, 4)) = a_1_4;
      (elMat(1, 5)) = a_1_5;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
      (elMat(2, 3)) = a_2_3;
      (elMat(2, 4)) = a_2_4;
      (elMat(2, 5)) = a_2_5;
      (elMat(3, 0)) = a_3_0;
      (elMat(3, 1)) = a_3_1;
      (elMat(3, 2)) = a_3_2;
      (elMat(3, 3)) = a_3_3;
      (elMat(3, 4)) = a_3_4;
      (elMat(3, 5)) = a_3_5;
      (elMat(4, 0)) = a_4_0;
      (elMat(4, 1)) = a_4_1;
      (elMat(4, 2)) = a_4_2;
      (elMat(4, 3)) = a_4_3;
      (elMat(4, 4)) = a_4_4;
      (elMat(4, 5)) = a_4_5;
      (elMat(5, 0)) = a_5_0;
      (elMat(5, 1)) = a_5_1;
      (elMat(5, 2)) = a_5_2;
      (elMat(5, 3)) = a_5_3;
      (elMat(5, 4)) = a_5_4;
      (elMat(5, 5)) = a_5_5;
   }

   /// \brief Integrates the weak form over the passed element (vertices in computational space).
   ///
   /// - element geometry:                       tetrahedron, dim: 3, vertices: 4
   /// - element matrix dimensions (rows, cols): (10, 10)
   /// - quadrature rule:                        Xiao-Gimbutas 4 | points: 11, degree: 4, test tolerance: 2.379e-17
   /// - floating point operations:
   ///                                             adds    muls    divs    abs    assignments    function_calls
   ///                                           ------  ------  ------  -----  -------------  ----------------
   ///                                             1288    1533       0     12            821                11
   ///
   void integrateAll( const std::array< Point3D, 4 >& coords, Matrix< real_t, 10, 10 >& elMat ) const override
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_0_0 = 0;
      real_t Blending_DF_Tetrahedron_0_1 = 0;
      real_t Blending_DF_Tetrahedron_0_2 = 0;
      real_t Blending_DF_Tetrahedron_0_3 = 0;
      real_t Blending_DF_Tetrahedron_0_4 = 0;
      real_t Blending_DF_Tetrahedron_0_5 = 0;
      real_t Blending_DF_Tetrahedron_0_6 = 0;
      real_t Blending_DF_Tetrahedron_0_7 = 0;
      real_t Blending_DF_Tetrahedron_0_8 = 0;
      real_t Blending_DF_Tetrahedron_1_0 = 0;
      real_t Blending_DF_Tetrahedron_1_1 = 0;
      real_t Blending_DF_Tetrahedron_1_2 = 0;
      real_t Blending_DF_Tetrahedron_1_3 = 0;
      real_t Blending_DF_Tetrahedron_1_4 = 0;
      real_t Blending_DF_Tetrahedron_1_5 = 0;
      real_t Blending_DF_Tetrahedron_1_6 = 0;
      real_t Blending_DF_Tetrahedron_1_7 = 0;
      real_t Blending_DF_Tetrahedron_1_8 = 0;
      real_t Blending_DF_Tetrahedron_2_0 = 0;
      real_t Blending_DF_Tetrahedron_2_1 = 0;
      real_t Blending_DF_Tetrahedron_2_2 = 0;
      real_t Blending_DF_Tetrahedron_2_3 = 0;
      real_t Blending_DF_Tetrahedron_2_4 = 0;
      real_t Blending_DF_Tetrahedron_2_5 = 0;
      real_t Blending_DF_Tetrahedron_2_6 = 0;
      real_t Blending_DF_Tetrahedron_2_7 = 0;
      real_t Blending_DF_Tetrahedron_2_8 = 0;
      real_t Blending_DF_Tetrahedron_3_0 = 0;
      real_t Blending_DF_Tetrahedron_3_1 = 0;
      real_t Blending_DF_Tetrahedron_3_2 = 0;
      real_t Blending_DF_Tetrahedron_3_3 = 0;
      real_t Blending_DF_Tetrahedron_3_4 = 0;
      real_t Blending_DF_Tetrahedron_3_5 = 0;
      real_t Blending_DF_Tetrahedron_3_6 = 0;
      real_t Blending_DF_Tetrahedron_3_7 = 0;
      real_t Blending_DF_Tetrahedron_3_8 = 0;
      real_t Blending_DF_Tetrahedron_4_0 = 0;
      real_t Blending_DF_Tetrahedron_4_1 = 0;
      real_t Blending_DF_Tetrahedron_4_2 = 0;
      real_t Blending_DF_Tetrahedron_4_3 = 0;
      real_t Blending_DF_Tetrahedron_4_4 = 0;
      real_t Blending_DF_Tetrahedron_4_5 = 0;
      real_t Blending_DF_Tetrahedron_4_6 = 0;
      real_t Blending_DF_Tetrahedron_4_7 = 0;
      real_t Blending_DF_Tetrahedron_4_8 = 0;
      real_t Blending_DF_Tetrahedron_5_0 = 0;
      real_t Blending_DF_Tetrahedron_5_1 = 0;
      real_t Blending_DF_Tetrahedron_5_2 = 0;
      real_t Blending_DF_Tetrahedron_5_3 = 0;
      real_t Blending_DF_Tetrahedron_5_4 = 0;
      real_t Blending_DF_Tetrahedron_5_5 = 0;
      real_t Blending_DF_Tetrahedron_5_6 = 0;
      real_t Blending_DF_Tetrahedron_5_7 = 0;
      real_t Blending_DF_Tetrahedron_5_8 = 0;
      real_t Blending_DF_Tetrahedron_6_0 = 0;
      real_t Blending_DF_Tetrahedron_6_1 = 0;
      real_t Blending_DF_Tetrahedron_6_2 = 0;
      real_t Blending_DF_Tetrahedron_6_3 = 0;
      real_t Blending_DF_Tetrahedron_6_4 = 0;
      real_t Blending_DF_Tetrahedron_6_5 = 0;
      real_t Blending_DF_Tetrahedron_6_6 = 0;
      real_t Blending_DF_Tetrahedron_6_7 = 0;
      real_t Blending_DF_Tetrahedron_6_8 = 0;
      real_t Blending_DF_Tetrahedron_7_0 = 0;
      real_t Blending_DF_Tetrahedron_7_1 = 0;
      real_t Blending_DF_Tetrahedron_7_2 = 0;
      real_t Blending_DF_Tetrahedron_7_3 = 0;
      real_t Blending_DF_Tetrahedron_7_4 = 0;
      real_t Blending_DF_Tetrahedron_7_5 = 0;
      real_t Blending_DF_Tetrahedron_7_6 = 0;
      real_t Blending_DF_Tetrahedron_7_7 = 0;
      real_t Blending_DF_Tetrahedron_7_8 = 0;
      real_t Blending_DF_Tetrahedron_8_0 = 0;
      real_t Blending_DF_Tetrahedron_8_1 = 0;
      real_t Blending_DF_Tetrahedron_8_2 = 0;
      real_t Blending_DF_Tetrahedron_8_3 = 0;
      real_t Blending_DF_Tetrahedron_8_4 = 0;
      real_t Blending_DF_Tetrahedron_8_5 = 0;
      real_t Blending_DF_Tetrahedron_8_6 = 0;
      real_t Blending_DF_Tetrahedron_8_7 = 0;
      real_t Blending_DF_Tetrahedron_8_8 = 0;
      real_t Blending_DF_Tetrahedron_9_0 = 0;
      real_t Blending_DF_Tetrahedron_9_1 = 0;
      real_t Blending_DF_Tetrahedron_9_2 = 0;
      real_t Blending_DF_Tetrahedron_9_3 = 0;
      real_t Blending_DF_Tetrahedron_9_4 = 0;
      real_t Blending_DF_Tetrahedron_9_5 = 0;
      real_t Blending_DF_Tetrahedron_9_6 = 0;
      real_t Blending_DF_Tetrahedron_9_7 = 0;
      real_t Blending_DF_Tetrahedron_9_8 = 0;
      real_t Blending_DF_Tetrahedron_10_0 = 0;
      real_t Blending_DF_Tetrahedron_10_1 = 0;
      real_t Blending_DF_Tetrahedron_10_2 = 0;
      real_t Blending_DF_Tetrahedron_10_3 = 0;
      real_t Blending_DF_Tetrahedron_10_4 = 0;
      real_t Blending_DF_Tetrahedron_10_5 = 0;
      real_t Blending_DF_Tetrahedron_10_6 = 0;
      real_t Blending_DF_Tetrahedron_10_7 = 0;
      real_t Blending_DF_Tetrahedron_10_8 = 0;
      real_t q_p_0_0 = 0.040490506727590428;
      real_t q_p_0_1 = 0.01356070187980288;
      real_t q_p_0_2 = 0.77125473269537614;
      real_t q_p_1_0 = 0.75250850700965499;
      real_t q_p_1_1 = 0.068099370938206658;
      real_t q_p_1_2 = 0.097987203649279112;
      real_t q_p_2_0 = 0.067223294893383398;
      real_t q_p_2_1 = 0.035183929773598722;
      real_t q_p_2_2 = 0.15636389323939531;
      real_t q_p_3_0 = 0.41926631387951302;
      real_t q_p_3_1 = 0.047781435559086663;
      real_t q_p_3_2 = 0.47961101102565512;
      real_t q_p_4_0 = 0.45076587609127677;
      real_t q_p_4_1 = 0.059456616299433829;
      real_t q_p_4_2 = 0.056824017127933668;
      real_t q_p_5_0 = 0.12941137378891041;
      real_t q_p_5_1 = 0.33019041483746447;
      real_t q_p_5_2 = 0.0023910074574393651;
      real_t q_p_6_0 = 0.1215419913339278;
      real_t q_p_6_1 = 0.30649398842969028;
      real_t q_p_6_2 = 0.56297276014304609;
      real_t q_p_7_0 = 0.097204644587583267;
      real_t q_p_7_1 = 0.68439041545304002;
      real_t q_p_7_2 = 0.11180076739738309;
      real_t q_p_8_0 = 0.029569495206479609;
      real_t q_p_8_1 = 0.31790356021339461;
      real_t q_p_8_2 = 0.32329398483747901;
      real_t q_p_9_0 = 0.43271023904776862;
      real_t q_p_9_1 = 0.35382323920929709;
      real_t q_p_9_2 = 0.1096224053319412;
      real_t q_p_10_0 = 0.24027666492807259;
      real_t q_p_10_1 = 0.12680172591539199;
      real_t q_p_10_2 = 0.32847320672203839;
      real_t w_p_0 = 0.006541848487473325;
      real_t w_p_1 = 0.0092122281926561474;
      real_t w_p_2 = 0.0092322998119293929;
      real_t w_p_3 = 0.0099888641910932524;
      real_t w_p_4 = 0.011578327656272558;
      real_t w_p_5 = 0.012693785874259723;
      real_t w_p_6 = 0.013237780011337548;
      real_t w_p_7 = 0.017744672359248346;
      real_t w_p_8 = 0.018372372071416277;
      real_t w_p_9 = 0.025829352669374347;
      real_t w_p_10 = 0.032235135341605742;
      Blending_DF_Tetrahedron( -p_affine_0_0*q_p_0_0 - p_affine_0_0*q_p_0_1 - p_affine_0_0*q_p_0_2 + p_affine_0_0 + p_affine_1_0*q_p_0_0 + p_affine_2_0*q_p_0_1 + p_affine_3_0*q_p_0_2, -p_affine_0_1*q_p_0_0 - p_affine_0_1*q_p_0_1 - p_affine_0_1*q_p_0_2 + p_affine_0_1 + p_affine_1_1*q_p_0_0 + p_affine_2_1*q_p_0_1 + p_affine_3_1*q_p_0_2, -p_affine_0_2*q_p_0_0 - p_affine_0_2*q_p_0_1 - p_affine_0_2*q_p_0_2 + p_affine_0_2 + p_affine_1_2*q_p_0_0 + p_affine_2_2*q_p_0_1 + p_affine_3_2*q_p_0_2, &Blending_DF_Tetrahedron_0_0, &Blending_DF_Tetrahedron_0_1, &Blending_DF_Tetrahedron_0_2, &Blending_DF_Tetrahedron_0_3, &Blending_DF_Tetrahedron_0_4, &Blending_DF_Tetrahedron_0_5, &Blending_DF_Tetrahedron_0_6, &Blending_DF_Tetrahedron_0_7, &Blending_DF_Tetrahedron_0_8 );
      Blending_DF_Tetrahedron( -p_affine_0_0*q_p_1_0 - p_affine_0_0*q_p_1_1 - p_affine_0_0*q_p_1_2 + p_affine_0_0 + p_affine_1_0*q_p_1_0 + p_affine_2_0*q_p_1_1 + p_affine_3_0*q_p_1_2, -p_affine_0_1*q_p_1_0 - p_affine_0_1*q_p_1_1 - p_affine_0_1*q_p_1_2 + p_affine_0_1 + p_affine_1_1*q_p_1_0 + p_affine_2_1*q_p_1_1 + p_affine_3_1*q_p_1_2, -p_affine_0_2*q_p_1_0 - p_affine_0_2*q_p_1_1 - p_affine_0_2*q_p_1_2 + p_affine_0_2 + p_affine_1_2*q_p_1_0 + p_affine_2_2*q_p_1_1 + p_affine_3_2*q_p_1_2, &Blending_DF_Tetrahedron_1_0, &Blending_DF_Tetrahedron_1_1, &Blending_DF_Tetrahedron_1_2, &Blending_DF_Tetrahedron_1_3, &Blending_DF_Tetrahedron_1_4, &Blending_DF_Tetrahedron_1_5, &Blending_DF_Tetrahedron_1_6, &Blending_DF_Tetrahedron_1_7, &Blending_DF_Tetrahedron_1_8 );
      Blending_DF_Tetrahedron( -p_affine_0_0*q_p_10_0 - p_affine_0_0*q_p_10_1 - p_affine_0_0*q_p_10_2 + p_affine_0_0 + p_affine_1_0*q_p_10_0 + p_affine_2_0*q_p_10_1 + p_affine_3_0*q_p_10_2, -p_affine_0_1*q_p_10_0 - p_affine_0_1*q_p_10_1 - p_affine_0_1*q_p_10_2 + p_affine_0_1 + p_affine_1_1*q_p_10_0 + p_affine_2_1*q_p_10_1 + p_affine_3_1*q_p_10_2, -p_affine_0_2*q_p_10_0 - p_affine_0_2*q_p_10_1 - p_affine_0_2*q_p_10_2 + p_affine_0_2 + p_affine_1_2*q_p_10_0 + p_affine_2_2*q_p_10_1 + p_affine_3_2*q_p_10_2, &Blending_DF_Tetrahedron_2_0, &Blending_DF_Tetrahedron_2_1, &Blending_DF_Tetrahedron_2_2, &Blending_DF_Tetrahedron_2_3, &Blending_DF_Tetrahedron_2_4, &Blending_DF_Tetrahedron_2_5, &Blending_DF_Tetrahedron_2_6, &Blending_DF_Tetrahedron_2_7, &Blending_DF_Tetrahedron_2_8 );
      Blending_DF_Tetrahedron( -p_affine_0_0*q_p_2_0 - p_affine_0_0*q_p_2_1 - p_affine_0_0*q_p_2_2 + p_affine_0_0 + p_affine_1_0*q_p_2_0 + p_affine_2_0*q_p_2_1 + p_affine_3_0*q_p_2_2, -p_affine_0_1*q_p_2_0 - p_affine_0_1*q_p_2_1 - p_affine_0_1*q_p_2_2 + p_affine_0_1 + p_affine_1_1*q_p_2_0 + p_affine_2_1*q_p_2_1 + p_affine_3_1*q_p_2_2, -p_affine_0_2*q_p_2_0 - p_affine_0_2*q_p_2_1 - p_affine_0_2*q_p_2_2 + p_affine_0_2 + p_affine_1_2*q_p_2_0 + p_affine_2_2*q_p_2_1 + p_affine_3_2*q_p_2_2, &Blending_DF_Tetrahedron_3_0, &Blending_DF_Tetrahedron_3_1, &Blending_DF_Tetrahedron_3_2, &Blending_DF_Tetrahedron_3_3, &Blending_DF_Tetrahedron_3_4, &Blending_DF_Tetrahedron_3_5, &Blending_DF_Tetrahedron_3_6, &Blending_DF_Tetrahedron_3_7, &Blending_DF_Tetrahedron_3_8 );
      Blending_DF_Tetrahedron( -p_affine_0_0*q_p_3_0 - p_affine_0_0*q_p_3_1 - p_affine_0_0*q_p_3_2 + p_affine_0_0 + p_affine_1_0*q_p_3_0 + p_affine_2_0*q_p_3_1 + p_affine_3_0*q_p_3_2, -p_affine_0_1*q_p_3_0 - p_affine_0_1*q_p_3_1 - p_affine_0_1*q_p_3_2 + p_affine_0_1 + p_affine_1_1*q_p_3_0 + p_affine_2_1*q_p_3_1 + p_affine_3_1*q_p_3_2, -p_affine_0_2*q_p_3_0 - p_affine_0_2*q_p_3_1 - p_affine_0_2*q_p_3_2 + p_affine_0_2 + p_affine_1_2*q_p_3_0 + p_affine_2_2*q_p_3_1 + p_affine_3_2*q_p_3_2, &Blending_DF_Tetrahedron_4_0, &Blending_DF_Tetrahedron_4_1, &Blending_DF_Tetrahedron_4_2, &Blending_DF_Tetrahedron_4_3, &Blending_DF_Tetrahedron_4_4, &Blending_DF_Tetrahedron_4_5, &Blending_DF_Tetrahedron_4_6, &Blending_DF_Tetrahedron_4_7, &Blending_DF_Tetrahedron_4_8 );
      Blending_DF_Tetrahedron( -p_affine_0_0*q_p_4_0 - p_affine_0_0*q_p_4_1 - p_affine_0_0*q_p_4_2 + p_affine_0_0 + p_affine_1_0*q_p_4_0 + p_affine_2_0*q_p_4_1 + p_affine_3_0*q_p_4_2, -p_affine_0_1*q_p_4_0 - p_affine_0_1*q_p_4_1 - p_affine_0_1*q_p_4_2 + p_affine_0_1 + p_affine_1_1*q_p_4_0 + p_affine_2_1*q_p_4_1 + p_affine_3_1*q_p_4_2, -p_affine_0_2*q_p_4_0 - p_affine_0_2*q_p_4_1 - p_affine_0_2*q_p_4_2 + p_affine_0_2 + p_affine_1_2*q_p_4_0 + p_affine_2_2*q_p_4_1 + p_affine_3_2*q_p_4_2, &Blending_DF_Tetrahedron_5_0, &Blending_DF_Tetrahedron_5_1, &Blending_DF_Tetrahedron_5_2, &Blending_DF_Tetrahedron_5_3, &Blending_DF_Tetrahedron_5_4, &Blending_DF_Tetrahedron_5_5, &Blending_DF_Tetrahedron_5_6, &Blending_DF_Tetrahedron_5_7, &Blending_DF_Tetrahedron_5_8 );
      Blending_DF_Tetrahedron( -p_affine_0_0*q_p_5_0 - p_affine_0_0*q_p_5_1 - p_affine_0_0*q_p_5_2 + p_affine_0_0 + p_affine_1_0*q_p_5_0 + p_affine_2_0*q_p_5_1 + p_affine_3_0*q_p_5_2, -p_affine_0_1*q_p_5_0 - p_affine_0_1*q_p_5_1 - p_affine_0_1*q_p_5_2 + p_affine_0_1 + p_affine_1_1*q_p_5_0 + p_affine_2_1*q_p_5_1 + p_affine_3_1*q_p_5_2, -p_affine_0_2*q_p_5_0 - p_affine_0_2*q_p_5_1 - p_affine_0_2*q_p_5_2 + p_affine_0_2 + p_affine_1_2*q_p_5_0 + p_affine_2_2*q_p_5_1 + p_affine_3_2*q_p_5_2, &Blending_DF_Tetrahedron_6_0, &Blending_DF_Tetrahedron_6_1, &Blending_DF_Tetrahedron_6_2, &Blending_DF_Tetrahedron_6_3, &Blending_DF_Tetrahedron_6_4, &Blending_DF_Tetrahedron_6_5, &Blending_DF_Tetrahedron_6_6, &Blending_DF_Tetrahedron_6_7, &Blending_DF_Tetrahedron_6_8 );
      Blending_DF_Tetrahedron( -p_affine_0_0*q_p_6_0 - p_affine_0_0*q_p_6_1 - p_affine_0_0*q_p_6_2 + p_affine_0_0 + p_affine_1_0*q_p_6_0 + p_affine_2_0*q_p_6_1 + p_affine_3_0*q_p_6_2, -p_affine_0_1*q_p_6_0 - p_affine_0_1*q_p_6_1 - p_affine_0_1*q_p_6_2 + p_affine_0_1 + p_affine_1_1*q_p_6_0 + p_affine_2_1*q_p_6_1 + p_affine_3_1*q_p_6_2, -p_affine_0_2*q_p_6_0 - p_affine_0_2*q_p_6_1 - p_affine_0_2*q_p_6_2 + p_affine_0_2 + p_affine_1_2*q_p_6_0 + p_affine_2_2*q_p_6_1 + p_affine_3_2*q_p_6_2, &Blending_DF_Tetrahedron_7_0, &Blending_DF_Tetrahedron_7_1, &Blending_DF_Tetrahedron_7_2, &Blending_DF_Tetrahedron_7_3, &Blending_DF_Tetrahedron_7_4, &Blending_DF_Tetrahedron_7_5, &Blending_DF_Tetrahedron_7_6, &Blending_DF_Tetrahedron_7_7, &Blending_DF_Tetrahedron_7_8 );
      Blending_DF_Tetrahedron( -p_affine_0_0*q_p_7_0 - p_affine_0_0*q_p_7_1 - p_affine_0_0*q_p_7_2 + p_affine_0_0 + p_affine_1_0*q_p_7_0 + p_affine_2_0*q_p_7_1 + p_affine_3_0*q_p_7_2, -p_affine_0_1*q_p_7_0 - p_affine_0_1*q_p_7_1 - p_affine_0_1*q_p_7_2 + p_affine_0_1 + p_affine_1_1*q_p_7_0 + p_affine_2_1*q_p_7_1 + p_affine_3_1*q_p_7_2, -p_affine_0_2*q_p_7_0 - p_affine_0_2*q_p_7_1 - p_affine_0_2*q_p_7_2 + p_affine_0_2 + p_affine_1_2*q_p_7_0 + p_affine_2_2*q_p_7_1 + p_affine_3_2*q_p_7_2, &Blending_DF_Tetrahedron_8_0, &Blending_DF_Tetrahedron_8_1, &Blending_DF_Tetrahedron_8_2, &Blending_DF_Tetrahedron_8_3, &Blending_DF_Tetrahedron_8_4, &Blending_DF_Tetrahedron_8_5, &Blending_DF_Tetrahedron_8_6, &Blending_DF_Tetrahedron_8_7, &Blending_DF_Tetrahedron_8_8 );
      Blending_DF_Tetrahedron( -p_affine_0_0*q_p_8_0 - p_affine_0_0*q_p_8_1 - p_affine_0_0*q_p_8_2 + p_affine_0_0 + p_affine_1_0*q_p_8_0 + p_affine_2_0*q_p_8_1 + p_affine_3_0*q_p_8_2, -p_affine_0_1*q_p_8_0 - p_affine_0_1*q_p_8_1 - p_affine_0_1*q_p_8_2 + p_affine_0_1 + p_affine_1_1*q_p_8_0 + p_affine_2_1*q_p_8_1 + p_affine_3_1*q_p_8_2, -p_affine_0_2*q_p_8_0 - p_affine_0_2*q_p_8_1 - p_affine_0_2*q_p_8_2 + p_affine_0_2 + p_affine_1_2*q_p_8_0 + p_affine_2_2*q_p_8_1 + p_affine_3_2*q_p_8_2, &Blending_DF_Tetrahedron_9_0, &Blending_DF_Tetrahedron_9_1, &Blending_DF_Tetrahedron_9_2, &Blending_DF_Tetrahedron_9_3, &Blending_DF_Tetrahedron_9_4, &Blending_DF_Tetrahedron_9_5, &Blending_DF_Tetrahedron_9_6, &Blending_DF_Tetrahedron_9_7, &Blending_DF_Tetrahedron_9_8 );
      Blending_DF_Tetrahedron( -p_affine_0_0*q_p_9_0 - p_affine_0_0*q_p_9_1 - p_affine_0_0*q_p_9_2 + p_affine_0_0 + p_affine_1_0*q_p_9_0 + p_affine_2_0*q_p_9_1 + p_affine_3_0*q_p_9_2, -p_affine_0_1*q_p_9_0 - p_affine_0_1*q_p_9_1 - p_affine_0_1*q_p_9_2 + p_affine_0_1 + p_affine_1_1*q_p_9_0 + p_affine_2_1*q_p_9_1 + p_affine_3_1*q_p_9_2, -p_affine_0_2*q_p_9_0 - p_affine_0_2*q_p_9_1 - p_affine_0_2*q_p_9_2 + p_affine_0_2 + p_affine_1_2*q_p_9_0 + p_affine_2_2*q_p_9_1 + p_affine_3_2*q_p_9_2, &Blending_DF_Tetrahedron_10_0, &Blending_DF_Tetrahedron_10_1, &Blending_DF_Tetrahedron_10_2, &Blending_DF_Tetrahedron_10_3, &Blending_DF_Tetrahedron_10_4, &Blending_DF_Tetrahedron_10_5, &Blending_DF_Tetrahedron_10_6, &Blending_DF_Tetrahedron_10_7, &Blending_DF_Tetrahedron_10_8 );
      real_t tmp_0 = q_p_0_0*q_p_0_1;
      real_t tmp_1 = q_p_0_0*q_p_0_2;
      real_t tmp_2 = q_p_0_1*q_p_0_2;
      real_t tmp_3 = (q_p_0_0*q_p_0_0);
      real_t tmp_4 = (q_p_0_1*q_p_0_1);
      real_t tmp_5 = (q_p_0_2*q_p_0_2);
      real_t tmp_6 = p_affine_0_0*p_affine_1_1;
      real_t tmp_7 = p_affine_0_0*p_affine_1_2;
      real_t tmp_8 = p_affine_2_1*p_affine_3_2;
      real_t tmp_9 = p_affine_0_1*p_affine_1_0;
      real_t tmp_10 = p_affine_0_1*p_affine_1_2;
      real_t tmp_11 = p_affine_2_2*p_affine_3_0;
      real_t tmp_12 = p_affine_0_2*p_affine_1_0;
      real_t tmp_13 = p_affine_0_2*p_affine_1_1;
      real_t tmp_14 = p_affine_2_0*p_affine_3_1;
      real_t tmp_15 = p_affine_2_2*p_affine_3_1;
      real_t tmp_16 = p_affine_2_0*p_affine_3_2;
      real_t tmp_17 = p_affine_2_1*p_affine_3_0;
      real_t tmp_18 = std::abs(p_affine_0_0*tmp_15 - p_affine_0_0*tmp_8 - p_affine_0_1*tmp_11 + p_affine_0_1*tmp_16 - p_affine_0_2*tmp_14 + p_affine_0_2*tmp_17 - p_affine_1_0*tmp_15 + p_affine_1_0*tmp_8 + p_affine_1_1*tmp_11 - p_affine_1_1*tmp_16 + p_affine_1_2*tmp_14 - p_affine_1_2*tmp_17 - p_affine_2_0*tmp_10 + p_affine_2_0*tmp_13 - p_affine_2_1*tmp_12 + p_affine_2_1*tmp_7 - p_affine_2_2*tmp_6 + p_affine_2_2*tmp_9 + p_affine_3_0*tmp_10 - p_affine_3_0*tmp_13 + p_affine_3_1*tmp_12 - p_affine_3_1*tmp_7 + p_affine_3_2*tmp_6 - p_affine_3_2*tmp_9);
      real_t tmp_19 = 16.0*tmp_18;
      real_t tmp_20 = w_p_0*std::abs(Blending_DF_Tetrahedron_0_0*Blending_DF_Tetrahedron_0_4*Blending_DF_Tetrahedron_0_8 - Blending_DF_Tetrahedron_0_0*Blending_DF_Tetrahedron_0_5*Blending_DF_Tetrahedron_0_7 - Blending_DF_Tetrahedron_0_1*Blending_DF_Tetrahedron_0_3*Blending_DF_Tetrahedron_0_8 + Blending_DF_Tetrahedron_0_1*Blending_DF_Tetrahedron_0_5*Blending_DF_Tetrahedron_0_6 + Blending_DF_Tetrahedron_0_2*Blending_DF_Tetrahedron_0_3*Blending_DF_Tetrahedron_0_7 - Blending_DF_Tetrahedron_0_2*Blending_DF_Tetrahedron_0_4*Blending_DF_Tetrahedron_0_6);
      real_t tmp_21 = tmp_19*tmp_20;
      real_t tmp_22 = q_p_1_0*q_p_1_1;
      real_t tmp_23 = q_p_1_0*q_p_1_2;
      real_t tmp_24 = q_p_1_1*q_p_1_2;
      real_t tmp_25 = (q_p_1_0*q_p_1_0);
      real_t tmp_26 = (q_p_1_1*q_p_1_1);
      real_t tmp_27 = (q_p_1_2*q_p_1_2);
      real_t tmp_28 = w_p_1*std::abs(Blending_DF_Tetrahedron_1_0*Blending_DF_Tetrahedron_1_4*Blending_DF_Tetrahedron_1_8 - Blending_DF_Tetrahedron_1_0*Blending_DF_Tetrahedron_1_5*Blending_DF_Tetrahedron_1_7 - Blending_DF_Tetrahedron_1_1*Blending_DF_Tetrahedron_1_3*Blending_DF_Tetrahedron_1_8 + Blending_DF_Tetrahedron_1_1*Blending_DF_Tetrahedron_1_5*Blending_DF_Tetrahedron_1_6 + Blending_DF_Tetrahedron_1_2*Blending_DF_Tetrahedron_1_3*Blending_DF_Tetrahedron_1_7 - Blending_DF_Tetrahedron_1_2*Blending_DF_Tetrahedron_1_4*Blending_DF_Tetrahedron_1_6);
      real_t tmp_29 = tmp_19*tmp_28;
      real_t tmp_30 = q_p_10_0*q_p_10_1;
      real_t tmp_31 = q_p_10_0*q_p_10_2;
      real_t tmp_32 = q_p_10_1*q_p_10_2;
      real_t tmp_33 = (q_p_10_0*q_p_10_0);
      real_t tmp_34 = (q_p_10_1*q_p_10_1);
      real_t tmp_35 = (q_p_10_2*q_p_10_2);
      real_t tmp_36 = w_p_10*std::abs(Blending_DF_Tetrahedron_2_0*Blending_DF_Tetrahedron_2_4*Blending_DF_Tetrahedron_2_8 - Blending_DF_Tetrahedron_2_0*Blending_DF_Tetrahedron_2_5*Blending_DF_Tetrahedron_2_7 - Blending_DF_Tetrahedron_2_1*Blending_DF_Tetrahedron_2_3*Blending_DF_Tetrahedron_2_8 + Blending_DF_Tetrahedron_2_1*Blending_DF_Tetrahedron_2_5*Blending_DF_Tetrahedron_2_6 + Blending_DF_Tetrahedron_2_2*Blending_DF_Tetrahedron_2_3*Blending_DF_Tetrahedron_2_7 - Blending_DF_Tetrahedron_2_2*Blending_DF_Tetrahedron_2_4*Blending_DF_Tetrahedron_2_6);
      real_t tmp_37 = tmp_19*tmp_36;
      real_t tmp_38 = q_p_2_0*q_p_2_1;
      real_t tmp_39 = q_p_2_0*q_p_2_2;
      real_t tmp_40 = q_p_2_1*q_p_2_2;
      real_t tmp_41 = (q_p_2_0*q_p_2_0);
      real_t tmp_42 = (q_p_2_1*q_p_2_1);
      real_t tmp_43 = (q_p_2_2*q_p_2_2);
      real_t tmp_44 = w_p_2*std::abs(Blending_DF_Tetrahedron_3_0*Blending_DF_Tetrahedron_3_4*Blending_DF_Tetrahedron_3_8 - Blending_DF_Tetrahedron_3_0*Blending_DF_Tetrahedron_3_5*Blending_DF_Tetrahedron_3_7 - Blending_DF_Tetrahedron_3_1*Blending_DF_Tetrahedron_3_3*Blending_DF_Tetrahedron_3_8 + Blending_DF_Tetrahedron_3_1*Blending_DF_Tetrahedron_3_5*Blending_DF_Tetrahedron_3_6 + Blending_DF_Tetrahedron_3_2*Blending_DF_Tetrahedron_3_3*Blending_DF_Tetrahedron_3_7 - Blending_DF_Tetrahedron_3_2*Blending_DF_Tetrahedron_3_4*Blending_DF_Tetrahedron_3_6);
      real_t tmp_45 = tmp_19*tmp_44;
      real_t tmp_46 = q_p_3_0*q_p_3_1;
      real_t tmp_47 = q_p_3_0*q_p_3_2;
      real_t tmp_48 = q_p_3_1*q_p_3_2;
      real_t tmp_49 = (q_p_3_0*q_p_3_0);
      real_t tmp_50 = (q_p_3_1*q_p_3_1);
      real_t tmp_51 = (q_p_3_2*q_p_3_2);
      real_t tmp_52 = w_p_3*std::abs(Blending_DF_Tetrahedron_4_0*Blending_DF_Tetrahedron_4_4*Blending_DF_Tetrahedron_4_8 - Blending_DF_Tetrahedron_4_0*Blending_DF_Tetrahedron_4_5*Blending_DF_Tetrahedron_4_7 - Blending_DF_Tetrahedron_4_1*Blending_DF_Tetrahedron_4_3*Blending_DF_Tetrahedron_4_8 + Blending_DF_Tetrahedron_4_1*Blending_DF_Tetrahedron_4_5*Blending_DF_Tetrahedron_4_6 + Blending_DF_Tetrahedron_4_2*Blending_DF_Tetrahedron_4_3*Blending_DF_Tetrahedron_4_7 - Blending_DF_Tetrahedron_4_2*Blending_DF_Tetrahedron_4_4*Blending_DF_Tetrahedron_4_6);
      real_t tmp_53 = tmp_19*tmp_52;
      real_t tmp_54 = q_p_4_0*q_p_4_1;
      real_t tmp_55 = q_p_4_0*q_p_4_2;
      real_t tmp_56 = q_p_4_1*q_p_4_2;
      real_t tmp_57 = (q_p_4_0*q_p_4_0);
      real_t tmp_58 = (q_p_4_1*q_p_4_1);
      real_t tmp_59 = (q_p_4_2*q_p_4_2);
      real_t tmp_60 = w_p_4*std::abs(Blending_DF_Tetrahedron_5_0*Blending_DF_Tetrahedron_5_4*Blending_DF_Tetrahedron_5_8 - Blending_DF_Tetrahedron_5_0*Blending_DF_Tetrahedron_5_5*Blending_DF_Tetrahedron_5_7 - Blending_DF_Tetrahedron_5_1*Blending_DF_Tetrahedron_5_3*Blending_DF_Tetrahedron_5_8 + Blending_DF_Tetrahedron_5_1*Blending_DF_Tetrahedron_5_5*Blending_DF_Tetrahedron_5_6 + Blending_DF_Tetrahedron_5_2*Blending_DF_Tetrahedron_5_3*Blending_DF_Tetrahedron_5_7 - Blending_DF_Tetrahedron_5_2*Blending_DF_Tetrahedron_5_4*Blending_DF_Tetrahedron_5_6);
      real_t tmp_61 = tmp_19*tmp_60;
      real_t tmp_62 = q_p_5_0*q_p_5_1;
      real_t tmp_63 = q_p_5_0*q_p_5_2;
      real_t tmp_64 = q_p_5_1*q_p_5_2;
      real_t tmp_65 = (q_p_5_0*q_p_5_0);
      real_t tmp_66 = (q_p_5_1*q_p_5_1);
      real_t tmp_67 = (q_p_5_2*q_p_5_2);
      real_t tmp_68 = w_p_5*std::abs(Blending_DF_Tetrahedron_6_0*Blending_DF_Tetrahedron_6_4*Blending_DF_Tetrahedron_6_8 - Blending_DF_Tetrahedron_6_0*Blending_DF_Tetrahedron_6_5*Blending_DF_Tetrahedron_6_7 - Blending_DF_Tetrahedron_6_1*Blending_DF_Tetrahedron_6_3*Blending_DF_Tetrahedron_6_8 + Blending_DF_Tetrahedron_6_1*Blending_DF_Tetrahedron_6_5*Blending_DF_Tetrahedron_6_6 + Blending_DF_Tetrahedron_6_2*Blending_DF_Tetrahedron_6_3*Blending_DF_Tetrahedron_6_7 - Blending_DF_Tetrahedron_6_2*Blending_DF_Tetrahedron_6_4*Blending_DF_Tetrahedron_6_6);
      real_t tmp_69 = tmp_19*tmp_68;
      real_t tmp_70 = q_p_6_0*q_p_6_1;
      real_t tmp_71 = q_p_6_0*q_p_6_2;
      real_t tmp_72 = q_p_6_1*q_p_6_2;
      real_t tmp_73 = (q_p_6_0*q_p_6_0);
      real_t tmp_74 = (q_p_6_1*q_p_6_1);
      real_t tmp_75 = (q_p_6_2*q_p_6_2);
      real_t tmp_76 = w_p_6*std::abs(Blending_DF_Tetrahedron_7_0*Blending_DF_Tetrahedron_7_4*Blending_DF_Tetrahedron_7_8 - Blending_DF_Tetrahedron_7_0*Blending_DF_Tetrahedron_7_5*Blending_DF_Tetrahedron_7_7 - Blending_DF_Tetrahedron_7_1*Blending_DF_Tetrahedron_7_3*Blending_DF_Tetrahedron_7_8 + Blending_DF_Tetrahedron_7_1*Blending_DF_Tetrahedron_7_5*Blending_DF_Tetrahedron_7_6 + Blending_DF_Tetrahedron_7_2*Blending_DF_Tetrahedron_7_3*Blending_DF_Tetrahedron_7_7 - Blending_DF_Tetrahedron_7_2*Blending_DF_Tetrahedron_7_4*Blending_DF_Tetrahedron_7_6);
      real_t tmp_77 = tmp_19*tmp_76;
      real_t tmp_78 = q_p_7_0*q_p_7_1;
      real_t tmp_79 = q_p_7_0*q_p_7_2;
      real_t tmp_80 = q_p_7_1*q_p_7_2;
      real_t tmp_81 = (q_p_7_0*q_p_7_0);
      real_t tmp_82 = (q_p_7_1*q_p_7_1);
      real_t tmp_83 = (q_p_7_2*q_p_7_2);
      real_t tmp_84 = w_p_7*std::abs(Blending_DF_Tetrahedron_8_0*Blending_DF_Tetrahedron_8_4*Blending_DF_Tetrahedron_8_8 - Blending_DF_Tetrahedron_8_0*Blending_DF_Tetrahedron_8_5*Blending_DF_Tetrahedron_8_7 - Blending_DF_Tetrahedron_8_1*Blending_DF_Tetrahedron_8_3*Blending_DF_Tetrahedron_8_8 + Blending_DF_Tetrahedron_8_1*Blending_DF_Tetrahedron_8_5*Blending_DF_Tetrahedron_8_6 + Blending_DF_Tetrahedron_8_2*Blending_DF_Tetrahedron_8_3*Blending_DF_Tetrahedron_8_7 - Blending_DF_Tetrahedron_8_2*Blending_DF_Tetrahedron_8_4*Blending_DF_Tetrahedron_8_6);
      real_t tmp_85 = tmp_19*tmp_84;
      real_t tmp_86 = q_p_8_0*q_p_8_1;
      real_t tmp_87 = q_p_8_0*q_p_8_2;
      real_t tmp_88 = q_p_8_1*q_p_8_2;
      real_t tmp_89 = (q_p_8_0*q_p_8_0);
      real_t tmp_90 = (q_p_8_1*q_p_8_1);
      real_t tmp_91 = (q_p_8_2*q_p_8_2);
      real_t tmp_92 = w_p_8*std::abs(Blending_DF_Tetrahedron_9_0*Blending_DF_Tetrahedron_9_4*Blending_DF_Tetrahedron_9_8 - Blending_DF_Tetrahedron_9_0*Blending_DF_Tetrahedron_9_5*Blending_DF_Tetrahedron_9_7 - Blending_DF_Tetrahedron_9_1*Blending_DF_Tetrahedron_9_3*Blending_DF_Tetrahedron_9_8 + Blending_DF_Tetrahedron_9_1*Blending_DF_Tetrahedron_9_5*Blending_DF_Tetrahedron_9_6 + Blending_DF_Tetrahedron_9_2*Blending_DF_Tetrahedron_9_3*Blending_DF_Tetrahedron_9_7 - Blending_DF_Tetrahedron_9_2*Blending_DF_Tetrahedron_9_4*Blending_DF_Tetrahedron_9_6);
      real_t tmp_93 = tmp_19*tmp_92;
      real_t tmp_94 = q_p_9_0*q_p_9_1;
      real_t tmp_95 = q_p_9_0*q_p_9_2;
      real_t tmp_96 = q_p_9_1*q_p_9_2;
      real_t tmp_97 = (q_p_9_0*q_p_9_0);
      real_t tmp_98 = (q_p_9_1*q_p_9_1);
      real_t tmp_99 = (q_p_9_2*q_p_9_2);
      real_t tmp_100 = w_p_9*std::abs(Blending_DF_Tetrahedron_10_0*Blending_DF_Tetrahedron_10_4*Blending_DF_Tetrahedron_10_8 - Blending_DF_Tetrahedron_10_0*Blending_DF_Tetrahedron_10_5*Blending_DF_Tetrahedron_10_7 - Blending_DF_Tetrahedron_10_1*Blending_DF_Tetrahedron_10_3*Blending_DF_Tetrahedron_10_8 + Blending_DF_Tetrahedron_10_1*Blending_DF_Tetrahedron_10_5*Blending_DF_Tetrahedron_10_6 + Blending_DF_Tetrahedron_10_2*Blending_DF_Tetrahedron_10_3*Blending_DF_Tetrahedron_10_7 - Blending_DF_Tetrahedron_10_2*Blending_DF_Tetrahedron_10_4*Blending_DF_Tetrahedron_10_6);
      real_t tmp_101 = tmp_100*tmp_19;
      real_t tmp_102 = 2.0*tmp_3;
      real_t tmp_103 = -1.0*q_p_0_0 + tmp_102;
      real_t tmp_104 = 4.0*tmp_0;
      real_t tmp_105 = 4.0*tmp_1;
      real_t tmp_106 = 4.0*tmp_2;
      real_t tmp_107 = 2.0*tmp_4;
      real_t tmp_108 = 2.0*tmp_5;
      real_t tmp_109 = tmp_18*tmp_20;
      real_t tmp_110 = tmp_109*(-3.0*q_p_0_0 - 3.0*q_p_0_1 - 3.0*q_p_0_2 + tmp_102 + tmp_104 + tmp_105 + tmp_106 + tmp_107 + tmp_108 + 1.0);
      real_t tmp_111 = 2.0*tmp_25;
      real_t tmp_112 = -1.0*q_p_1_0 + tmp_111;
      real_t tmp_113 = 4.0*tmp_22;
      real_t tmp_114 = 4.0*tmp_23;
      real_t tmp_115 = 4.0*tmp_24;
      real_t tmp_116 = 2.0*tmp_26;
      real_t tmp_117 = 2.0*tmp_27;
      real_t tmp_118 = tmp_18*tmp_28;
      real_t tmp_119 = tmp_118*(-3.0*q_p_1_0 - 3.0*q_p_1_1 - 3.0*q_p_1_2 + tmp_111 + tmp_113 + tmp_114 + tmp_115 + tmp_116 + tmp_117 + 1.0);
      real_t tmp_120 = 2.0*tmp_33;
      real_t tmp_121 = -1.0*q_p_10_0 + tmp_120;
      real_t tmp_122 = 4.0*tmp_30;
      real_t tmp_123 = 4.0*tmp_31;
      real_t tmp_124 = 4.0*tmp_32;
      real_t tmp_125 = 2.0*tmp_34;
      real_t tmp_126 = 2.0*tmp_35;
      real_t tmp_127 = tmp_18*tmp_36;
      real_t tmp_128 = tmp_127*(-3.0*q_p_10_0 - 3.0*q_p_10_1 - 3.0*q_p_10_2 + tmp_120 + tmp_122 + tmp_123 + tmp_124 + tmp_125 + tmp_126 + 1.0);
      real_t tmp_129 = 2.0*tmp_41;
      real_t tmp_130 = -1.0*q_p_2_0 + tmp_129;
      real_t tmp_131 = 4.0*tmp_38;
      real_t tmp_132 = 4.0*tmp_39;
      real_t tmp_133 = 4.0*tmp_40;
      real_t tmp_134 = 2.0*tmp_42;
      real_t tmp_135 = 2.0*tmp_43;
      real_t tmp_136 = tmp_18*tmp_44;
      real_t tmp_137 = tmp_136*(-3.0*q_p_2_0 - 3.0*q_p_2_1 - 3.0*q_p_2_2 + tmp_129 + tmp_131 + tmp_132 + tmp_133 + tmp_134 + tmp_135 + 1.0);
      real_t tmp_138 = 2.0*tmp_49;
      real_t tmp_139 = -1.0*q_p_3_0 + tmp_138;
      real_t tmp_140 = 4.0*tmp_46;
      real_t tmp_141 = 4.0*tmp_47;
      real_t tmp_142 = 4.0*tmp_48;
      real_t tmp_143 = 2.0*tmp_50;
      real_t tmp_144 = 2.0*tmp_51;
      real_t tmp_145 = tmp_18*tmp_52;
      real_t tmp_146 = tmp_145*(-3.0*q_p_3_0 - 3.0*q_p_3_1 - 3.0*q_p_3_2 + tmp_138 + tmp_140 + tmp_141 + tmp_142 + tmp_143 + tmp_144 + 1.0);
      real_t tmp_147 = 2.0*tmp_57;
      real_t tmp_148 = -1.0*q_p_4_0 + tmp_147;
      real_t tmp_149 = 4.0*tmp_54;
      real_t tmp_150 = 4.0*tmp_55;
      real_t tmp_151 = 4.0*tmp_56;
      real_t tmp_152 = 2.0*tmp_58;
      real_t tmp_153 = 2.0*tmp_59;
      real_t tmp_154 = tmp_18*tmp_60;
      real_t tmp_155 = tmp_154*(-3.0*q_p_4_0 - 3.0*q_p_4_1 - 3.0*q_p_4_2 + tmp_147 + tmp_149 + tmp_150 + tmp_151 + tmp_152 + tmp_153 + 1.0);
      real_t tmp_156 = 2.0*tmp_65;
      real_t tmp_157 = -1.0*q_p_5_0 + tmp_156;
      real_t tmp_158 = 4.0*tmp_62;
      real_t tmp_159 = 4.0*tmp_63;
      real_t tmp_160 = 4.0*tmp_64;
      real_t tmp_161 = 2.0*tmp_66;
      real_t tmp_162 = 2.0*tmp_67;
      real_t tmp_163 = tmp_18*tmp_68;
      real_t tmp_164 = tmp_163*(-3.0*q_p_5_0 - 3.0*q_p_5_1 - 3.0*q_p_5_2 + tmp_156 + tmp_158 + tmp_159 + tmp_160 + tmp_161 + tmp_162 + 1.0);
      real_t tmp_165 = 2.0*tmp_73;
      real_t tmp_166 = -1.0*q_p_6_0 + tmp_165;
      real_t tmp_167 = 4.0*tmp_70;
      real_t tmp_168 = 4.0*tmp_71;
      real_t tmp_169 = 4.0*tmp_72;
      real_t tmp_170 = 2.0*tmp_74;
      real_t tmp_171 = 2.0*tmp_75;
      real_t tmp_172 = tmp_18*tmp_76;
      real_t tmp_173 = tmp_172*(-3.0*q_p_6_0 - 3.0*q_p_6_1 - 3.0*q_p_6_2 + tmp_165 + tmp_167 + tmp_168 + tmp_169 + tmp_170 + tmp_171 + 1.0);
      real_t tmp_174 = 2.0*tmp_81;
      real_t tmp_175 = -1.0*q_p_7_0 + tmp_174;
      real_t tmp_176 = 4.0*tmp_78;
      real_t tmp_177 = 4.0*tmp_79;
      real_t tmp_178 = 4.0*tmp_80;
      real_t tmp_179 = 2.0*tmp_82;
      real_t tmp_180 = 2.0*tmp_83;
      real_t tmp_181 = tmp_18*tmp_84;
      real_t tmp_182 = tmp_181*(-3.0*q_p_7_0 - 3.0*q_p_7_1 - 3.0*q_p_7_2 + tmp_174 + tmp_176 + tmp_177 + tmp_178 + tmp_179 + tmp_180 + 1.0);
      real_t tmp_183 = 2.0*tmp_89;
      real_t tmp_184 = -1.0*q_p_8_0 + tmp_183;
      real_t tmp_185 = 4.0*tmp_86;
      real_t tmp_186 = 4.0*tmp_87;
      real_t tmp_187 = 4.0*tmp_88;
      real_t tmp_188 = 2.0*tmp_90;
      real_t tmp_189 = 2.0*tmp_91;
      real_t tmp_190 = tmp_18*tmp_92;
      real_t tmp_191 = tmp_190*(-3.0*q_p_8_0 - 3.0*q_p_8_1 - 3.0*q_p_8_2 + tmp_183 + tmp_185 + tmp_186 + tmp_187 + tmp_188 + tmp_189 + 1.0);
      real_t tmp_192 = 2.0*tmp_97;
      real_t tmp_193 = -1.0*q_p_9_0 + tmp_192;
      real_t tmp_194 = 4.0*tmp_94;
      real_t tmp_195 = 4.0*tmp_95;
      real_t tmp_196 = 4.0*tmp_96;
      real_t tmp_197 = 2.0*tmp_98;
      real_t tmp_198 = 2.0*tmp_99;
      real_t tmp_199 = tmp_100*tmp_18;
      real_t tmp_200 = tmp_199*(-3.0*q_p_9_0 - 3.0*q_p_9_1 - 3.0*q_p_9_2 + tmp_192 + tmp_194 + tmp_195 + tmp_196 + tmp_197 + tmp_198 + 1.0);
      real_t tmp_201 = tmp_103*tmp_110 + tmp_112*tmp_119 + tmp_121*tmp_128 + tmp_130*tmp_137 + tmp_139*tmp_146 + tmp_148*tmp_155 + tmp_157*tmp_164 + tmp_166*tmp_173 + tmp_175*tmp_182 + tmp_184*tmp_191 + tmp_193*tmp_200;
      real_t tmp_202 = -1.0*q_p_0_1 + tmp_107;
      real_t tmp_203 = -1.0*q_p_1_1 + tmp_116;
      real_t tmp_204 = -1.0*q_p_10_1 + tmp_125;
      real_t tmp_205 = -1.0*q_p_2_1 + tmp_134;
      real_t tmp_206 = -1.0*q_p_3_1 + tmp_143;
      real_t tmp_207 = -1.0*q_p_4_1 + tmp_152;
      real_t tmp_208 = -1.0*q_p_5_1 + tmp_161;
      real_t tmp_209 = -1.0*q_p_6_1 + tmp_170;
      real_t tmp_210 = -1.0*q_p_7_1 + tmp_179;
      real_t tmp_211 = -1.0*q_p_8_1 + tmp_188;
      real_t tmp_212 = -1.0*q_p_9_1 + tmp_197;
      real_t tmp_213 = tmp_110*tmp_202 + tmp_119*tmp_203 + tmp_128*tmp_204 + tmp_137*tmp_205 + tmp_146*tmp_206 + tmp_155*tmp_207 + tmp_164*tmp_208 + tmp_173*tmp_209 + tmp_182*tmp_210 + tmp_191*tmp_211 + tmp_200*tmp_212;
      real_t tmp_214 = -1.0*q_p_0_2 + tmp_108;
      real_t tmp_215 = -1.0*q_p_1_2 + tmp_117;
      real_t tmp_216 = -1.0*q_p_10_2 + tmp_126;
      real_t tmp_217 = -1.0*q_p_2_2 + tmp_135;
      real_t tmp_218 = -1.0*q_p_3_2 + tmp_144;
      real_t tmp_219 = -1.0*q_p_4_2 + tmp_153;
      real_t tmp_220 = -1.0*q_p_5_2 + tmp_162;
      real_t tmp_221 = -1.0*q_p_6_2 + tmp_171;
      real_t tmp_222 = -1.0*q_p_7_2 + tmp_180;
      real_t tmp_223 = -1.0*q_p_8_2 + tmp_189;
      real_t tmp_224 = -1.0*q_p_9_2 + tmp_198;
      real_t tmp_225 = tmp_110*tmp_214 + tmp_119*tmp_215 + tmp_128*tmp_216 + tmp_137*tmp_217 + tmp_146*tmp_218 + tmp_155*tmp_219 + tmp_164*tmp_220 + tmp_173*tmp_221 + tmp_182*tmp_222 + tmp_191*tmp_223 + tmp_200*tmp_224;
      real_t tmp_226 = tmp_106*tmp_110 + tmp_115*tmp_119 + tmp_124*tmp_128 + tmp_133*tmp_137 + tmp_142*tmp_146 + tmp_151*tmp_155 + tmp_160*tmp_164 + tmp_169*tmp_173 + tmp_178*tmp_182 + tmp_187*tmp_191 + tmp_196*tmp_200;
      real_t tmp_227 = tmp_105*tmp_110 + tmp_114*tmp_119 + tmp_123*tmp_128 + tmp_132*tmp_137 + tmp_141*tmp_146 + tmp_150*tmp_155 + tmp_159*tmp_164 + tmp_168*tmp_173 + tmp_177*tmp_182 + tmp_186*tmp_191 + tmp_195*tmp_200;
      real_t tmp_228 = tmp_104*tmp_110 + tmp_113*tmp_119 + tmp_122*tmp_128 + tmp_131*tmp_137 + tmp_140*tmp_146 + tmp_149*tmp_155 + tmp_158*tmp_164 + tmp_167*tmp_173 + tmp_176*tmp_182 + tmp_185*tmp_191 + tmp_194*tmp_200;
      real_t tmp_229 = -tmp_105;
      real_t tmp_230 = -tmp_106;
      real_t tmp_231 = 4.0*q_p_0_2 + tmp_229 + tmp_230 - 4.0*tmp_5;
      real_t tmp_232 = -tmp_114;
      real_t tmp_233 = -tmp_115;
      real_t tmp_234 = 4.0*q_p_1_2 + tmp_232 + tmp_233 - 4.0*tmp_27;
      real_t tmp_235 = -tmp_123;
      real_t tmp_236 = -tmp_124;
      real_t tmp_237 = 4.0*q_p_10_2 + tmp_235 + tmp_236 - 4.0*tmp_35;
      real_t tmp_238 = -tmp_132;
      real_t tmp_239 = -tmp_133;
      real_t tmp_240 = 4.0*q_p_2_2 + tmp_238 + tmp_239 - 4.0*tmp_43;
      real_t tmp_241 = -tmp_141;
      real_t tmp_242 = -tmp_142;
      real_t tmp_243 = 4.0*q_p_3_2 + tmp_241 + tmp_242 - 4.0*tmp_51;
      real_t tmp_244 = -tmp_150;
      real_t tmp_245 = -tmp_151;
      real_t tmp_246 = 4.0*q_p_4_2 + tmp_244 + tmp_245 - 4.0*tmp_59;
      real_t tmp_247 = -tmp_159;
      real_t tmp_248 = -tmp_160;
      real_t tmp_249 = 4.0*q_p_5_2 + tmp_247 + tmp_248 - 4.0*tmp_67;
      real_t tmp_250 = -tmp_168;
      real_t tmp_251 = -tmp_169;
      real_t tmp_252 = 4.0*q_p_6_2 + tmp_250 + tmp_251 - 4.0*tmp_75;
      real_t tmp_253 = -tmp_177;
      real_t tmp_254 = -tmp_178;
      real_t tmp_255 = 4.0*q_p_7_2 + tmp_253 + tmp_254 - 4.0*tmp_83;
      real_t tmp_256 = -tmp_186;
      real_t tmp_257 = -tmp_187;
      real_t tmp_258 = 4.0*q_p_8_2 + tmp_256 + tmp_257 - 4.0*tmp_91;
      real_t tmp_259 = -tmp_195;
      real_t tmp_260 = -tmp_196;
      real_t tmp_261 = 4.0*q_p_9_2 + tmp_259 + tmp_260 - 4.0*tmp_99;
      real_t tmp_262 = tmp_110*tmp_231 + tmp_119*tmp_234 + tmp_128*tmp_237 + tmp_137*tmp_240 + tmp_146*tmp_243 + tmp_155*tmp_246 + tmp_164*tmp_249 + tmp_173*tmp_252 + tmp_182*tmp_255 + tmp_191*tmp_258 + tmp_200*tmp_261;
      real_t tmp_263 = -tmp_104;
      real_t tmp_264 = 4.0*q_p_0_1 + tmp_230 + tmp_263 - 4.0*tmp_4;
      real_t tmp_265 = -tmp_113;
      real_t tmp_266 = 4.0*q_p_1_1 + tmp_233 - 4.0*tmp_26 + tmp_265;
      real_t tmp_267 = -tmp_122;
      real_t tmp_268 = 4.0*q_p_10_1 + tmp_236 + tmp_267 - 4.0*tmp_34;
      real_t tmp_269 = -tmp_131;
      real_t tmp_270 = 4.0*q_p_2_1 + tmp_239 + tmp_269 - 4.0*tmp_42;
      real_t tmp_271 = -tmp_140;
      real_t tmp_272 = 4.0*q_p_3_1 + tmp_242 + tmp_271 - 4.0*tmp_50;
      real_t tmp_273 = -tmp_149;
      real_t tmp_274 = 4.0*q_p_4_1 + tmp_245 + tmp_273 - 4.0*tmp_58;
      real_t tmp_275 = -tmp_158;
      real_t tmp_276 = 4.0*q_p_5_1 + tmp_248 + tmp_275 - 4.0*tmp_66;
      real_t tmp_277 = -tmp_167;
      real_t tmp_278 = 4.0*q_p_6_1 + tmp_251 + tmp_277 - 4.0*tmp_74;
      real_t tmp_279 = -tmp_176;
      real_t tmp_280 = 4.0*q_p_7_1 + tmp_254 + tmp_279 - 4.0*tmp_82;
      real_t tmp_281 = -tmp_185;
      real_t tmp_282 = 4.0*q_p_8_1 + tmp_257 + tmp_281 - 4.0*tmp_90;
      real_t tmp_283 = -tmp_194;
      real_t tmp_284 = 4.0*q_p_9_1 + tmp_260 + tmp_283 - 4.0*tmp_98;
      real_t tmp_285 = tmp_110*tmp_264 + tmp_119*tmp_266 + tmp_128*tmp_268 + tmp_137*tmp_270 + tmp_146*tmp_272 + tmp_155*tmp_274 + tmp_164*tmp_276 + tmp_173*tmp_278 + tmp_182*tmp_280 + tmp_191*tmp_282 + tmp_200*tmp_284;
      real_t tmp_286 = 4.0*q_p_0_0 + tmp_229 + tmp_263 - 4.0*tmp_3;
      real_t tmp_287 = 4.0*q_p_1_0 + tmp_232 - 4.0*tmp_25 + tmp_265;
      real_t tmp_288 = 4.0*q_p_10_0 + tmp_235 + tmp_267 - 4.0*tmp_33;
      real_t tmp_289 = 4.0*q_p_2_0 + tmp_238 + tmp_269 - 4.0*tmp_41;
      real_t tmp_290 = 4.0*q_p_3_0 + tmp_241 + tmp_271 - 4.0*tmp_49;
      real_t tmp_291 = 4.0*q_p_4_0 + tmp_244 + tmp_273 - 4.0*tmp_57;
      real_t tmp_292 = 4.0*q_p_5_0 + tmp_247 + tmp_275 - 4.0*tmp_65;
      real_t tmp_293 = 4.0*q_p_6_0 + tmp_250 + tmp_277 - 4.0*tmp_73;
      real_t tmp_294 = 4.0*q_p_7_0 + tmp_253 + tmp_279 - 4.0*tmp_81;
      real_t tmp_295 = 4.0*q_p_8_0 + tmp_256 + tmp_281 - 4.0*tmp_89;
      real_t tmp_296 = 4.0*q_p_9_0 + tmp_259 + tmp_283 - 4.0*tmp_97;
      real_t tmp_297 = tmp_110*tmp_286 + tmp_119*tmp_287 + tmp_128*tmp_288 + tmp_137*tmp_289 + tmp_146*tmp_290 + tmp_155*tmp_291 + tmp_164*tmp_292 + tmp_173*tmp_293 + tmp_182*tmp_294 + tmp_191*tmp_295 + tmp_200*tmp_296;
      real_t tmp_298 = 4.0*tmp_109;
      real_t tmp_299 = 4.0*tmp_118;
      real_t tmp_300 = 4.0*tmp_127;
      real_t tmp_301 = 4.0*tmp_136;
      real_t tmp_302 = 4.0*tmp_145;
      real_t tmp_303 = 4.0*tmp_154;
      real_t tmp_304 = 4.0*tmp_163;
      real_t tmp_305 = 4.0*tmp_172;
      real_t tmp_306 = 4.0*tmp_181;
      real_t tmp_307 = 4.0*tmp_190;
      real_t tmp_308 = 4.0*tmp_199;
      real_t tmp_309 = tmp_103*tmp_109;
      real_t tmp_310 = tmp_112*tmp_118;
      real_t tmp_311 = tmp_121*tmp_127;
      real_t tmp_312 = tmp_130*tmp_136;
      real_t tmp_313 = tmp_139*tmp_145;
      real_t tmp_314 = tmp_148*tmp_154;
      real_t tmp_315 = tmp_157*tmp_163;
      real_t tmp_316 = tmp_166*tmp_172;
      real_t tmp_317 = tmp_175*tmp_181;
      real_t tmp_318 = tmp_184*tmp_190;
      real_t tmp_319 = tmp_193*tmp_199;
      real_t tmp_320 = tmp_202*tmp_309 + tmp_203*tmp_310 + tmp_204*tmp_311 + tmp_205*tmp_312 + tmp_206*tmp_313 + tmp_207*tmp_314 + tmp_208*tmp_315 + tmp_209*tmp_316 + tmp_210*tmp_317 + tmp_211*tmp_318 + tmp_212*tmp_319;
      real_t tmp_321 = tmp_214*tmp_309 + tmp_215*tmp_310 + tmp_216*tmp_311 + tmp_217*tmp_312 + tmp_218*tmp_313 + tmp_219*tmp_314 + tmp_220*tmp_315 + tmp_221*tmp_316 + tmp_222*tmp_317 + tmp_223*tmp_318 + tmp_224*tmp_319;
      real_t tmp_322 = tmp_106*tmp_309 + tmp_115*tmp_310 + tmp_124*tmp_311 + tmp_133*tmp_312 + tmp_142*tmp_313 + tmp_151*tmp_314 + tmp_160*tmp_315 + tmp_169*tmp_316 + tmp_178*tmp_317 + tmp_187*tmp_318 + tmp_196*tmp_319;
      real_t tmp_323 = tmp_105*tmp_309 + tmp_114*tmp_310 + tmp_123*tmp_311 + tmp_132*tmp_312 + tmp_141*tmp_313 + tmp_150*tmp_314 + tmp_159*tmp_315 + tmp_168*tmp_316 + tmp_177*tmp_317 + tmp_186*tmp_318 + tmp_195*tmp_319;
      real_t tmp_324 = tmp_104*tmp_309 + tmp_113*tmp_310 + tmp_122*tmp_311 + tmp_131*tmp_312 + tmp_140*tmp_313 + tmp_149*tmp_314 + tmp_158*tmp_315 + tmp_167*tmp_316 + tmp_176*tmp_317 + tmp_185*tmp_318 + tmp_194*tmp_319;
      real_t tmp_325 = tmp_231*tmp_309 + tmp_234*tmp_310 + tmp_237*tmp_311 + tmp_240*tmp_312 + tmp_243*tmp_313 + tmp_246*tmp_314 + tmp_249*tmp_315 + tmp_252*tmp_316 + tmp_255*tmp_317 + tmp_258*tmp_318 + tmp_261*tmp_319;
      real_t tmp_326 = tmp_264*tmp_309 + tmp_266*tmp_310 + tmp_268*tmp_311 + tmp_270*tmp_312 + tmp_272*tmp_313 + tmp_274*tmp_314 + tmp_276*tmp_315 + tmp_278*tmp_316 + tmp_280*tmp_317 + tmp_282*tmp_318 + tmp_284*tmp_319;
      real_t tmp_327 = tmp_286*tmp_309 + tmp_287*tmp_310 + tmp_288*tmp_311 + tmp_289*tmp_312 + tmp_290*tmp_313 + tmp_291*tmp_314 + tmp_292*tmp_315 + tmp_293*tmp_316 + tmp_294*tmp_317 + tmp_295*tmp_318 + tmp_296*tmp_319;
      real_t tmp_328 = tmp_109*tmp_202;
      real_t tmp_329 = tmp_118*tmp_203;
      real_t tmp_330 = tmp_127*tmp_204;
      real_t tmp_331 = tmp_136*tmp_205;
      real_t tmp_332 = tmp_145*tmp_206;
      real_t tmp_333 = tmp_154*tmp_207;
      real_t tmp_334 = tmp_163*tmp_208;
      real_t tmp_335 = tmp_172*tmp_209;
      real_t tmp_336 = tmp_181*tmp_210;
      real_t tmp_337 = tmp_190*tmp_211;
      real_t tmp_338 = tmp_199*tmp_212;
      real_t tmp_339 = tmp_214*tmp_328 + tmp_215*tmp_329 + tmp_216*tmp_330 + tmp_217*tmp_331 + tmp_218*tmp_332 + tmp_219*tmp_333 + tmp_220*tmp_334 + tmp_221*tmp_335 + tmp_222*tmp_336 + tmp_223*tmp_337 + tmp_224*tmp_338;
      real_t tmp_340 = tmp_106*tmp_328 + tmp_115*tmp_329 + tmp_124*tmp_330 + tmp_133*tmp_331 + tmp_142*tmp_332 + tmp_151*tmp_333 + tmp_160*tmp_334 + tmp_169*tmp_335 + tmp_178*tmp_336 + tmp_187*tmp_337 + tmp_196*tmp_338;
      real_t tmp_341 = tmp_105*tmp_328 + tmp_114*tmp_329 + tmp_123*tmp_330 + tmp_132*tmp_331 + tmp_141*tmp_332 + tmp_150*tmp_333 + tmp_159*tmp_334 + tmp_168*tmp_335 + tmp_177*tmp_336 + tmp_186*tmp_337 + tmp_195*tmp_338;
      real_t tmp_342 = tmp_104*tmp_328 + tmp_113*tmp_329 + tmp_122*tmp_330 + tmp_131*tmp_331 + tmp_140*tmp_332 + tmp_149*tmp_333 + tmp_158*tmp_334 + tmp_167*tmp_335 + tmp_176*tmp_336 + tmp_185*tmp_337 + tmp_194*tmp_338;
      real_t tmp_343 = tmp_231*tmp_328 + tmp_234*tmp_329 + tmp_237*tmp_330 + tmp_240*tmp_331 + tmp_243*tmp_332 + tmp_246*tmp_333 + tmp_249*tmp_334 + tmp_252*tmp_335 + tmp_255*tmp_336 + tmp_258*tmp_337 + tmp_261*tmp_338;
      real_t tmp_344 = tmp_264*tmp_328 + tmp_266*tmp_329 + tmp_268*tmp_330 + tmp_270*tmp_331 + tmp_272*tmp_332 + tmp_274*tmp_333 + tmp_276*tmp_334 + tmp_278*tmp_335 + tmp_280*tmp_336 + tmp_282*tmp_337 + tmp_284*tmp_338;
      real_t tmp_345 = tmp_286*tmp_328 + tmp_287*tmp_329 + tmp_288*tmp_330 + tmp_289*tmp_331 + tmp_290*tmp_332 + tmp_291*tmp_333 + tmp_292*tmp_334 + tmp_293*tmp_335 + tmp_294*tmp_336 + tmp_295*tmp_337 + tmp_296*tmp_338;
      real_t tmp_346 = tmp_109*tmp_214;
      real_t tmp_347 = tmp_127*tmp_216;
      real_t tmp_348 = tmp_118*tmp_215;
      real_t tmp_349 = tmp_136*tmp_217;
      real_t tmp_350 = tmp_145*tmp_218;
      real_t tmp_351 = tmp_154*tmp_219;
      real_t tmp_352 = tmp_163*tmp_220;
      real_t tmp_353 = tmp_172*tmp_221;
      real_t tmp_354 = tmp_181*tmp_222;
      real_t tmp_355 = tmp_190*tmp_223;
      real_t tmp_356 = tmp_199*tmp_224;
      real_t tmp_357 = tmp_106*tmp_346 + tmp_115*tmp_348 + tmp_124*tmp_347 + tmp_133*tmp_349 + tmp_142*tmp_350 + tmp_151*tmp_351 + tmp_160*tmp_352 + tmp_169*tmp_353 + tmp_178*tmp_354 + tmp_187*tmp_355 + tmp_196*tmp_356;
      real_t tmp_358 = tmp_105*tmp_346 + tmp_114*tmp_348 + tmp_123*tmp_347 + tmp_132*tmp_349 + tmp_141*tmp_350 + tmp_150*tmp_351 + tmp_159*tmp_352 + tmp_168*tmp_353 + tmp_177*tmp_354 + tmp_186*tmp_355 + tmp_195*tmp_356;
      real_t tmp_359 = tmp_104*tmp_346 + tmp_113*tmp_348 + tmp_122*tmp_347 + tmp_131*tmp_349 + tmp_140*tmp_350 + tmp_149*tmp_351 + tmp_158*tmp_352 + tmp_167*tmp_353 + tmp_176*tmp_354 + tmp_185*tmp_355 + tmp_194*tmp_356;
      real_t tmp_360 = tmp_231*tmp_346 + tmp_234*tmp_348 + tmp_237*tmp_347 + tmp_240*tmp_349 + tmp_243*tmp_350 + tmp_246*tmp_351 + tmp_249*tmp_352 + tmp_252*tmp_353 + tmp_255*tmp_354 + tmp_258*tmp_355 + tmp_261*tmp_356;
      real_t tmp_361 = tmp_264*tmp_346 + tmp_266*tmp_348 + tmp_268*tmp_347 + tmp_270*tmp_349 + tmp_272*tmp_350 + tmp_274*tmp_351 + tmp_276*tmp_352 + tmp_278*tmp_353 + tmp_280*tmp_354 + tmp_282*tmp_355 + tmp_284*tmp_356;
      real_t tmp_362 = tmp_286*tmp_346 + tmp_287*tmp_348 + tmp_288*tmp_347 + tmp_289*tmp_349 + tmp_290*tmp_350 + tmp_291*tmp_351 + tmp_292*tmp_352 + tmp_293*tmp_353 + tmp_294*tmp_354 + tmp_295*tmp_355 + tmp_296*tmp_356;
      real_t tmp_363 = tmp_21*tmp_5;
      real_t tmp_364 = tmp_35*tmp_37;
      real_t tmp_365 = tmp_27*tmp_29;
      real_t tmp_366 = tmp_43*tmp_45;
      real_t tmp_367 = tmp_51*tmp_53;
      real_t tmp_368 = tmp_59*tmp_61;
      real_t tmp_369 = tmp_67*tmp_69;
      real_t tmp_370 = tmp_75*tmp_77;
      real_t tmp_371 = tmp_83*tmp_85;
      real_t tmp_372 = tmp_91*tmp_93;
      real_t tmp_373 = tmp_101*tmp_99;
      real_t tmp_374 = tmp_0*tmp_363 + tmp_22*tmp_365 + tmp_30*tmp_364 + tmp_366*tmp_38 + tmp_367*tmp_46 + tmp_368*tmp_54 + tmp_369*tmp_62 + tmp_370*tmp_70 + tmp_371*tmp_78 + tmp_372*tmp_86 + tmp_373*tmp_94;
      real_t tmp_375 = tmp_21*tmp_4;
      real_t tmp_376 = tmp_34*tmp_37;
      real_t tmp_377 = tmp_26*tmp_29;
      real_t tmp_378 = tmp_42*tmp_45;
      real_t tmp_379 = tmp_50*tmp_53;
      real_t tmp_380 = tmp_58*tmp_61;
      real_t tmp_381 = tmp_66*tmp_69;
      real_t tmp_382 = tmp_74*tmp_77;
      real_t tmp_383 = tmp_82*tmp_85;
      real_t tmp_384 = tmp_90*tmp_93;
      real_t tmp_385 = tmp_101*tmp_98;
      real_t tmp_386 = tmp_1*tmp_375 + tmp_23*tmp_377 + tmp_31*tmp_376 + tmp_378*tmp_39 + tmp_379*tmp_47 + tmp_380*tmp_55 + tmp_381*tmp_63 + tmp_382*tmp_71 + tmp_383*tmp_79 + tmp_384*tmp_87 + tmp_385*tmp_95;
      real_t tmp_387 = tmp_109*tmp_231;
      real_t tmp_388 = tmp_127*tmp_237;
      real_t tmp_389 = tmp_118*tmp_234;
      real_t tmp_390 = tmp_136*tmp_240;
      real_t tmp_391 = tmp_145*tmp_243;
      real_t tmp_392 = tmp_154*tmp_246;
      real_t tmp_393 = tmp_163*tmp_249;
      real_t tmp_394 = tmp_172*tmp_252;
      real_t tmp_395 = tmp_181*tmp_255;
      real_t tmp_396 = tmp_190*tmp_258;
      real_t tmp_397 = tmp_199*tmp_261;
      real_t tmp_398 = tmp_106*tmp_387 + tmp_115*tmp_389 + tmp_124*tmp_388 + tmp_133*tmp_390 + tmp_142*tmp_391 + tmp_151*tmp_392 + tmp_160*tmp_393 + tmp_169*tmp_394 + tmp_178*tmp_395 + tmp_187*tmp_396 + tmp_196*tmp_397;
      real_t tmp_399 = tmp_109*tmp_264;
      real_t tmp_400 = tmp_127*tmp_268;
      real_t tmp_401 = tmp_118*tmp_266;
      real_t tmp_402 = tmp_136*tmp_270;
      real_t tmp_403 = tmp_145*tmp_272;
      real_t tmp_404 = tmp_154*tmp_274;
      real_t tmp_405 = tmp_163*tmp_276;
      real_t tmp_406 = tmp_172*tmp_278;
      real_t tmp_407 = tmp_181*tmp_280;
      real_t tmp_408 = tmp_190*tmp_282;
      real_t tmp_409 = tmp_199*tmp_284;
      real_t tmp_410 = tmp_106*tmp_399 + tmp_115*tmp_401 + tmp_124*tmp_400 + tmp_133*tmp_402 + tmp_142*tmp_403 + tmp_151*tmp_404 + tmp_160*tmp_405 + tmp_169*tmp_406 + tmp_178*tmp_407 + tmp_187*tmp_408 + tmp_196*tmp_409;
      real_t tmp_411 = tmp_109*tmp_286;
      real_t tmp_412 = tmp_127*tmp_288;
      real_t tmp_413 = tmp_118*tmp_287;
      real_t tmp_414 = tmp_136*tmp_289;
      real_t tmp_415 = tmp_145*tmp_290;
      real_t tmp_416 = tmp_154*tmp_291;
      real_t tmp_417 = tmp_163*tmp_292;
      real_t tmp_418 = tmp_172*tmp_293;
      real_t tmp_419 = tmp_181*tmp_294;
      real_t tmp_420 = tmp_190*tmp_295;
      real_t tmp_421 = tmp_199*tmp_296;
      real_t tmp_422 = tmp_106*tmp_411 + tmp_115*tmp_413 + tmp_124*tmp_412 + tmp_133*tmp_414 + tmp_142*tmp_415 + tmp_151*tmp_416 + tmp_160*tmp_417 + tmp_169*tmp_418 + tmp_178*tmp_419 + tmp_187*tmp_420 + tmp_196*tmp_421;
      real_t tmp_423 = tmp_101*tmp_96*tmp_97 + tmp_2*tmp_21*tmp_3 + tmp_24*tmp_25*tmp_29 + tmp_32*tmp_33*tmp_37 + tmp_40*tmp_41*tmp_45 + tmp_48*tmp_49*tmp_53 + tmp_56*tmp_57*tmp_61 + tmp_64*tmp_65*tmp_69 + tmp_72*tmp_73*tmp_77 + tmp_80*tmp_81*tmp_85 + tmp_88*tmp_89*tmp_93;
      real_t tmp_424 = tmp_105*tmp_387 + tmp_114*tmp_389 + tmp_123*tmp_388 + tmp_132*tmp_390 + tmp_141*tmp_391 + tmp_150*tmp_392 + tmp_159*tmp_393 + tmp_168*tmp_394 + tmp_177*tmp_395 + tmp_186*tmp_396 + tmp_195*tmp_397;
      real_t tmp_425 = tmp_105*tmp_399 + tmp_114*tmp_401 + tmp_123*tmp_400 + tmp_132*tmp_402 + tmp_141*tmp_403 + tmp_150*tmp_404 + tmp_159*tmp_405 + tmp_168*tmp_406 + tmp_177*tmp_407 + tmp_186*tmp_408 + tmp_195*tmp_409;
      real_t tmp_426 = tmp_105*tmp_411 + tmp_114*tmp_413 + tmp_123*tmp_412 + tmp_132*tmp_414 + tmp_141*tmp_415 + tmp_150*tmp_416 + tmp_159*tmp_417 + tmp_168*tmp_418 + tmp_177*tmp_419 + tmp_186*tmp_420 + tmp_195*tmp_421;
      real_t tmp_427 = tmp_104*tmp_387 + tmp_113*tmp_389 + tmp_122*tmp_388 + tmp_131*tmp_390 + tmp_140*tmp_391 + tmp_149*tmp_392 + tmp_158*tmp_393 + tmp_167*tmp_394 + tmp_176*tmp_395 + tmp_185*tmp_396 + tmp_194*tmp_397;
      real_t tmp_428 = tmp_104*tmp_399 + tmp_113*tmp_401 + tmp_122*tmp_400 + tmp_131*tmp_402 + tmp_140*tmp_403 + tmp_149*tmp_404 + tmp_158*tmp_405 + tmp_167*tmp_406 + tmp_176*tmp_407 + tmp_185*tmp_408 + tmp_194*tmp_409;
      real_t tmp_429 = tmp_104*tmp_411 + tmp_113*tmp_413 + tmp_122*tmp_412 + tmp_131*tmp_414 + tmp_140*tmp_415 + tmp_149*tmp_416 + tmp_158*tmp_417 + tmp_167*tmp_418 + tmp_176*tmp_419 + tmp_185*tmp_420 + tmp_194*tmp_421;
      real_t tmp_430 = -tmp_1;
      real_t tmp_431 = -tmp_2;
      real_t tmp_432 = -tmp_23;
      real_t tmp_433 = -tmp_24;
      real_t tmp_434 = -tmp_31;
      real_t tmp_435 = -tmp_32;
      real_t tmp_436 = -tmp_39;
      real_t tmp_437 = -tmp_40;
      real_t tmp_438 = -tmp_47;
      real_t tmp_439 = -tmp_48;
      real_t tmp_440 = -tmp_55;
      real_t tmp_441 = -tmp_56;
      real_t tmp_442 = -tmp_63;
      real_t tmp_443 = -tmp_64;
      real_t tmp_444 = -tmp_71;
      real_t tmp_445 = -tmp_72;
      real_t tmp_446 = -tmp_79;
      real_t tmp_447 = -tmp_80;
      real_t tmp_448 = -tmp_87;
      real_t tmp_449 = -tmp_88;
      real_t tmp_450 = -tmp_95;
      real_t tmp_451 = -tmp_96;
      real_t tmp_452 = tmp_264*tmp_387 + tmp_266*tmp_389 + tmp_268*tmp_388 + tmp_270*tmp_390 + tmp_272*tmp_391 + tmp_274*tmp_392 + tmp_276*tmp_393 + tmp_278*tmp_394 + tmp_280*tmp_395 + tmp_282*tmp_396 + tmp_284*tmp_397;
      real_t tmp_453 = tmp_286*tmp_387 + tmp_287*tmp_389 + tmp_288*tmp_388 + tmp_289*tmp_390 + tmp_290*tmp_391 + tmp_291*tmp_392 + tmp_292*tmp_393 + tmp_293*tmp_394 + tmp_294*tmp_395 + tmp_295*tmp_396 + tmp_296*tmp_397;
      real_t tmp_454 = -tmp_0;
      real_t tmp_455 = -tmp_22;
      real_t tmp_456 = -tmp_30;
      real_t tmp_457 = -tmp_38;
      real_t tmp_458 = -tmp_46;
      real_t tmp_459 = -tmp_54;
      real_t tmp_460 = -tmp_62;
      real_t tmp_461 = -tmp_70;
      real_t tmp_462 = -tmp_78;
      real_t tmp_463 = -tmp_86;
      real_t tmp_464 = -tmp_94;
      real_t tmp_465 = tmp_286*tmp_399 + tmp_287*tmp_401 + tmp_288*tmp_400 + tmp_289*tmp_402 + tmp_290*tmp_403 + tmp_291*tmp_404 + tmp_292*tmp_405 + tmp_293*tmp_406 + tmp_294*tmp_407 + tmp_295*tmp_408 + tmp_296*tmp_409;
      real_t a_0_0 = tmp_101*((-0.75*q_p_9_0 - 0.75*q_p_9_1 - 0.75*q_p_9_2 + tmp_94 + tmp_95 + tmp_96 + 0.5*tmp_97 + 0.5*tmp_98 + 0.5*tmp_99 + 0.25)*(-0.75*q_p_9_0 - 0.75*q_p_9_1 - 0.75*q_p_9_2 + tmp_94 + tmp_95 + tmp_96 + 0.5*tmp_97 + 0.5*tmp_98 + 0.5*tmp_99 + 0.25)) + tmp_21*((-0.75*q_p_0_0 - 0.75*q_p_0_1 - 0.75*q_p_0_2 + tmp_0 + tmp_1 + tmp_2 + 0.5*tmp_3 + 0.5*tmp_4 + 0.5*tmp_5 + 0.25)*(-0.75*q_p_0_0 - 0.75*q_p_0_1 - 0.75*q_p_0_2 + tmp_0 + tmp_1 + tmp_2 + 0.5*tmp_3 + 0.5*tmp_4 + 0.5*tmp_5 + 0.25)) + tmp_29*((-0.75*q_p_1_0 - 0.75*q_p_1_1 - 0.75*q_p_1_2 + tmp_22 + tmp_23 + tmp_24 + 0.5*tmp_25 + 0.5*tmp_26 + 0.5*tmp_27 + 0.25)*(-0.75*q_p_1_0 - 0.75*q_p_1_1 - 0.75*q_p_1_2 + tmp_22 + tmp_23 + tmp_24 + 0.5*tmp_25 + 0.5*tmp_26 + 0.5*tmp_27 + 0.25)) + tmp_37*((-0.75*q_p_10_0 - 0.75*q_p_10_1 - 0.75*q_p_10_2 + tmp_30 + tmp_31 + tmp_32 + 0.5*tmp_33 + 0.5*tmp_34 + 0.5*tmp_35 + 0.25)*(-0.75*q_p_10_0 - 0.75*q_p_10_1 - 0.75*q_p_10_2 + tmp_30 + tmp_31 + tmp_32 + 0.5*tmp_33 + 0.5*tmp_34 + 0.5*tmp_35 + 0.25)) + tmp_45*((-0.75*q_p_2_0 - 0.75*q_p_2_1 - 0.75*q_p_2_2 + tmp_38 + tmp_39 + tmp_40 + 0.5*tmp_41 + 0.5*tmp_42 + 0.5*tmp_43 + 0.25)*(-0.75*q_p_2_0 - 0.75*q_p_2_1 - 0.75*q_p_2_2 + tmp_38 + tmp_39 + tmp_40 + 0.5*tmp_41 + 0.5*tmp_42 + 0.5*tmp_43 + 0.25)) + tmp_53*((-0.75*q_p_3_0 - 0.75*q_p_3_1 - 0.75*q_p_3_2 + tmp_46 + tmp_47 + tmp_48 + 0.5*tmp_49 + 0.5*tmp_50 + 0.5*tmp_51 + 0.25)*(-0.75*q_p_3_0 - 0.75*q_p_3_1 - 0.75*q_p_3_2 + tmp_46 + tmp_47 + tmp_48 + 0.5*tmp_49 + 0.5*tmp_50 + 0.5*tmp_51 + 0.25)) + tmp_61*((-0.75*q_p_4_0 - 0.75*q_p_4_1 - 0.75*q_p_4_2 + tmp_54 + tmp_55 + tmp_56 + 0.5*tmp_57 + 0.5*tmp_58 + 0.5*tmp_59 + 0.25)*(-0.75*q_p_4_0 - 0.75*q_p_4_1 - 0.75*q_p_4_2 + tmp_54 + tmp_55 + tmp_56 + 0.5*tmp_57 + 0.5*tmp_58 + 0.5*tmp_59 + 0.25)) + tmp_69*((-0.75*q_p_5_0 - 0.75*q_p_5_1 - 0.75*q_p_5_2 + tmp_62 + tmp_63 + tmp_64 + 0.5*tmp_65 + 0.5*tmp_66 + 0.5*tmp_67 + 0.25)*(-0.75*q_p_5_0 - 0.75*q_p_5_1 - 0.75*q_p_5_2 + tmp_62 + tmp_63 + tmp_64 + 0.5*tmp_65 + 0.5*tmp_66 + 0.5*tmp_67 + 0.25)) + tmp_77*((-0.75*q_p_6_0 - 0.75*q_p_6_1 - 0.75*q_p_6_2 + tmp_70 + tmp_71 + tmp_72 + 0.5*tmp_73 + 0.5*tmp_74 + 0.5*tmp_75 + 0.25)*(-0.75*q_p_6_0 - 0.75*q_p_6_1 - 0.75*q_p_6_2 + tmp_70 + tmp_71 + tmp_72 + 0.5*tmp_73 + 0.5*tmp_74 + 0.5*tmp_75 + 0.25)) + tmp_85*((-0.75*q_p_7_0 - 0.75*q_p_7_1 - 0.75*q_p_7_2 + tmp_78 + tmp_79 + tmp_80 + 0.5*tmp_81 + 0.5*tmp_82 + 0.5*tmp_83 + 0.25)*(-0.75*q_p_7_0 - 0.75*q_p_7_1 - 0.75*q_p_7_2 + tmp_78 + tmp_79 + tmp_80 + 0.5*tmp_81 + 0.5*tmp_82 + 0.5*tmp_83 + 0.25)) + tmp_93*((-0.75*q_p_8_0 - 0.75*q_p_8_1 - 0.75*q_p_8_2 + tmp_86 + tmp_87 + tmp_88 + 0.5*tmp_89 + 0.5*tmp_90 + 0.5*tmp_91 + 0.25)*(-0.75*q_p_8_0 - 0.75*q_p_8_1 - 0.75*q_p_8_2 + tmp_86 + tmp_87 + tmp_88 + 0.5*tmp_89 + 0.5*tmp_90 + 0.5*tmp_91 + 0.25));
      real_t a_0_1 = tmp_201;
      real_t a_0_2 = tmp_213;
      real_t a_0_3 = tmp_225;
      real_t a_0_4 = tmp_226;
      real_t a_0_5 = tmp_227;
      real_t a_0_6 = tmp_228;
      real_t a_0_7 = tmp_262;
      real_t a_0_8 = tmp_285;
      real_t a_0_9 = tmp_297;
      real_t a_1_0 = tmp_201;
      real_t a_1_1 = tmp_298*((-0.5*q_p_0_0 + tmp_3)*(-0.5*q_p_0_0 + tmp_3)) + tmp_299*((-0.5*q_p_1_0 + tmp_25)*(-0.5*q_p_1_0 + tmp_25)) + tmp_300*((-0.5*q_p_10_0 + tmp_33)*(-0.5*q_p_10_0 + tmp_33)) + tmp_301*((-0.5*q_p_2_0 + tmp_41)*(-0.5*q_p_2_0 + tmp_41)) + tmp_302*((-0.5*q_p_3_0 + tmp_49)*(-0.5*q_p_3_0 + tmp_49)) + tmp_303*((-0.5*q_p_4_0 + tmp_57)*(-0.5*q_p_4_0 + tmp_57)) + tmp_304*((-0.5*q_p_5_0 + tmp_65)*(-0.5*q_p_5_0 + tmp_65)) + tmp_305*((-0.5*q_p_6_0 + tmp_73)*(-0.5*q_p_6_0 + tmp_73)) + tmp_306*((-0.5*q_p_7_0 + tmp_81)*(-0.5*q_p_7_0 + tmp_81)) + tmp_307*((-0.5*q_p_8_0 + tmp_89)*(-0.5*q_p_8_0 + tmp_89)) + tmp_308*((-0.5*q_p_9_0 + tmp_97)*(-0.5*q_p_9_0 + tmp_97));
      real_t a_1_2 = tmp_320;
      real_t a_1_3 = tmp_321;
      real_t a_1_4 = tmp_322;
      real_t a_1_5 = tmp_323;
      real_t a_1_6 = tmp_324;
      real_t a_1_7 = tmp_325;
      real_t a_1_8 = tmp_326;
      real_t a_1_9 = tmp_327;
      real_t a_2_0 = tmp_213;
      real_t a_2_1 = tmp_320;
      real_t a_2_2 = tmp_298*((-0.5*q_p_0_1 + tmp_4)*(-0.5*q_p_0_1 + tmp_4)) + tmp_299*((-0.5*q_p_1_1 + tmp_26)*(-0.5*q_p_1_1 + tmp_26)) + tmp_300*((-0.5*q_p_10_1 + tmp_34)*(-0.5*q_p_10_1 + tmp_34)) + tmp_301*((-0.5*q_p_2_1 + tmp_42)*(-0.5*q_p_2_1 + tmp_42)) + tmp_302*((-0.5*q_p_3_1 + tmp_50)*(-0.5*q_p_3_1 + tmp_50)) + tmp_303*((-0.5*q_p_4_1 + tmp_58)*(-0.5*q_p_4_1 + tmp_58)) + tmp_304*((-0.5*q_p_5_1 + tmp_66)*(-0.5*q_p_5_1 + tmp_66)) + tmp_305*((-0.5*q_p_6_1 + tmp_74)*(-0.5*q_p_6_1 + tmp_74)) + tmp_306*((-0.5*q_p_7_1 + tmp_82)*(-0.5*q_p_7_1 + tmp_82)) + tmp_307*((-0.5*q_p_8_1 + tmp_90)*(-0.5*q_p_8_1 + tmp_90)) + tmp_308*((-0.5*q_p_9_1 + tmp_98)*(-0.5*q_p_9_1 + tmp_98));
      real_t a_2_3 = tmp_339;
      real_t a_2_4 = tmp_340;
      real_t a_2_5 = tmp_341;
      real_t a_2_6 = tmp_342;
      real_t a_2_7 = tmp_343;
      real_t a_2_8 = tmp_344;
      real_t a_2_9 = tmp_345;
      real_t a_3_0 = tmp_225;
      real_t a_3_1 = tmp_321;
      real_t a_3_2 = tmp_339;
      real_t a_3_3 = tmp_298*((-0.5*q_p_0_2 + tmp_5)*(-0.5*q_p_0_2 + tmp_5)) + tmp_299*((-0.5*q_p_1_2 + tmp_27)*(-0.5*q_p_1_2 + tmp_27)) + tmp_300*((-0.5*q_p_10_2 + tmp_35)*(-0.5*q_p_10_2 + tmp_35)) + tmp_301*((-0.5*q_p_2_2 + tmp_43)*(-0.5*q_p_2_2 + tmp_43)) + tmp_302*((-0.5*q_p_3_2 + tmp_51)*(-0.5*q_p_3_2 + tmp_51)) + tmp_303*((-0.5*q_p_4_2 + tmp_59)*(-0.5*q_p_4_2 + tmp_59)) + tmp_304*((-0.5*q_p_5_2 + tmp_67)*(-0.5*q_p_5_2 + tmp_67)) + tmp_305*((-0.5*q_p_6_2 + tmp_75)*(-0.5*q_p_6_2 + tmp_75)) + tmp_306*((-0.5*q_p_7_2 + tmp_83)*(-0.5*q_p_7_2 + tmp_83)) + tmp_307*((-0.5*q_p_8_2 + tmp_91)*(-0.5*q_p_8_2 + tmp_91)) + tmp_308*((-0.5*q_p_9_2 + tmp_99)*(-0.5*q_p_9_2 + tmp_99));
      real_t a_3_4 = tmp_357;
      real_t a_3_5 = tmp_358;
      real_t a_3_6 = tmp_359;
      real_t a_3_7 = tmp_360;
      real_t a_3_8 = tmp_361;
      real_t a_3_9 = tmp_362;
      real_t a_4_0 = tmp_226;
      real_t a_4_1 = tmp_322;
      real_t a_4_2 = tmp_340;
      real_t a_4_3 = tmp_357;
      real_t a_4_4 = tmp_26*tmp_365 + tmp_34*tmp_364 + tmp_363*tmp_4 + tmp_366*tmp_42 + tmp_367*tmp_50 + tmp_368*tmp_58 + tmp_369*tmp_66 + tmp_370*tmp_74 + tmp_371*tmp_82 + tmp_372*tmp_90 + tmp_373*tmp_98;
      real_t a_4_5 = tmp_374;
      real_t a_4_6 = tmp_386;
      real_t a_4_7 = tmp_398;
      real_t a_4_8 = tmp_410;
      real_t a_4_9 = tmp_422;
      real_t a_5_0 = tmp_227;
      real_t a_5_1 = tmp_323;
      real_t a_5_2 = tmp_341;
      real_t a_5_3 = tmp_358;
      real_t a_5_4 = tmp_374;
      real_t a_5_5 = tmp_25*tmp_365 + tmp_3*tmp_363 + tmp_33*tmp_364 + tmp_366*tmp_41 + tmp_367*tmp_49 + tmp_368*tmp_57 + tmp_369*tmp_65 + tmp_370*tmp_73 + tmp_371*tmp_81 + tmp_372*tmp_89 + tmp_373*tmp_97;
      real_t a_5_6 = tmp_423;
      real_t a_5_7 = tmp_424;
      real_t a_5_8 = tmp_425;
      real_t a_5_9 = tmp_426;
      real_t a_6_0 = tmp_228;
      real_t a_6_1 = tmp_324;
      real_t a_6_2 = tmp_342;
      real_t a_6_3 = tmp_359;
      real_t a_6_4 = tmp_386;
      real_t a_6_5 = tmp_423;
      real_t a_6_6 = tmp_25*tmp_377 + tmp_3*tmp_375 + tmp_33*tmp_376 + tmp_378*tmp_41 + tmp_379*tmp_49 + tmp_380*tmp_57 + tmp_381*tmp_65 + tmp_382*tmp_73 + tmp_383*tmp_81 + tmp_384*tmp_89 + tmp_385*tmp_97;
      real_t a_6_7 = tmp_427;
      real_t a_6_8 = tmp_428;
      real_t a_6_9 = tmp_429;
      real_t a_7_0 = tmp_262;
      real_t a_7_1 = tmp_325;
      real_t a_7_2 = tmp_343;
      real_t a_7_3 = tmp_360;
      real_t a_7_4 = tmp_398;
      real_t a_7_5 = tmp_424;
      real_t a_7_6 = tmp_427;
      real_t a_7_7 = tmp_101*((q_p_9_2 + tmp_450 + tmp_451 - tmp_99)*(q_p_9_2 + tmp_450 + tmp_451 - tmp_99)) + tmp_21*((q_p_0_2 + tmp_430 + tmp_431 - tmp_5)*(q_p_0_2 + tmp_430 + tmp_431 - tmp_5)) + tmp_29*((q_p_1_2 - tmp_27 + tmp_432 + tmp_433)*(q_p_1_2 - tmp_27 + tmp_432 + tmp_433)) + tmp_37*((q_p_10_2 - tmp_35 + tmp_434 + tmp_435)*(q_p_10_2 - tmp_35 + tmp_434 + tmp_435)) + tmp_45*((q_p_2_2 - tmp_43 + tmp_436 + tmp_437)*(q_p_2_2 - tmp_43 + tmp_436 + tmp_437)) + tmp_53*((q_p_3_2 + tmp_438 + tmp_439 - tmp_51)*(q_p_3_2 + tmp_438 + tmp_439 - tmp_51)) + tmp_61*((q_p_4_2 + tmp_440 + tmp_441 - tmp_59)*(q_p_4_2 + tmp_440 + tmp_441 - tmp_59)) + tmp_69*((q_p_5_2 + tmp_442 + tmp_443 - tmp_67)*(q_p_5_2 + tmp_442 + tmp_443 - tmp_67)) + tmp_77*((q_p_6_2 + tmp_444 + tmp_445 - tmp_75)*(q_p_6_2 + tmp_444 + tmp_445 - tmp_75)) + tmp_85*((q_p_7_2 + tmp_446 + tmp_447 - tmp_83)*(q_p_7_2 + tmp_446 + tmp_447 - tmp_83)) + tmp_93*((q_p_8_2 + tmp_448 + tmp_449 - tmp_91)*(q_p_8_2 + tmp_448 + tmp_449 - tmp_91));
      real_t a_7_8 = tmp_452;
      real_t a_7_9 = tmp_453;
      real_t a_8_0 = tmp_285;
      real_t a_8_1 = tmp_326;
      real_t a_8_2 = tmp_344;
      real_t a_8_3 = tmp_361;
      real_t a_8_4 = tmp_410;
      real_t a_8_5 = tmp_425;
      real_t a_8_6 = tmp_428;
      real_t a_8_7 = tmp_452;
      real_t a_8_8 = tmp_101*((q_p_9_1 + tmp_451 + tmp_464 - tmp_98)*(q_p_9_1 + tmp_451 + tmp_464 - tmp_98)) + tmp_21*((q_p_0_1 - tmp_4 + tmp_431 + tmp_454)*(q_p_0_1 - tmp_4 + tmp_431 + tmp_454)) + tmp_29*((q_p_1_1 - tmp_26 + tmp_433 + tmp_455)*(q_p_1_1 - tmp_26 + tmp_433 + tmp_455)) + tmp_37*((q_p_10_1 - tmp_34 + tmp_435 + tmp_456)*(q_p_10_1 - tmp_34 + tmp_435 + tmp_456)) + tmp_45*((q_p_2_1 - tmp_42 + tmp_437 + tmp_457)*(q_p_2_1 - tmp_42 + tmp_437 + tmp_457)) + tmp_53*((q_p_3_1 + tmp_439 + tmp_458 - tmp_50)*(q_p_3_1 + tmp_439 + tmp_458 - tmp_50)) + tmp_61*((q_p_4_1 + tmp_441 + tmp_459 - tmp_58)*(q_p_4_1 + tmp_441 + tmp_459 - tmp_58)) + tmp_69*((q_p_5_1 + tmp_443 + tmp_460 - tmp_66)*(q_p_5_1 + tmp_443 + tmp_460 - tmp_66)) + tmp_77*((q_p_6_1 + tmp_445 + tmp_461 - tmp_74)*(q_p_6_1 + tmp_445 + tmp_461 - tmp_74)) + tmp_85*((q_p_7_1 + tmp_447 + tmp_462 - tmp_82)*(q_p_7_1 + tmp_447 + tmp_462 - tmp_82)) + tmp_93*((q_p_8_1 + tmp_449 + tmp_463 - tmp_90)*(q_p_8_1 + tmp_449 + tmp_463 - tmp_90));
      real_t a_8_9 = tmp_465;
      real_t a_9_0 = tmp_297;
      real_t a_9_1 = tmp_327;
      real_t a_9_2 = tmp_345;
      real_t a_9_3 = tmp_362;
      real_t a_9_4 = tmp_422;
      real_t a_9_5 = tmp_426;
      real_t a_9_6 = tmp_429;
      real_t a_9_7 = tmp_453;
      real_t a_9_8 = tmp_465;
      real_t a_9_9 = tmp_101*((q_p_9_0 + tmp_450 + tmp_464 - tmp_97)*(q_p_9_0 + tmp_450 + tmp_464 - tmp_97)) + tmp_21*((q_p_0_0 - tmp_3 + tmp_430 + tmp_454)*(q_p_0_0 - tmp_3 + tmp_430 + tmp_454)) + tmp_29*((q_p_1_0 - tmp_25 + tmp_432 + tmp_455)*(q_p_1_0 - tmp_25 + tmp_432 + tmp_455)) + tmp_37*((q_p_10_0 - tmp_33 + tmp_434 + tmp_456)*(q_p_10_0 - tmp_33 + tmp_434 + tmp_456)) + tmp_45*((q_p_2_0 - tmp_41 + tmp_436 + tmp_457)*(q_p_2_0 - tmp_41 + tmp_436 + tmp_457)) + tmp_53*((q_p_3_0 + tmp_438 + tmp_458 - tmp_49)*(q_p_3_0 + tmp_438 + tmp_458 - tmp_49)) + tmp_61*((q_p_4_0 + tmp_440 + tmp_459 - tmp_57)*(q_p_4_0 + tmp_440 + tmp_459 - tmp_57)) + tmp_69*((q_p_5_0 + tmp_442 + tmp_460 - tmp_65)*(q_p_5_0 + tmp_442 + tmp_460 - tmp_65)) + tmp_77*((q_p_6_0 + tmp_444 + tmp_461 - tmp_73)*(q_p_6_0 + tmp_444 + tmp_461 - tmp_73)) + tmp_85*((q_p_7_0 + tmp_446 + tmp_462 - tmp_81)*(q_p_7_0 + tmp_446 + tmp_462 - tmp_81)) + tmp_93*((q_p_8_0 + tmp_448 + tmp_463 - tmp_89)*(q_p_8_0 + tmp_448 + tmp_463 - tmp_89));
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
      (elMat(0, 4)) = a_0_4;
      (elMat(0, 5)) = a_0_5;
      (elMat(0, 6)) = a_0_6;
      (elMat(0, 7)) = a_0_7;
      (elMat(0, 8)) = a_0_8;
      (elMat(0, 9)) = a_0_9;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(1, 3)) = a_1_3;
      (elMat(1, 4)) = a_1_4;
      (elMat(1, 5)) = a_1_5;
      (elMat(1, 6)) = a_1_6;
      (elMat(1, 7)) = a_1_7;
      (elMat(1, 8)) = a_1_8;
      (elMat(1, 9)) = a_1_9;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
      (elMat(2, 3)) = a_2_3;
      (elMat(2, 4)) = a_2_4;
      (elMat(2, 5)) = a_2_5;
      (elMat(2, 6)) = a_2_6;
      (elMat(2, 7)) = a_2_7;
      (elMat(2, 8)) = a_2_8;
      (elMat(2, 9)) = a_2_9;
      (elMat(3, 0)) = a_3_0;
      (elMat(3, 1)) = a_3_1;
      (elMat(3, 2)) = a_3_2;
      (elMat(3, 3)) = a_3_3;
      (elMat(3, 4)) = a_3_4;
      (elMat(3, 5)) = a_3_5;
      (elMat(3, 6)) = a_3_6;
      (elMat(3, 7)) = a_3_7;
      (elMat(3, 8)) = a_3_8;
      (elMat(3, 9)) = a_3_9;
      (elMat(4, 0)) = a_4_0;
      (elMat(4, 1)) = a_4_1;
      (elMat(4, 2)) = a_4_2;
      (elMat(4, 3)) = a_4_3;
      (elMat(4, 4)) = a_4_4;
      (elMat(4, 5)) = a_4_5;
      (elMat(4, 6)) = a_4_6;
      (elMat(4, 7)) = a_4_7;
      (elMat(4, 8)) = a_4_8;
      (elMat(4, 9)) = a_4_9;
      (elMat(5, 0)) = a_5_0;
      (elMat(5, 1)) = a_5_1;
      (elMat(5, 2)) = a_5_2;
      (elMat(5, 3)) = a_5_3;
      (elMat(5, 4)) = a_5_4;
      (elMat(5, 5)) = a_5_5;
      (elMat(5, 6)) = a_5_6;
      (elMat(5, 7)) = a_5_7;
      (elMat(5, 8)) = a_5_8;
      (elMat(5, 9)) = a_5_9;
      (elMat(6, 0)) = a_6_0;
      (elMat(6, 1)) = a_6_1;
      (elMat(6, 2)) = a_6_2;
      (elMat(6, 3)) = a_6_3;
      (elMat(6, 4)) = a_6_4;
      (elMat(6, 5)) = a_6_5;
      (elMat(6, 6)) = a_6_6;
      (elMat(6, 7)) = a_6_7;
      (elMat(6, 8)) = a_6_8;
      (elMat(6, 9)) = a_6_9;
      (elMat(7, 0)) = a_7_0;
      (elMat(7, 1)) = a_7_1;
      (elMat(7, 2)) = a_7_2;
      (elMat(7, 3)) = a_7_3;
      (elMat(7, 4)) = a_7_4;
      (elMat(7, 5)) = a_7_5;
      (elMat(7, 6)) = a_7_6;
      (elMat(7, 7)) = a_7_7;
      (elMat(7, 8)) = a_7_8;
      (elMat(7, 9)) = a_7_9;
      (elMat(8, 0)) = a_8_0;
      (elMat(8, 1)) = a_8_1;
      (elMat(8, 2)) = a_8_2;
      (elMat(8, 3)) = a_8_3;
      (elMat(8, 4)) = a_8_4;
      (elMat(8, 5)) = a_8_5;
      (elMat(8, 6)) = a_8_6;
      (elMat(8, 7)) = a_8_7;
      (elMat(8, 8)) = a_8_8;
      (elMat(8, 9)) = a_8_9;
      (elMat(9, 0)) = a_9_0;
      (elMat(9, 1)) = a_9_1;
      (elMat(9, 2)) = a_9_2;
      (elMat(9, 3)) = a_9_3;
      (elMat(9, 4)) = a_9_4;
      (elMat(9, 5)) = a_9_5;
      (elMat(9, 6)) = a_9_6;
      (elMat(9, 7)) = a_9_7;
      (elMat(9, 8)) = a_9_8;
      (elMat(9, 9)) = a_9_9;
   }

 private:

   void Blending_DF_Triangle( real_t in_0, real_t in_1, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3 ) const
   {
      Point3D  mappedPt( {in_0, in_1, 0} );
      Matrix2r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 1, 0 );
      *out_3 = DPsi( 1, 1 );
   }

   void Blending_DF_Tetrahedron( real_t in_0, real_t in_1, real_t in_2, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3, real_t * out_4, real_t * out_5, real_t * out_6, real_t * out_7, real_t * out_8 ) const
   {
      Point3D  mappedPt( {in_0, in_1, in_2} );
      Matrix3r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 0, 2 );
      *out_3 = DPsi( 1, 0 );
      *out_4 = DPsi( 1, 1 );
      *out_5 = DPsi( 1, 2 );
      *out_6 = DPsi( 2, 0 );
      *out_7 = DPsi( 2, 1 );
      *out_8 = DPsi( 2, 2 );
   }

};

} // namespace hyteg
