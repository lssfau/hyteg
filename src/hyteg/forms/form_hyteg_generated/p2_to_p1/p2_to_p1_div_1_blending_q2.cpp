/*
 * Copyright (c) 2017-2021 Nils Kohl.
 *
 * This file is part of HyTeG
 * (see https://i10git.cs.fau.de/hyteg/hyteg).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The entire file was generated with the HyTeG form generator.
 * 
 * Software:
 *
 * - quadpy version: 0.16.5
 *
 * Avoid modifying this file. If buggy, consider fixing the generator itself.
 */

#include "p2_to_p1_div_1_blending_q2.hpp"

namespace hyteg {
namespace forms {

   void p2_to_p1_div_1_blending_q2::integrateAll( const std::array< Point3D, 3 >& coords, Matrix< real_t, 3, 6 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t Blending_DF_Triangle_0_0 = 0;
      real_t Blending_DF_Triangle_0_1 = 0;
      real_t Blending_DF_Triangle_0_2 = 0;
      real_t Blending_DF_Triangle_0_3 = 0;
      real_t Blending_DF_Triangle_1_0 = 0;
      real_t Blending_DF_Triangle_1_1 = 0;
      real_t Blending_DF_Triangle_1_2 = 0;
      real_t Blending_DF_Triangle_1_3 = 0;
      real_t Blending_DF_Triangle_2_0 = 0;
      real_t Blending_DF_Triangle_2_1 = 0;
      real_t Blending_DF_Triangle_2_2 = 0;
      real_t Blending_DF_Triangle_2_3 = 0;
      Blending_DF_Triangle( 0.16666666666666674*p_affine_0_0 + 0.16666666666666666*p_affine_1_0 + 0.66666666666666663*p_affine_2_0, 0.16666666666666674*p_affine_0_1 + 0.16666666666666666*p_affine_1_1 + 0.66666666666666663*p_affine_2_1, &Blending_DF_Triangle_0_0, &Blending_DF_Triangle_0_1, &Blending_DF_Triangle_0_2, &Blending_DF_Triangle_0_3 );
      Blending_DF_Triangle( 0.16666666666666671*p_affine_0_0 + 0.66666666666666663*p_affine_1_0 + 0.16666666666666666*p_affine_2_0, 0.16666666666666671*p_affine_0_1 + 0.66666666666666663*p_affine_1_1 + 0.16666666666666666*p_affine_2_1, &Blending_DF_Triangle_1_0, &Blending_DF_Triangle_1_1, &Blending_DF_Triangle_1_2, &Blending_DF_Triangle_1_3 );
      Blending_DF_Triangle( 0.66666666666666674*p_affine_0_0 + 0.16666666666666666*p_affine_1_0 + 0.16666666666666666*p_affine_2_0, 0.66666666666666674*p_affine_0_1 + 0.16666666666666666*p_affine_1_1 + 0.16666666666666666*p_affine_2_1, &Blending_DF_Triangle_2_0, &Blending_DF_Triangle_2_1, &Blending_DF_Triangle_2_2, &Blending_DF_Triangle_2_3 );
      real_t tmp_0 = 0.66666666666666663;
      real_t tmp_1 = 2.6666666666666665;
      real_t tmp_2 = tmp_0 + tmp_1 - 3;
      real_t tmp_3 = -p_affine_0_0;
      real_t tmp_4 = p_affine_1_0 + tmp_3;
      real_t tmp_5 = Blending_DF_Triangle_0_0*Blending_DF_Triangle_0_3 - Blending_DF_Triangle_0_1*Blending_DF_Triangle_0_2;
      real_t tmp_6 = -p_affine_0_1;
      real_t tmp_7 = p_affine_2_1 + tmp_6;
      real_t tmp_8 = 1.0 / (tmp_4*tmp_7 - (p_affine_1_1 + tmp_6)*(p_affine_2_0 + tmp_3));
      real_t tmp_9 = tmp_8/tmp_5;
      real_t tmp_10 = Blending_DF_Triangle_0_0*tmp_9;
      real_t tmp_11 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_12 = Blending_DF_Triangle_0_1*tmp_9;
      real_t tmp_13 = tmp_10*tmp_4 - tmp_11*tmp_12;
      real_t tmp_14 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_15 = tmp_10*tmp_14 - tmp_12*tmp_7;
      real_t tmp_16 = -tmp_13*tmp_2 - tmp_15*tmp_2;
      real_t tmp_17 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_18 = 0.16666666666666666*tmp_17*std::abs(tmp_5);
      real_t tmp_19 = 0.16666666666666674*tmp_18;
      real_t tmp_20 = 2.6666666666666665;
      real_t tmp_21 = 0.66666666666666663;
      real_t tmp_22 = tmp_20 + tmp_21 - 3;
      real_t tmp_23 = Blending_DF_Triangle_1_0*Blending_DF_Triangle_1_3 - Blending_DF_Triangle_1_1*Blending_DF_Triangle_1_2;
      real_t tmp_24 = tmp_8/tmp_23;
      real_t tmp_25 = Blending_DF_Triangle_1_0*tmp_24;
      real_t tmp_26 = Blending_DF_Triangle_1_1*tmp_24;
      real_t tmp_27 = -tmp_11*tmp_26 + tmp_25*tmp_4;
      real_t tmp_28 = tmp_14*tmp_25 - tmp_26*tmp_7;
      real_t tmp_29 = -tmp_22*tmp_27 - tmp_22*tmp_28;
      real_t tmp_30 = 0.16666666666666666*tmp_17*std::abs(tmp_23);
      real_t tmp_31 = 0.16666666666666671*tmp_30;
      real_t tmp_32 = 0.66666666666666663;
      real_t tmp_33 = 0.66666666666666663;
      real_t tmp_34 = tmp_32 + tmp_33 - 3;
      real_t tmp_35 = Blending_DF_Triangle_2_0*Blending_DF_Triangle_2_3 - Blending_DF_Triangle_2_1*Blending_DF_Triangle_2_2;
      real_t tmp_36 = tmp_8/tmp_35;
      real_t tmp_37 = Blending_DF_Triangle_2_0*tmp_36;
      real_t tmp_38 = Blending_DF_Triangle_2_1*tmp_36;
      real_t tmp_39 = -tmp_11*tmp_38 + tmp_37*tmp_4;
      real_t tmp_40 = tmp_14*tmp_37 - tmp_38*tmp_7;
      real_t tmp_41 = -tmp_34*tmp_39 - tmp_34*tmp_40;
      real_t tmp_42 = 0.16666666666666666*tmp_17*std::abs(tmp_35);
      real_t tmp_43 = 0.66666666666666674*tmp_42;
      real_t tmp_44 = tmp_15*(tmp_0 - 1);
      real_t tmp_45 = tmp_28*(tmp_20 - 1);
      real_t tmp_46 = tmp_40*(tmp_32 - 1);
      real_t tmp_47 = tmp_13*(tmp_1 - 1);
      real_t tmp_48 = tmp_27*(tmp_21 - 1);
      real_t tmp_49 = tmp_39*(tmp_33 - 1);
      real_t tmp_50 = tmp_0*tmp_13;
      real_t tmp_51 = tmp_1*tmp_15;
      real_t tmp_52 = -tmp_50 - tmp_51;
      real_t tmp_53 = tmp_20*tmp_27;
      real_t tmp_54 = tmp_21*tmp_28;
      real_t tmp_55 = -tmp_53 - tmp_54;
      real_t tmp_56 = tmp_32*tmp_39;
      real_t tmp_57 = tmp_33*tmp_40;
      real_t tmp_58 = -tmp_56 - tmp_57;
      real_t tmp_59 = -tmp_13*(-tmp_0 - 1.333333333333333) + tmp_51;
      real_t tmp_60 = -tmp_27*(2.666666666666667 - tmp_20) + tmp_54;
      real_t tmp_61 = -tmp_39*(2.666666666666667 - tmp_32) + tmp_57;
      real_t tmp_62 = -tmp_15*(2.666666666666667 - tmp_1) + tmp_50;
      real_t tmp_63 = -tmp_28*(-tmp_21 - 1.333333333333333) + tmp_53;
      real_t tmp_64 = -tmp_40*(2.666666666666667 - tmp_33) + tmp_56;
      real_t tmp_65 = 0.16666666666666666*tmp_18;
      real_t tmp_66 = 0.66666666666666663*tmp_30;
      real_t tmp_67 = 0.16666666666666666*tmp_42;
      real_t tmp_68 = 0.66666666666666663*tmp_18;
      real_t tmp_69 = 0.16666666666666666*tmp_30;
      real_t tmp_70 = 0.16666666666666666*tmp_42;
      real_t a_0_0 = tmp_16*tmp_19 + tmp_29*tmp_31 + tmp_41*tmp_43;
      real_t a_0_1 = -tmp_19*tmp_44 - tmp_31*tmp_45 - tmp_43*tmp_46;
      real_t a_0_2 = -tmp_19*tmp_47 - tmp_31*tmp_48 - tmp_43*tmp_49;
      real_t a_0_3 = tmp_19*tmp_52 + tmp_31*tmp_55 + tmp_43*tmp_58;
      real_t a_0_4 = tmp_19*tmp_59 + tmp_31*tmp_60 + tmp_43*tmp_61;
      real_t a_0_5 = tmp_19*tmp_62 + tmp_31*tmp_63 + tmp_43*tmp_64;
      real_t a_1_0 = tmp_16*tmp_65 + tmp_29*tmp_66 + tmp_41*tmp_67;
      real_t a_1_1 = -tmp_44*tmp_65 - tmp_45*tmp_66 - tmp_46*tmp_67;
      real_t a_1_2 = -tmp_47*tmp_65 - tmp_48*tmp_66 - tmp_49*tmp_67;
      real_t a_1_3 = tmp_52*tmp_65 + tmp_55*tmp_66 + tmp_58*tmp_67;
      real_t a_1_4 = tmp_59*tmp_65 + tmp_60*tmp_66 + tmp_61*tmp_67;
      real_t a_1_5 = tmp_62*tmp_65 + tmp_63*tmp_66 + tmp_64*tmp_67;
      real_t a_2_0 = tmp_16*tmp_68 + tmp_29*tmp_69 + tmp_41*tmp_70;
      real_t a_2_1 = -tmp_44*tmp_68 - tmp_45*tmp_69 - tmp_46*tmp_70;
      real_t a_2_2 = -tmp_47*tmp_68 - tmp_48*tmp_69 - tmp_49*tmp_70;
      real_t a_2_3 = tmp_52*tmp_68 + tmp_55*tmp_69 + tmp_58*tmp_70;
      real_t a_2_4 = tmp_59*tmp_68 + tmp_60*tmp_69 + tmp_61*tmp_70;
      real_t a_2_5 = tmp_62*tmp_68 + tmp_63*tmp_69 + tmp_64*tmp_70;
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
      (elMat(0, 4)) = a_0_4;
      (elMat(0, 5)) = a_0_5;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(1, 3)) = a_1_3;
      (elMat(1, 4)) = a_1_4;
      (elMat(1, 5)) = a_1_5;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
      (elMat(2, 3)) = a_2_3;
      (elMat(2, 4)) = a_2_4;
      (elMat(2, 5)) = a_2_5;
   }

   void p2_to_p1_div_1_blending_q2::integrateRow0( const std::array< Point3D, 3 >& coords, Matrix< real_t, 1, 6 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t Blending_DF_Triangle_0_0 = 0;
      real_t Blending_DF_Triangle_0_1 = 0;
      real_t Blending_DF_Triangle_0_2 = 0;
      real_t Blending_DF_Triangle_0_3 = 0;
      real_t Blending_DF_Triangle_1_0 = 0;
      real_t Blending_DF_Triangle_1_1 = 0;
      real_t Blending_DF_Triangle_1_2 = 0;
      real_t Blending_DF_Triangle_1_3 = 0;
      real_t Blending_DF_Triangle_2_0 = 0;
      real_t Blending_DF_Triangle_2_1 = 0;
      real_t Blending_DF_Triangle_2_2 = 0;
      real_t Blending_DF_Triangle_2_3 = 0;
      Blending_DF_Triangle( 0.16666666666666674*p_affine_0_0 + 0.16666666666666666*p_affine_1_0 + 0.66666666666666663*p_affine_2_0, 0.16666666666666674*p_affine_0_1 + 0.16666666666666666*p_affine_1_1 + 0.66666666666666663*p_affine_2_1, &Blending_DF_Triangle_0_0, &Blending_DF_Triangle_0_1, &Blending_DF_Triangle_0_2, &Blending_DF_Triangle_0_3 );
      Blending_DF_Triangle( 0.16666666666666671*p_affine_0_0 + 0.66666666666666663*p_affine_1_0 + 0.16666666666666666*p_affine_2_0, 0.16666666666666671*p_affine_0_1 + 0.66666666666666663*p_affine_1_1 + 0.16666666666666666*p_affine_2_1, &Blending_DF_Triangle_1_0, &Blending_DF_Triangle_1_1, &Blending_DF_Triangle_1_2, &Blending_DF_Triangle_1_3 );
      Blending_DF_Triangle( 0.66666666666666674*p_affine_0_0 + 0.16666666666666666*p_affine_1_0 + 0.16666666666666666*p_affine_2_0, 0.66666666666666674*p_affine_0_1 + 0.16666666666666666*p_affine_1_1 + 0.16666666666666666*p_affine_2_1, &Blending_DF_Triangle_2_0, &Blending_DF_Triangle_2_1, &Blending_DF_Triangle_2_2, &Blending_DF_Triangle_2_3 );
      real_t tmp_0 = 0.66666666666666663;
      real_t tmp_1 = 2.6666666666666665;
      real_t tmp_2 = tmp_0 + tmp_1 - 3;
      real_t tmp_3 = -p_affine_0_0;
      real_t tmp_4 = p_affine_1_0 + tmp_3;
      real_t tmp_5 = Blending_DF_Triangle_0_0*Blending_DF_Triangle_0_3 - Blending_DF_Triangle_0_1*Blending_DF_Triangle_0_2;
      real_t tmp_6 = -p_affine_0_1;
      real_t tmp_7 = p_affine_2_1 + tmp_6;
      real_t tmp_8 = 1.0 / (tmp_4*tmp_7 - (p_affine_1_1 + tmp_6)*(p_affine_2_0 + tmp_3));
      real_t tmp_9 = tmp_8/tmp_5;
      real_t tmp_10 = Blending_DF_Triangle_0_0*tmp_9;
      real_t tmp_11 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_12 = Blending_DF_Triangle_0_1*tmp_9;
      real_t tmp_13 = tmp_10*tmp_4 - tmp_11*tmp_12;
      real_t tmp_14 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_15 = tmp_10*tmp_14 - tmp_12*tmp_7;
      real_t tmp_16 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_17 = 0.02777777777777779*tmp_16*std::abs(tmp_5);
      real_t tmp_18 = 2.6666666666666665;
      real_t tmp_19 = 0.66666666666666663;
      real_t tmp_20 = tmp_18 + tmp_19 - 3;
      real_t tmp_21 = Blending_DF_Triangle_1_0*Blending_DF_Triangle_1_3 - Blending_DF_Triangle_1_1*Blending_DF_Triangle_1_2;
      real_t tmp_22 = tmp_8/tmp_21;
      real_t tmp_23 = Blending_DF_Triangle_1_0*tmp_22;
      real_t tmp_24 = Blending_DF_Triangle_1_1*tmp_22;
      real_t tmp_25 = -tmp_11*tmp_24 + tmp_23*tmp_4;
      real_t tmp_26 = tmp_14*tmp_23 - tmp_24*tmp_7;
      real_t tmp_27 = 0.027777777777777783*tmp_16*std::abs(tmp_21);
      real_t tmp_28 = 0.66666666666666663;
      real_t tmp_29 = 0.66666666666666663;
      real_t tmp_30 = tmp_28 + tmp_29 - 3;
      real_t tmp_31 = Blending_DF_Triangle_2_0*Blending_DF_Triangle_2_3 - Blending_DF_Triangle_2_1*Blending_DF_Triangle_2_2;
      real_t tmp_32 = tmp_8/tmp_31;
      real_t tmp_33 = Blending_DF_Triangle_2_0*tmp_32;
      real_t tmp_34 = Blending_DF_Triangle_2_1*tmp_32;
      real_t tmp_35 = -tmp_11*tmp_34 + tmp_33*tmp_4;
      real_t tmp_36 = tmp_14*tmp_33 - tmp_34*tmp_7;
      real_t tmp_37 = 0.11111111111111112*tmp_16*std::abs(tmp_31);
      real_t tmp_38 = tmp_0*tmp_13;
      real_t tmp_39 = tmp_1*tmp_15;
      real_t tmp_40 = tmp_18*tmp_25;
      real_t tmp_41 = tmp_19*tmp_26;
      real_t tmp_42 = tmp_28*tmp_35;
      real_t tmp_43 = tmp_29*tmp_36;
      real_t a_0_0 = tmp_17*(-tmp_13*tmp_2 - tmp_15*tmp_2) + tmp_27*(-tmp_20*tmp_25 - tmp_20*tmp_26) + tmp_37*(-tmp_30*tmp_35 - tmp_30*tmp_36);
      real_t a_0_1 = -tmp_15*tmp_17*(tmp_0 - 1) - tmp_26*tmp_27*(tmp_18 - 1) - tmp_36*tmp_37*(tmp_28 - 1);
      real_t a_0_2 = -tmp_13*tmp_17*(tmp_1 - 1) - tmp_25*tmp_27*(tmp_19 - 1) - tmp_35*tmp_37*(tmp_29 - 1);
      real_t a_0_3 = tmp_17*(-tmp_38 - tmp_39) + tmp_27*(-tmp_40 - tmp_41) + tmp_37*(-tmp_42 - tmp_43);
      real_t a_0_4 = tmp_17*(-tmp_13*(-tmp_0 - 1.333333333333333) + tmp_39) + tmp_27*(-tmp_25*(2.666666666666667 - tmp_18) + tmp_41) + tmp_37*(-tmp_35*(2.666666666666667 - tmp_28) + tmp_43);
      real_t a_0_5 = tmp_17*(-tmp_15*(2.666666666666667 - tmp_1) + tmp_38) + tmp_27*(-tmp_26*(-tmp_19 - 1.333333333333333) + tmp_40) + tmp_37*(-tmp_36*(2.666666666666667 - tmp_29) + tmp_42);
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
      (elMat(0, 4)) = a_0_4;
      (elMat(0, 5)) = a_0_5;
   }

   void p2_to_p1_div_1_blending_q2::integrateAll( const std::array< Point3D, 4 >& coords, Matrix< real_t, 4, 10 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_0_0 = 0;
      real_t Blending_DF_Tetrahedron_0_1 = 0;
      real_t Blending_DF_Tetrahedron_0_2 = 0;
      real_t Blending_DF_Tetrahedron_0_3 = 0;
      real_t Blending_DF_Tetrahedron_0_4 = 0;
      real_t Blending_DF_Tetrahedron_0_5 = 0;
      real_t Blending_DF_Tetrahedron_0_6 = 0;
      real_t Blending_DF_Tetrahedron_0_7 = 0;
      real_t Blending_DF_Tetrahedron_0_8 = 0;
      real_t Blending_DF_Tetrahedron_1_0 = 0;
      real_t Blending_DF_Tetrahedron_1_1 = 0;
      real_t Blending_DF_Tetrahedron_1_2 = 0;
      real_t Blending_DF_Tetrahedron_1_3 = 0;
      real_t Blending_DF_Tetrahedron_1_4 = 0;
      real_t Blending_DF_Tetrahedron_1_5 = 0;
      real_t Blending_DF_Tetrahedron_1_6 = 0;
      real_t Blending_DF_Tetrahedron_1_7 = 0;
      real_t Blending_DF_Tetrahedron_1_8 = 0;
      real_t Blending_DF_Tetrahedron_2_0 = 0;
      real_t Blending_DF_Tetrahedron_2_1 = 0;
      real_t Blending_DF_Tetrahedron_2_2 = 0;
      real_t Blending_DF_Tetrahedron_2_3 = 0;
      real_t Blending_DF_Tetrahedron_2_4 = 0;
      real_t Blending_DF_Tetrahedron_2_5 = 0;
      real_t Blending_DF_Tetrahedron_2_6 = 0;
      real_t Blending_DF_Tetrahedron_2_7 = 0;
      real_t Blending_DF_Tetrahedron_2_8 = 0;
      real_t Blending_DF_Tetrahedron_3_0 = 0;
      real_t Blending_DF_Tetrahedron_3_1 = 0;
      real_t Blending_DF_Tetrahedron_3_2 = 0;
      real_t Blending_DF_Tetrahedron_3_3 = 0;
      real_t Blending_DF_Tetrahedron_3_4 = 0;
      real_t Blending_DF_Tetrahedron_3_5 = 0;
      real_t Blending_DF_Tetrahedron_3_6 = 0;
      real_t Blending_DF_Tetrahedron_3_7 = 0;
      real_t Blending_DF_Tetrahedron_3_8 = 0;
      Blending_DF_Tetrahedron( 0.13819660112501042*p_affine_0_0 + 0.13819660112501059*p_affine_1_0 + 0.13819660112501059*p_affine_2_0 + 0.58541019662496829*p_affine_3_0, 0.13819660112501042*p_affine_0_1 + 0.13819660112501059*p_affine_1_1 + 0.13819660112501059*p_affine_2_1 + 0.58541019662496829*p_affine_3_1, 0.13819660112501042*p_affine_0_2 + 0.13819660112501059*p_affine_1_2 + 0.13819660112501059*p_affine_2_2 + 0.58541019662496829*p_affine_3_2, &Blending_DF_Tetrahedron_0_0, &Blending_DF_Tetrahedron_0_1, &Blending_DF_Tetrahedron_0_2, &Blending_DF_Tetrahedron_0_3, &Blending_DF_Tetrahedron_0_4, &Blending_DF_Tetrahedron_0_5, &Blending_DF_Tetrahedron_0_6, &Blending_DF_Tetrahedron_0_7, &Blending_DF_Tetrahedron_0_8 );
      Blending_DF_Tetrahedron( 0.13819660112501048*p_affine_0_0 + 0.13819660112501059*p_affine_1_0 + 0.58541019662496829*p_affine_2_0 + 0.13819660112501059*p_affine_3_0, 0.13819660112501048*p_affine_0_1 + 0.13819660112501059*p_affine_1_1 + 0.58541019662496829*p_affine_2_1 + 0.13819660112501059*p_affine_3_1, 0.13819660112501048*p_affine_0_2 + 0.13819660112501059*p_affine_1_2 + 0.58541019662496829*p_affine_2_2 + 0.13819660112501059*p_affine_3_2, &Blending_DF_Tetrahedron_1_0, &Blending_DF_Tetrahedron_1_1, &Blending_DF_Tetrahedron_1_2, &Blending_DF_Tetrahedron_1_3, &Blending_DF_Tetrahedron_1_4, &Blending_DF_Tetrahedron_1_5, &Blending_DF_Tetrahedron_1_6, &Blending_DF_Tetrahedron_1_7, &Blending_DF_Tetrahedron_1_8 );
      Blending_DF_Tetrahedron( 0.13819660112501053*p_affine_0_0 + 0.58541019662496829*p_affine_1_0 + 0.13819660112501059*p_affine_2_0 + 0.13819660112501059*p_affine_3_0, 0.13819660112501053*p_affine_0_1 + 0.58541019662496829*p_affine_1_1 + 0.13819660112501059*p_affine_2_1 + 0.13819660112501059*p_affine_3_1, 0.13819660112501053*p_affine_0_2 + 0.58541019662496829*p_affine_1_2 + 0.13819660112501059*p_affine_2_2 + 0.13819660112501059*p_affine_3_2, &Blending_DF_Tetrahedron_2_0, &Blending_DF_Tetrahedron_2_1, &Blending_DF_Tetrahedron_2_2, &Blending_DF_Tetrahedron_2_3, &Blending_DF_Tetrahedron_2_4, &Blending_DF_Tetrahedron_2_5, &Blending_DF_Tetrahedron_2_6, &Blending_DF_Tetrahedron_2_7, &Blending_DF_Tetrahedron_2_8 );
      Blending_DF_Tetrahedron( 0.58541019662496807*p_affine_0_0 + 0.13819660112501059*p_affine_1_0 + 0.13819660112501059*p_affine_2_0 + 0.13819660112501059*p_affine_3_0, 0.58541019662496807*p_affine_0_1 + 0.13819660112501059*p_affine_1_1 + 0.13819660112501059*p_affine_2_1 + 0.13819660112501059*p_affine_3_1, 0.58541019662496807*p_affine_0_2 + 0.13819660112501059*p_affine_1_2 + 0.13819660112501059*p_affine_2_2 + 0.13819660112501059*p_affine_3_2, &Blending_DF_Tetrahedron_3_0, &Blending_DF_Tetrahedron_3_1, &Blending_DF_Tetrahedron_3_2, &Blending_DF_Tetrahedron_3_3, &Blending_DF_Tetrahedron_3_4, &Blending_DF_Tetrahedron_3_5, &Blending_DF_Tetrahedron_3_6, &Blending_DF_Tetrahedron_3_7, &Blending_DF_Tetrahedron_3_8 );
      real_t tmp_0 = 0.55278640450004235;
      real_t tmp_1 = 0.55278640450004235;
      real_t tmp_2 = 2.3416407864998732;
      real_t tmp_3 = tmp_0 + tmp_1 + tmp_2 - 3.0;
      real_t tmp_4 = -p_affine_0_0;
      real_t tmp_5 = p_affine_1_0 + tmp_4;
      real_t tmp_6 = -p_affine_0_1;
      real_t tmp_7 = p_affine_2_1 + tmp_6;
      real_t tmp_8 = p_affine_2_0 + tmp_4;
      real_t tmp_9 = p_affine_1_1 + tmp_6;
      real_t tmp_10 = tmp_5*tmp_7 - tmp_8*tmp_9;
      real_t tmp_11 = Blending_DF_Tetrahedron_0_1*Blending_DF_Tetrahedron_0_6;
      real_t tmp_12 = Blending_DF_Tetrahedron_0_0*Blending_DF_Tetrahedron_0_7;
      real_t tmp_13 = Blending_DF_Tetrahedron_0_0*Blending_DF_Tetrahedron_0_8;
      real_t tmp_14 = Blending_DF_Tetrahedron_0_2*Blending_DF_Tetrahedron_0_7;
      real_t tmp_15 = Blending_DF_Tetrahedron_0_1*Blending_DF_Tetrahedron_0_8;
      real_t tmp_16 = Blending_DF_Tetrahedron_0_2*Blending_DF_Tetrahedron_0_6;
      real_t tmp_17 = Blending_DF_Tetrahedron_0_3*tmp_14 - Blending_DF_Tetrahedron_0_3*tmp_15 + Blending_DF_Tetrahedron_0_4*tmp_13 - Blending_DF_Tetrahedron_0_4*tmp_16 + Blending_DF_Tetrahedron_0_5*tmp_11 - Blending_DF_Tetrahedron_0_5*tmp_12;
      real_t tmp_18 = -p_affine_0_2;
      real_t tmp_19 = p_affine_3_2 + tmp_18;
      real_t tmp_20 = tmp_19*tmp_5;
      real_t tmp_21 = p_affine_3_1 + tmp_6;
      real_t tmp_22 = p_affine_1_2 + tmp_18;
      real_t tmp_23 = tmp_21*tmp_22;
      real_t tmp_24 = p_affine_2_2 + tmp_18;
      real_t tmp_25 = p_affine_3_0 + tmp_4;
      real_t tmp_26 = tmp_25*tmp_9;
      real_t tmp_27 = tmp_21*tmp_5;
      real_t tmp_28 = tmp_19*tmp_9;
      real_t tmp_29 = tmp_22*tmp_25;
      real_t tmp_30 = 1.0 / (tmp_20*tmp_7 + tmp_23*tmp_8 + tmp_24*tmp_26 - tmp_24*tmp_27 - tmp_28*tmp_8 - tmp_29*tmp_7);
      real_t tmp_31 = tmp_30/tmp_17;
      real_t tmp_32 = tmp_31*(tmp_11 - tmp_12);
      real_t tmp_33 = tmp_22*tmp_8 - tmp_24*tmp_5;
      real_t tmp_34 = tmp_31*(tmp_13 - tmp_16);
      real_t tmp_35 = -tmp_22*tmp_7 + tmp_24*tmp_9;
      real_t tmp_36 = tmp_31*(tmp_14 - tmp_15);
      real_t tmp_37 = tmp_10*tmp_32 + tmp_33*tmp_34 + tmp_35*tmp_36;
      real_t tmp_38 = tmp_26 - tmp_27;
      real_t tmp_39 = tmp_20 - tmp_29;
      real_t tmp_40 = tmp_23 - tmp_28;
      real_t tmp_41 = tmp_32*tmp_38 + tmp_34*tmp_39 + tmp_36*tmp_40;
      real_t tmp_42 = tmp_21*tmp_8 - tmp_25*tmp_7;
      real_t tmp_43 = -tmp_19*tmp_8 + tmp_24*tmp_25;
      real_t tmp_44 = tmp_19*tmp_7 - tmp_21*tmp_24;
      real_t tmp_45 = tmp_32*tmp_42 + tmp_34*tmp_43 + tmp_36*tmp_44;
      real_t tmp_46 = -tmp_3*tmp_37 - tmp_3*tmp_41 - tmp_3*tmp_45;
      real_t tmp_47 = p_affine_0_0*p_affine_1_1;
      real_t tmp_48 = p_affine_0_0*p_affine_1_2;
      real_t tmp_49 = p_affine_2_1*p_affine_3_2;
      real_t tmp_50 = p_affine_0_1*p_affine_1_0;
      real_t tmp_51 = p_affine_0_1*p_affine_1_2;
      real_t tmp_52 = p_affine_2_2*p_affine_3_0;
      real_t tmp_53 = p_affine_0_2*p_affine_1_0;
      real_t tmp_54 = p_affine_0_2*p_affine_1_1;
      real_t tmp_55 = p_affine_2_0*p_affine_3_1;
      real_t tmp_56 = p_affine_2_2*p_affine_3_1;
      real_t tmp_57 = p_affine_2_0*p_affine_3_2;
      real_t tmp_58 = p_affine_2_1*p_affine_3_0;
      real_t tmp_59 = std::abs(p_affine_0_0*tmp_49 - p_affine_0_0*tmp_56 + p_affine_0_1*tmp_52 - p_affine_0_1*tmp_57 + p_affine_0_2*tmp_55 - p_affine_0_2*tmp_58 - p_affine_1_0*tmp_49 + p_affine_1_0*tmp_56 - p_affine_1_1*tmp_52 + p_affine_1_1*tmp_57 - p_affine_1_2*tmp_55 + p_affine_1_2*tmp_58 + p_affine_2_0*tmp_51 - p_affine_2_0*tmp_54 - p_affine_2_1*tmp_48 + p_affine_2_1*tmp_53 + p_affine_2_2*tmp_47 - p_affine_2_2*tmp_50 - p_affine_3_0*tmp_51 + p_affine_3_0*tmp_54 + p_affine_3_1*tmp_48 - p_affine_3_1*tmp_53 - p_affine_3_2*tmp_47 + p_affine_3_2*tmp_50);
      real_t tmp_60 = 0.041666666666666657*tmp_59*std::abs(tmp_17);
      real_t tmp_61 = 0.13819660112501042*tmp_60;
      real_t tmp_62 = 0.55278640450004235;
      real_t tmp_63 = 2.3416407864998732;
      real_t tmp_64 = 0.55278640450004235;
      real_t tmp_65 = tmp_62 + tmp_63 + tmp_64 - 3.0;
      real_t tmp_66 = Blending_DF_Tetrahedron_1_1*Blending_DF_Tetrahedron_1_6;
      real_t tmp_67 = Blending_DF_Tetrahedron_1_0*Blending_DF_Tetrahedron_1_7;
      real_t tmp_68 = Blending_DF_Tetrahedron_1_0*Blending_DF_Tetrahedron_1_8;
      real_t tmp_69 = Blending_DF_Tetrahedron_1_2*Blending_DF_Tetrahedron_1_7;
      real_t tmp_70 = Blending_DF_Tetrahedron_1_1*Blending_DF_Tetrahedron_1_8;
      real_t tmp_71 = Blending_DF_Tetrahedron_1_2*Blending_DF_Tetrahedron_1_6;
      real_t tmp_72 = Blending_DF_Tetrahedron_1_3*tmp_69 - Blending_DF_Tetrahedron_1_3*tmp_70 + Blending_DF_Tetrahedron_1_4*tmp_68 - Blending_DF_Tetrahedron_1_4*tmp_71 + Blending_DF_Tetrahedron_1_5*tmp_66 - Blending_DF_Tetrahedron_1_5*tmp_67;
      real_t tmp_73 = tmp_30/tmp_72;
      real_t tmp_74 = tmp_73*(tmp_66 - tmp_67);
      real_t tmp_75 = tmp_73*(tmp_68 - tmp_71);
      real_t tmp_76 = tmp_73*(tmp_69 - tmp_70);
      real_t tmp_77 = tmp_10*tmp_74 + tmp_33*tmp_75 + tmp_35*tmp_76;
      real_t tmp_78 = tmp_38*tmp_74 + tmp_39*tmp_75 + tmp_40*tmp_76;
      real_t tmp_79 = tmp_42*tmp_74 + tmp_43*tmp_75 + tmp_44*tmp_76;
      real_t tmp_80 = -tmp_65*tmp_77 - tmp_65*tmp_78 - tmp_65*tmp_79;
      real_t tmp_81 = 0.041666666666666657*tmp_59*std::abs(tmp_72);
      real_t tmp_82 = 0.13819660112501048*tmp_81;
      real_t tmp_83 = 2.3416407864998732;
      real_t tmp_84 = 0.55278640450004235;
      real_t tmp_85 = 0.55278640450004235;
      real_t tmp_86 = tmp_83 + tmp_84 + tmp_85 - 3.0;
      real_t tmp_87 = Blending_DF_Tetrahedron_2_1*Blending_DF_Tetrahedron_2_6;
      real_t tmp_88 = Blending_DF_Tetrahedron_2_0*Blending_DF_Tetrahedron_2_7;
      real_t tmp_89 = Blending_DF_Tetrahedron_2_0*Blending_DF_Tetrahedron_2_8;
      real_t tmp_90 = Blending_DF_Tetrahedron_2_2*Blending_DF_Tetrahedron_2_7;
      real_t tmp_91 = Blending_DF_Tetrahedron_2_1*Blending_DF_Tetrahedron_2_8;
      real_t tmp_92 = Blending_DF_Tetrahedron_2_2*Blending_DF_Tetrahedron_2_6;
      real_t tmp_93 = Blending_DF_Tetrahedron_2_3*tmp_90 - Blending_DF_Tetrahedron_2_3*tmp_91 + Blending_DF_Tetrahedron_2_4*tmp_89 - Blending_DF_Tetrahedron_2_4*tmp_92 + Blending_DF_Tetrahedron_2_5*tmp_87 - Blending_DF_Tetrahedron_2_5*tmp_88;
      real_t tmp_94 = tmp_30/tmp_93;
      real_t tmp_95 = tmp_94*(tmp_87 - tmp_88);
      real_t tmp_96 = tmp_94*(tmp_89 - tmp_92);
      real_t tmp_97 = tmp_94*(tmp_90 - tmp_91);
      real_t tmp_98 = tmp_10*tmp_95 + tmp_33*tmp_96 + tmp_35*tmp_97;
      real_t tmp_99 = tmp_38*tmp_95 + tmp_39*tmp_96 + tmp_40*tmp_97;
      real_t tmp_100 = tmp_42*tmp_95 + tmp_43*tmp_96 + tmp_44*tmp_97;
      real_t tmp_101 = -tmp_100*tmp_86 - tmp_86*tmp_98 - tmp_86*tmp_99;
      real_t tmp_102 = 0.041666666666666657*tmp_59*std::abs(tmp_93);
      real_t tmp_103 = 0.13819660112501053*tmp_102;
      real_t tmp_104 = 0.55278640450004235;
      real_t tmp_105 = 0.55278640450004235;
      real_t tmp_106 = 0.55278640450004235;
      real_t tmp_107 = tmp_104 + tmp_105 + tmp_106 - 3.0;
      real_t tmp_108 = Blending_DF_Tetrahedron_3_1*Blending_DF_Tetrahedron_3_6;
      real_t tmp_109 = Blending_DF_Tetrahedron_3_0*Blending_DF_Tetrahedron_3_7;
      real_t tmp_110 = Blending_DF_Tetrahedron_3_0*Blending_DF_Tetrahedron_3_8;
      real_t tmp_111 = Blending_DF_Tetrahedron_3_2*Blending_DF_Tetrahedron_3_7;
      real_t tmp_112 = Blending_DF_Tetrahedron_3_1*Blending_DF_Tetrahedron_3_8;
      real_t tmp_113 = Blending_DF_Tetrahedron_3_2*Blending_DF_Tetrahedron_3_6;
      real_t tmp_114 = Blending_DF_Tetrahedron_3_3*tmp_111 - Blending_DF_Tetrahedron_3_3*tmp_112 + Blending_DF_Tetrahedron_3_4*tmp_110 - Blending_DF_Tetrahedron_3_4*tmp_113 + Blending_DF_Tetrahedron_3_5*tmp_108 - Blending_DF_Tetrahedron_3_5*tmp_109;
      real_t tmp_115 = tmp_30/tmp_114;
      real_t tmp_116 = tmp_115*(tmp_108 - tmp_109);
      real_t tmp_117 = tmp_115*(tmp_110 - tmp_113);
      real_t tmp_118 = tmp_115*(tmp_111 - tmp_112);
      real_t tmp_119 = tmp_10*tmp_116 + tmp_117*tmp_33 + tmp_118*tmp_35;
      real_t tmp_120 = tmp_116*tmp_38 + tmp_117*tmp_39 + tmp_118*tmp_40;
      real_t tmp_121 = tmp_116*tmp_42 + tmp_117*tmp_43 + tmp_118*tmp_44;
      real_t tmp_122 = -tmp_107*tmp_119 - tmp_107*tmp_120 - tmp_107*tmp_121;
      real_t tmp_123 = 0.041666666666666657*tmp_59*std::abs(tmp_114);
      real_t tmp_124 = 0.58541019662496807*tmp_123;
      real_t tmp_125 = tmp_45*(tmp_0 - 1.0);
      real_t tmp_126 = tmp_79*(tmp_62 - 1.0);
      real_t tmp_127 = tmp_100*(tmp_83 - 1.0);
      real_t tmp_128 = tmp_121*(tmp_104 - 1.0);
      real_t tmp_129 = tmp_41*(tmp_1 - 1.0);
      real_t tmp_130 = tmp_78*(tmp_63 - 1.0);
      real_t tmp_131 = tmp_99*(tmp_84 - 1.0);
      real_t tmp_132 = tmp_120*(tmp_105 - 1.0);
      real_t tmp_133 = tmp_37*(tmp_2 - 1.0);
      real_t tmp_134 = tmp_77*(tmp_64 - 1.0);
      real_t tmp_135 = tmp_98*(tmp_85 - 1.0);
      real_t tmp_136 = tmp_119*(tmp_106 - 1.0);
      real_t tmp_137 = tmp_1*tmp_37;
      real_t tmp_138 = tmp_2*tmp_41;
      real_t tmp_139 = -tmp_137 - tmp_138;
      real_t tmp_140 = tmp_63*tmp_77;
      real_t tmp_141 = tmp_64*tmp_78;
      real_t tmp_142 = -tmp_140 - tmp_141;
      real_t tmp_143 = tmp_84*tmp_98;
      real_t tmp_144 = tmp_85*tmp_99;
      real_t tmp_145 = -tmp_143 - tmp_144;
      real_t tmp_146 = tmp_105*tmp_119;
      real_t tmp_147 = tmp_106*tmp_120;
      real_t tmp_148 = -tmp_146 - tmp_147;
      real_t tmp_149 = tmp_0*tmp_37;
      real_t tmp_150 = tmp_2*tmp_45;
      real_t tmp_151 = -tmp_149 - tmp_150;
      real_t tmp_152 = tmp_62*tmp_77;
      real_t tmp_153 = tmp_64*tmp_79;
      real_t tmp_154 = -tmp_152 - tmp_153;
      real_t tmp_155 = tmp_83*tmp_98;
      real_t tmp_156 = tmp_100*tmp_85;
      real_t tmp_157 = -tmp_155 - tmp_156;
      real_t tmp_158 = tmp_104*tmp_119;
      real_t tmp_159 = tmp_106*tmp_121;
      real_t tmp_160 = -tmp_158 - tmp_159;
      real_t tmp_161 = tmp_0*tmp_41;
      real_t tmp_162 = tmp_1*tmp_45;
      real_t tmp_163 = -tmp_161 - tmp_162;
      real_t tmp_164 = tmp_62*tmp_78;
      real_t tmp_165 = tmp_63*tmp_79;
      real_t tmp_166 = -tmp_164 - tmp_165;
      real_t tmp_167 = tmp_83*tmp_99;
      real_t tmp_168 = tmp_100*tmp_84;
      real_t tmp_169 = -tmp_167 - tmp_168;
      real_t tmp_170 = tmp_104*tmp_120;
      real_t tmp_171 = tmp_105*tmp_121;
      real_t tmp_172 = -tmp_170 - tmp_171;
      real_t tmp_173 = -tmp_1;
      real_t tmp_174 = 4.0 - tmp_0;
      real_t tmp_175 = tmp_138 + tmp_150 - tmp_37*(tmp_173 + tmp_174 - 4.6832815729997463);
      real_t tmp_176 = -tmp_63;
      real_t tmp_177 = 4.0 - tmp_62;
      real_t tmp_178 = tmp_141 + tmp_153 - tmp_77*(tmp_176 + tmp_177 - 1.1055728090000847);
      real_t tmp_179 = -tmp_84;
      real_t tmp_180 = 4.0 - tmp_83;
      real_t tmp_181 = tmp_144 + tmp_156 - tmp_98*(tmp_179 + tmp_180 - 1.1055728090000847);
      real_t tmp_182 = -tmp_105;
      real_t tmp_183 = 4.0 - tmp_104;
      real_t tmp_184 = -tmp_119*(tmp_182 + tmp_183 - 1.1055728090000847) + tmp_147 + tmp_159;
      real_t tmp_185 = -tmp_2;
      real_t tmp_186 = tmp_137 + tmp_162 - tmp_41*(tmp_174 + tmp_185 - 1.1055728090000847);
      real_t tmp_187 = -tmp_64;
      real_t tmp_188 = tmp_140 + tmp_165 - tmp_78*(tmp_177 + tmp_187 - 4.6832815729997463);
      real_t tmp_189 = -tmp_85;
      real_t tmp_190 = tmp_143 + tmp_168 - tmp_99*(tmp_180 + tmp_189 - 1.1055728090000847);
      real_t tmp_191 = -tmp_106;
      real_t tmp_192 = -tmp_120*(tmp_183 + tmp_191 - 1.1055728090000847) + tmp_146 + tmp_171;
      real_t tmp_193 = tmp_149 + tmp_161 - tmp_45*(tmp_173 + tmp_185 + 2.8944271909999153);
      real_t tmp_194 = tmp_152 + tmp_164 - tmp_79*(tmp_176 + tmp_187 + 2.8944271909999153);
      real_t tmp_195 = -tmp_100*(tmp_179 + tmp_189 - 0.68328157299974634) + tmp_155 + tmp_167;
      real_t tmp_196 = -tmp_121*(tmp_182 + tmp_191 + 2.8944271909999153) + tmp_158 + tmp_170;
      real_t tmp_197 = 0.13819660112501059*tmp_60;
      real_t tmp_198 = 0.13819660112501059*tmp_81;
      real_t tmp_199 = 0.58541019662496829*tmp_102;
      real_t tmp_200 = 0.13819660112501059*tmp_123;
      real_t tmp_201 = 0.13819660112501059*tmp_60;
      real_t tmp_202 = 0.58541019662496829*tmp_81;
      real_t tmp_203 = 0.13819660112501059*tmp_102;
      real_t tmp_204 = 0.13819660112501059*tmp_123;
      real_t tmp_205 = 0.58541019662496829*tmp_60;
      real_t tmp_206 = 0.13819660112501059*tmp_81;
      real_t tmp_207 = 0.13819660112501059*tmp_102;
      real_t tmp_208 = 0.13819660112501059*tmp_123;
      real_t a_0_0 = tmp_101*tmp_103 + tmp_122*tmp_124 + tmp_46*tmp_61 + tmp_80*tmp_82;
      real_t a_0_1 = -tmp_103*tmp_127 - tmp_124*tmp_128 - tmp_125*tmp_61 - tmp_126*tmp_82;
      real_t a_0_2 = -tmp_103*tmp_131 - tmp_124*tmp_132 - tmp_129*tmp_61 - tmp_130*tmp_82;
      real_t a_0_3 = -tmp_103*tmp_135 - tmp_124*tmp_136 - tmp_133*tmp_61 - tmp_134*tmp_82;
      real_t a_0_4 = tmp_103*tmp_145 + tmp_124*tmp_148 + tmp_139*tmp_61 + tmp_142*tmp_82;
      real_t a_0_5 = tmp_103*tmp_157 + tmp_124*tmp_160 + tmp_151*tmp_61 + tmp_154*tmp_82;
      real_t a_0_6 = tmp_103*tmp_169 + tmp_124*tmp_172 + tmp_163*tmp_61 + tmp_166*tmp_82;
      real_t a_0_7 = tmp_103*tmp_181 + tmp_124*tmp_184 + tmp_175*tmp_61 + tmp_178*tmp_82;
      real_t a_0_8 = tmp_103*tmp_190 + tmp_124*tmp_192 + tmp_186*tmp_61 + tmp_188*tmp_82;
      real_t a_0_9 = tmp_103*tmp_195 + tmp_124*tmp_196 + tmp_193*tmp_61 + tmp_194*tmp_82;
      real_t a_1_0 = tmp_101*tmp_199 + tmp_122*tmp_200 + tmp_197*tmp_46 + tmp_198*tmp_80;
      real_t a_1_1 = -tmp_125*tmp_197 - tmp_126*tmp_198 - tmp_127*tmp_199 - tmp_128*tmp_200;
      real_t a_1_2 = -tmp_129*tmp_197 - tmp_130*tmp_198 - tmp_131*tmp_199 - tmp_132*tmp_200;
      real_t a_1_3 = -tmp_133*tmp_197 - tmp_134*tmp_198 - tmp_135*tmp_199 - tmp_136*tmp_200;
      real_t a_1_4 = tmp_139*tmp_197 + tmp_142*tmp_198 + tmp_145*tmp_199 + tmp_148*tmp_200;
      real_t a_1_5 = tmp_151*tmp_197 + tmp_154*tmp_198 + tmp_157*tmp_199 + tmp_160*tmp_200;
      real_t a_1_6 = tmp_163*tmp_197 + tmp_166*tmp_198 + tmp_169*tmp_199 + tmp_172*tmp_200;
      real_t a_1_7 = tmp_175*tmp_197 + tmp_178*tmp_198 + tmp_181*tmp_199 + tmp_184*tmp_200;
      real_t a_1_8 = tmp_186*tmp_197 + tmp_188*tmp_198 + tmp_190*tmp_199 + tmp_192*tmp_200;
      real_t a_1_9 = tmp_193*tmp_197 + tmp_194*tmp_198 + tmp_195*tmp_199 + tmp_196*tmp_200;
      real_t a_2_0 = tmp_101*tmp_203 + tmp_122*tmp_204 + tmp_201*tmp_46 + tmp_202*tmp_80;
      real_t a_2_1 = -tmp_125*tmp_201 - tmp_126*tmp_202 - tmp_127*tmp_203 - tmp_128*tmp_204;
      real_t a_2_2 = -tmp_129*tmp_201 - tmp_130*tmp_202 - tmp_131*tmp_203 - tmp_132*tmp_204;
      real_t a_2_3 = -tmp_133*tmp_201 - tmp_134*tmp_202 - tmp_135*tmp_203 - tmp_136*tmp_204;
      real_t a_2_4 = tmp_139*tmp_201 + tmp_142*tmp_202 + tmp_145*tmp_203 + tmp_148*tmp_204;
      real_t a_2_5 = tmp_151*tmp_201 + tmp_154*tmp_202 + tmp_157*tmp_203 + tmp_160*tmp_204;
      real_t a_2_6 = tmp_163*tmp_201 + tmp_166*tmp_202 + tmp_169*tmp_203 + tmp_172*tmp_204;
      real_t a_2_7 = tmp_175*tmp_201 + tmp_178*tmp_202 + tmp_181*tmp_203 + tmp_184*tmp_204;
      real_t a_2_8 = tmp_186*tmp_201 + tmp_188*tmp_202 + tmp_190*tmp_203 + tmp_192*tmp_204;
      real_t a_2_9 = tmp_193*tmp_201 + tmp_194*tmp_202 + tmp_195*tmp_203 + tmp_196*tmp_204;
      real_t a_3_0 = tmp_101*tmp_207 + tmp_122*tmp_208 + tmp_205*tmp_46 + tmp_206*tmp_80;
      real_t a_3_1 = -tmp_125*tmp_205 - tmp_126*tmp_206 - tmp_127*tmp_207 - tmp_128*tmp_208;
      real_t a_3_2 = -tmp_129*tmp_205 - tmp_130*tmp_206 - tmp_131*tmp_207 - tmp_132*tmp_208;
      real_t a_3_3 = -tmp_133*tmp_205 - tmp_134*tmp_206 - tmp_135*tmp_207 - tmp_136*tmp_208;
      real_t a_3_4 = tmp_139*tmp_205 + tmp_142*tmp_206 + tmp_145*tmp_207 + tmp_148*tmp_208;
      real_t a_3_5 = tmp_151*tmp_205 + tmp_154*tmp_206 + tmp_157*tmp_207 + tmp_160*tmp_208;
      real_t a_3_6 = tmp_163*tmp_205 + tmp_166*tmp_206 + tmp_169*tmp_207 + tmp_172*tmp_208;
      real_t a_3_7 = tmp_175*tmp_205 + tmp_178*tmp_206 + tmp_181*tmp_207 + tmp_184*tmp_208;
      real_t a_3_8 = tmp_186*tmp_205 + tmp_188*tmp_206 + tmp_190*tmp_207 + tmp_192*tmp_208;
      real_t a_3_9 = tmp_193*tmp_205 + tmp_194*tmp_206 + tmp_195*tmp_207 + tmp_196*tmp_208;
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
      (elMat(0, 4)) = a_0_4;
      (elMat(0, 5)) = a_0_5;
      (elMat(0, 6)) = a_0_6;
      (elMat(0, 7)) = a_0_7;
      (elMat(0, 8)) = a_0_8;
      (elMat(0, 9)) = a_0_9;
      (elMat(1, 0)) = a_1_0;
      (elMat(1, 1)) = a_1_1;
      (elMat(1, 2)) = a_1_2;
      (elMat(1, 3)) = a_1_3;
      (elMat(1, 4)) = a_1_4;
      (elMat(1, 5)) = a_1_5;
      (elMat(1, 6)) = a_1_6;
      (elMat(1, 7)) = a_1_7;
      (elMat(1, 8)) = a_1_8;
      (elMat(1, 9)) = a_1_9;
      (elMat(2, 0)) = a_2_0;
      (elMat(2, 1)) = a_2_1;
      (elMat(2, 2)) = a_2_2;
      (elMat(2, 3)) = a_2_3;
      (elMat(2, 4)) = a_2_4;
      (elMat(2, 5)) = a_2_5;
      (elMat(2, 6)) = a_2_6;
      (elMat(2, 7)) = a_2_7;
      (elMat(2, 8)) = a_2_8;
      (elMat(2, 9)) = a_2_9;
      (elMat(3, 0)) = a_3_0;
      (elMat(3, 1)) = a_3_1;
      (elMat(3, 2)) = a_3_2;
      (elMat(3, 3)) = a_3_3;
      (elMat(3, 4)) = a_3_4;
      (elMat(3, 5)) = a_3_5;
      (elMat(3, 6)) = a_3_6;
      (elMat(3, 7)) = a_3_7;
      (elMat(3, 8)) = a_3_8;
      (elMat(3, 9)) = a_3_9;
   }

   void p2_to_p1_div_1_blending_q2::integrateRow0( const std::array< Point3D, 4 >& coords, Matrix< real_t, 1, 10 >& elMat ) const
   {
      real_t p_affine_0_0 = coords[0][0];
      real_t p_affine_0_1 = coords[0][1];
      real_t p_affine_0_2 = coords[0][2];
      real_t p_affine_1_0 = coords[1][0];
      real_t p_affine_1_1 = coords[1][1];
      real_t p_affine_1_2 = coords[1][2];
      real_t p_affine_2_0 = coords[2][0];
      real_t p_affine_2_1 = coords[2][1];
      real_t p_affine_2_2 = coords[2][2];
      real_t p_affine_3_0 = coords[3][0];
      real_t p_affine_3_1 = coords[3][1];
      real_t p_affine_3_2 = coords[3][2];
      real_t Blending_DF_Tetrahedron_0_0 = 0;
      real_t Blending_DF_Tetrahedron_0_1 = 0;
      real_t Blending_DF_Tetrahedron_0_2 = 0;
      real_t Blending_DF_Tetrahedron_0_3 = 0;
      real_t Blending_DF_Tetrahedron_0_4 = 0;
      real_t Blending_DF_Tetrahedron_0_5 = 0;
      real_t Blending_DF_Tetrahedron_0_6 = 0;
      real_t Blending_DF_Tetrahedron_0_7 = 0;
      real_t Blending_DF_Tetrahedron_0_8 = 0;
      real_t Blending_DF_Tetrahedron_1_0 = 0;
      real_t Blending_DF_Tetrahedron_1_1 = 0;
      real_t Blending_DF_Tetrahedron_1_2 = 0;
      real_t Blending_DF_Tetrahedron_1_3 = 0;
      real_t Blending_DF_Tetrahedron_1_4 = 0;
      real_t Blending_DF_Tetrahedron_1_5 = 0;
      real_t Blending_DF_Tetrahedron_1_6 = 0;
      real_t Blending_DF_Tetrahedron_1_7 = 0;
      real_t Blending_DF_Tetrahedron_1_8 = 0;
      real_t Blending_DF_Tetrahedron_2_0 = 0;
      real_t Blending_DF_Tetrahedron_2_1 = 0;
      real_t Blending_DF_Tetrahedron_2_2 = 0;
      real_t Blending_DF_Tetrahedron_2_3 = 0;
      real_t Blending_DF_Tetrahedron_2_4 = 0;
      real_t Blending_DF_Tetrahedron_2_5 = 0;
      real_t Blending_DF_Tetrahedron_2_6 = 0;
      real_t Blending_DF_Tetrahedron_2_7 = 0;
      real_t Blending_DF_Tetrahedron_2_8 = 0;
      real_t Blending_DF_Tetrahedron_3_0 = 0;
      real_t Blending_DF_Tetrahedron_3_1 = 0;
      real_t Blending_DF_Tetrahedron_3_2 = 0;
      real_t Blending_DF_Tetrahedron_3_3 = 0;
      real_t Blending_DF_Tetrahedron_3_4 = 0;
      real_t Blending_DF_Tetrahedron_3_5 = 0;
      real_t Blending_DF_Tetrahedron_3_6 = 0;
      real_t Blending_DF_Tetrahedron_3_7 = 0;
      real_t Blending_DF_Tetrahedron_3_8 = 0;
      Blending_DF_Tetrahedron( 0.13819660112501042*p_affine_0_0 + 0.13819660112501059*p_affine_1_0 + 0.13819660112501059*p_affine_2_0 + 0.58541019662496829*p_affine_3_0, 0.13819660112501042*p_affine_0_1 + 0.13819660112501059*p_affine_1_1 + 0.13819660112501059*p_affine_2_1 + 0.58541019662496829*p_affine_3_1, 0.13819660112501042*p_affine_0_2 + 0.13819660112501059*p_affine_1_2 + 0.13819660112501059*p_affine_2_2 + 0.58541019662496829*p_affine_3_2, &Blending_DF_Tetrahedron_0_0, &Blending_DF_Tetrahedron_0_1, &Blending_DF_Tetrahedron_0_2, &Blending_DF_Tetrahedron_0_3, &Blending_DF_Tetrahedron_0_4, &Blending_DF_Tetrahedron_0_5, &Blending_DF_Tetrahedron_0_6, &Blending_DF_Tetrahedron_0_7, &Blending_DF_Tetrahedron_0_8 );
      Blending_DF_Tetrahedron( 0.13819660112501048*p_affine_0_0 + 0.13819660112501059*p_affine_1_0 + 0.58541019662496829*p_affine_2_0 + 0.13819660112501059*p_affine_3_0, 0.13819660112501048*p_affine_0_1 + 0.13819660112501059*p_affine_1_1 + 0.58541019662496829*p_affine_2_1 + 0.13819660112501059*p_affine_3_1, 0.13819660112501048*p_affine_0_2 + 0.13819660112501059*p_affine_1_2 + 0.58541019662496829*p_affine_2_2 + 0.13819660112501059*p_affine_3_2, &Blending_DF_Tetrahedron_1_0, &Blending_DF_Tetrahedron_1_1, &Blending_DF_Tetrahedron_1_2, &Blending_DF_Tetrahedron_1_3, &Blending_DF_Tetrahedron_1_4, &Blending_DF_Tetrahedron_1_5, &Blending_DF_Tetrahedron_1_6, &Blending_DF_Tetrahedron_1_7, &Blending_DF_Tetrahedron_1_8 );
      Blending_DF_Tetrahedron( 0.13819660112501053*p_affine_0_0 + 0.58541019662496829*p_affine_1_0 + 0.13819660112501059*p_affine_2_0 + 0.13819660112501059*p_affine_3_0, 0.13819660112501053*p_affine_0_1 + 0.58541019662496829*p_affine_1_1 + 0.13819660112501059*p_affine_2_1 + 0.13819660112501059*p_affine_3_1, 0.13819660112501053*p_affine_0_2 + 0.58541019662496829*p_affine_1_2 + 0.13819660112501059*p_affine_2_2 + 0.13819660112501059*p_affine_3_2, &Blending_DF_Tetrahedron_2_0, &Blending_DF_Tetrahedron_2_1, &Blending_DF_Tetrahedron_2_2, &Blending_DF_Tetrahedron_2_3, &Blending_DF_Tetrahedron_2_4, &Blending_DF_Tetrahedron_2_5, &Blending_DF_Tetrahedron_2_6, &Blending_DF_Tetrahedron_2_7, &Blending_DF_Tetrahedron_2_8 );
      Blending_DF_Tetrahedron( 0.58541019662496807*p_affine_0_0 + 0.13819660112501059*p_affine_1_0 + 0.13819660112501059*p_affine_2_0 + 0.13819660112501059*p_affine_3_0, 0.58541019662496807*p_affine_0_1 + 0.13819660112501059*p_affine_1_1 + 0.13819660112501059*p_affine_2_1 + 0.13819660112501059*p_affine_3_1, 0.58541019662496807*p_affine_0_2 + 0.13819660112501059*p_affine_1_2 + 0.13819660112501059*p_affine_2_2 + 0.13819660112501059*p_affine_3_2, &Blending_DF_Tetrahedron_3_0, &Blending_DF_Tetrahedron_3_1, &Blending_DF_Tetrahedron_3_2, &Blending_DF_Tetrahedron_3_3, &Blending_DF_Tetrahedron_3_4, &Blending_DF_Tetrahedron_3_5, &Blending_DF_Tetrahedron_3_6, &Blending_DF_Tetrahedron_3_7, &Blending_DF_Tetrahedron_3_8 );
      real_t tmp_0 = 0.55278640450004235;
      real_t tmp_1 = 0.55278640450004235;
      real_t tmp_2 = 2.3416407864998732;
      real_t tmp_3 = tmp_0 + tmp_1 + tmp_2 - 3.0;
      real_t tmp_4 = -p_affine_0_0;
      real_t tmp_5 = p_affine_1_0 + tmp_4;
      real_t tmp_6 = -p_affine_0_1;
      real_t tmp_7 = p_affine_2_1 + tmp_6;
      real_t tmp_8 = p_affine_2_0 + tmp_4;
      real_t tmp_9 = p_affine_1_1 + tmp_6;
      real_t tmp_10 = tmp_5*tmp_7 - tmp_8*tmp_9;
      real_t tmp_11 = Blending_DF_Tetrahedron_0_1*Blending_DF_Tetrahedron_0_6;
      real_t tmp_12 = Blending_DF_Tetrahedron_0_0*Blending_DF_Tetrahedron_0_7;
      real_t tmp_13 = Blending_DF_Tetrahedron_0_0*Blending_DF_Tetrahedron_0_8;
      real_t tmp_14 = Blending_DF_Tetrahedron_0_2*Blending_DF_Tetrahedron_0_7;
      real_t tmp_15 = Blending_DF_Tetrahedron_0_1*Blending_DF_Tetrahedron_0_8;
      real_t tmp_16 = Blending_DF_Tetrahedron_0_2*Blending_DF_Tetrahedron_0_6;
      real_t tmp_17 = Blending_DF_Tetrahedron_0_3*tmp_14 - Blending_DF_Tetrahedron_0_3*tmp_15 + Blending_DF_Tetrahedron_0_4*tmp_13 - Blending_DF_Tetrahedron_0_4*tmp_16 + Blending_DF_Tetrahedron_0_5*tmp_11 - Blending_DF_Tetrahedron_0_5*tmp_12;
      real_t tmp_18 = -p_affine_0_2;
      real_t tmp_19 = p_affine_3_2 + tmp_18;
      real_t tmp_20 = tmp_19*tmp_5;
      real_t tmp_21 = p_affine_3_1 + tmp_6;
      real_t tmp_22 = p_affine_1_2 + tmp_18;
      real_t tmp_23 = tmp_21*tmp_22;
      real_t tmp_24 = p_affine_2_2 + tmp_18;
      real_t tmp_25 = p_affine_3_0 + tmp_4;
      real_t tmp_26 = tmp_25*tmp_9;
      real_t tmp_27 = tmp_21*tmp_5;
      real_t tmp_28 = tmp_19*tmp_9;
      real_t tmp_29 = tmp_22*tmp_25;
      real_t tmp_30 = 1.0 / (tmp_20*tmp_7 + tmp_23*tmp_8 + tmp_24*tmp_26 - tmp_24*tmp_27 - tmp_28*tmp_8 - tmp_29*tmp_7);
      real_t tmp_31 = tmp_30/tmp_17;
      real_t tmp_32 = tmp_31*(tmp_11 - tmp_12);
      real_t tmp_33 = tmp_22*tmp_8 - tmp_24*tmp_5;
      real_t tmp_34 = tmp_31*(tmp_13 - tmp_16);
      real_t tmp_35 = -tmp_22*tmp_7 + tmp_24*tmp_9;
      real_t tmp_36 = tmp_31*(tmp_14 - tmp_15);
      real_t tmp_37 = tmp_10*tmp_32 + tmp_33*tmp_34 + tmp_35*tmp_36;
      real_t tmp_38 = tmp_26 - tmp_27;
      real_t tmp_39 = tmp_20 - tmp_29;
      real_t tmp_40 = tmp_23 - tmp_28;
      real_t tmp_41 = tmp_32*tmp_38 + tmp_34*tmp_39 + tmp_36*tmp_40;
      real_t tmp_42 = tmp_21*tmp_8 - tmp_25*tmp_7;
      real_t tmp_43 = -tmp_19*tmp_8 + tmp_24*tmp_25;
      real_t tmp_44 = tmp_19*tmp_7 - tmp_21*tmp_24;
      real_t tmp_45 = tmp_32*tmp_42 + tmp_34*tmp_43 + tmp_36*tmp_44;
      real_t tmp_46 = p_affine_0_0*p_affine_1_1;
      real_t tmp_47 = p_affine_0_0*p_affine_1_2;
      real_t tmp_48 = p_affine_2_1*p_affine_3_2;
      real_t tmp_49 = p_affine_0_1*p_affine_1_0;
      real_t tmp_50 = p_affine_0_1*p_affine_1_2;
      real_t tmp_51 = p_affine_2_2*p_affine_3_0;
      real_t tmp_52 = p_affine_0_2*p_affine_1_0;
      real_t tmp_53 = p_affine_0_2*p_affine_1_1;
      real_t tmp_54 = p_affine_2_0*p_affine_3_1;
      real_t tmp_55 = p_affine_2_2*p_affine_3_1;
      real_t tmp_56 = p_affine_2_0*p_affine_3_2;
      real_t tmp_57 = p_affine_2_1*p_affine_3_0;
      real_t tmp_58 = std::abs(p_affine_0_0*tmp_48 - p_affine_0_0*tmp_55 + p_affine_0_1*tmp_51 - p_affine_0_1*tmp_56 + p_affine_0_2*tmp_54 - p_affine_0_2*tmp_57 - p_affine_1_0*tmp_48 + p_affine_1_0*tmp_55 - p_affine_1_1*tmp_51 + p_affine_1_1*tmp_56 - p_affine_1_2*tmp_54 + p_affine_1_2*tmp_57 + p_affine_2_0*tmp_50 - p_affine_2_0*tmp_53 - p_affine_2_1*tmp_47 + p_affine_2_1*tmp_52 + p_affine_2_2*tmp_46 - p_affine_2_2*tmp_49 - p_affine_3_0*tmp_50 + p_affine_3_0*tmp_53 + p_affine_3_1*tmp_47 - p_affine_3_1*tmp_52 - p_affine_3_2*tmp_46 + p_affine_3_2*tmp_49);
      real_t tmp_59 = 0.0057581917135420997*tmp_58*std::abs(tmp_17);
      real_t tmp_60 = 0.55278640450004235;
      real_t tmp_61 = 2.3416407864998732;
      real_t tmp_62 = 0.55278640450004235;
      real_t tmp_63 = tmp_60 + tmp_61 + tmp_62 - 3.0;
      real_t tmp_64 = Blending_DF_Tetrahedron_1_1*Blending_DF_Tetrahedron_1_6;
      real_t tmp_65 = Blending_DF_Tetrahedron_1_0*Blending_DF_Tetrahedron_1_7;
      real_t tmp_66 = Blending_DF_Tetrahedron_1_0*Blending_DF_Tetrahedron_1_8;
      real_t tmp_67 = Blending_DF_Tetrahedron_1_2*Blending_DF_Tetrahedron_1_7;
      real_t tmp_68 = Blending_DF_Tetrahedron_1_1*Blending_DF_Tetrahedron_1_8;
      real_t tmp_69 = Blending_DF_Tetrahedron_1_2*Blending_DF_Tetrahedron_1_6;
      real_t tmp_70 = Blending_DF_Tetrahedron_1_3*tmp_67 - Blending_DF_Tetrahedron_1_3*tmp_68 + Blending_DF_Tetrahedron_1_4*tmp_66 - Blending_DF_Tetrahedron_1_4*tmp_69 + Blending_DF_Tetrahedron_1_5*tmp_64 - Blending_DF_Tetrahedron_1_5*tmp_65;
      real_t tmp_71 = tmp_30/tmp_70;
      real_t tmp_72 = tmp_71*(tmp_64 - tmp_65);
      real_t tmp_73 = tmp_71*(tmp_66 - tmp_69);
      real_t tmp_74 = tmp_71*(tmp_67 - tmp_68);
      real_t tmp_75 = tmp_10*tmp_72 + tmp_33*tmp_73 + tmp_35*tmp_74;
      real_t tmp_76 = tmp_38*tmp_72 + tmp_39*tmp_73 + tmp_40*tmp_74;
      real_t tmp_77 = tmp_42*tmp_72 + tmp_43*tmp_73 + tmp_44*tmp_74;
      real_t tmp_78 = 0.0057581917135421023*tmp_58*std::abs(tmp_70);
      real_t tmp_79 = 2.3416407864998732;
      real_t tmp_80 = 0.55278640450004235;
      real_t tmp_81 = 0.55278640450004235;
      real_t tmp_82 = tmp_79 + tmp_80 + tmp_81 - 3.0;
      real_t tmp_83 = Blending_DF_Tetrahedron_2_1*Blending_DF_Tetrahedron_2_6;
      real_t tmp_84 = Blending_DF_Tetrahedron_2_0*Blending_DF_Tetrahedron_2_7;
      real_t tmp_85 = Blending_DF_Tetrahedron_2_0*Blending_DF_Tetrahedron_2_8;
      real_t tmp_86 = Blending_DF_Tetrahedron_2_2*Blending_DF_Tetrahedron_2_7;
      real_t tmp_87 = Blending_DF_Tetrahedron_2_1*Blending_DF_Tetrahedron_2_8;
      real_t tmp_88 = Blending_DF_Tetrahedron_2_2*Blending_DF_Tetrahedron_2_6;
      real_t tmp_89 = Blending_DF_Tetrahedron_2_3*tmp_86 - Blending_DF_Tetrahedron_2_3*tmp_87 + Blending_DF_Tetrahedron_2_4*tmp_85 - Blending_DF_Tetrahedron_2_4*tmp_88 + Blending_DF_Tetrahedron_2_5*tmp_83 - Blending_DF_Tetrahedron_2_5*tmp_84;
      real_t tmp_90 = tmp_30/tmp_89;
      real_t tmp_91 = tmp_90*(tmp_83 - tmp_84);
      real_t tmp_92 = tmp_90*(tmp_85 - tmp_88);
      real_t tmp_93 = tmp_90*(tmp_86 - tmp_87);
      real_t tmp_94 = tmp_10*tmp_91 + tmp_33*tmp_92 + tmp_35*tmp_93;
      real_t tmp_95 = tmp_38*tmp_91 + tmp_39*tmp_92 + tmp_40*tmp_93;
      real_t tmp_96 = tmp_42*tmp_91 + tmp_43*tmp_92 + tmp_44*tmp_93;
      real_t tmp_97 = 0.0057581917135421041*tmp_58*std::abs(tmp_89);
      real_t tmp_98 = 0.55278640450004235;
      real_t tmp_99 = 0.55278640450004235;
      real_t tmp_100 = 0.55278640450004235;
      real_t tmp_101 = tmp_100 + tmp_98 + tmp_99 - 3.0;
      real_t tmp_102 = Blending_DF_Tetrahedron_3_1*Blending_DF_Tetrahedron_3_6;
      real_t tmp_103 = Blending_DF_Tetrahedron_3_0*Blending_DF_Tetrahedron_3_7;
      real_t tmp_104 = Blending_DF_Tetrahedron_3_0*Blending_DF_Tetrahedron_3_8;
      real_t tmp_105 = Blending_DF_Tetrahedron_3_2*Blending_DF_Tetrahedron_3_7;
      real_t tmp_106 = Blending_DF_Tetrahedron_3_1*Blending_DF_Tetrahedron_3_8;
      real_t tmp_107 = Blending_DF_Tetrahedron_3_2*Blending_DF_Tetrahedron_3_6;
      real_t tmp_108 = Blending_DF_Tetrahedron_3_3*tmp_105 - Blending_DF_Tetrahedron_3_3*tmp_106 + Blending_DF_Tetrahedron_3_4*tmp_104 - Blending_DF_Tetrahedron_3_4*tmp_107 + Blending_DF_Tetrahedron_3_5*tmp_102 - Blending_DF_Tetrahedron_3_5*tmp_103;
      real_t tmp_109 = tmp_30/tmp_108;
      real_t tmp_110 = tmp_109*(tmp_102 - tmp_103);
      real_t tmp_111 = tmp_109*(tmp_104 - tmp_107);
      real_t tmp_112 = tmp_109*(tmp_105 - tmp_106);
      real_t tmp_113 = tmp_10*tmp_110 + tmp_111*tmp_33 + tmp_112*tmp_35;
      real_t tmp_114 = tmp_110*tmp_38 + tmp_111*tmp_39 + tmp_112*tmp_40;
      real_t tmp_115 = tmp_110*tmp_42 + tmp_111*tmp_43 + tmp_112*tmp_44;
      real_t tmp_116 = 0.024392091526040331*tmp_58*std::abs(tmp_108);
      real_t tmp_117 = tmp_1*tmp_37;
      real_t tmp_118 = tmp_2*tmp_41;
      real_t tmp_119 = tmp_61*tmp_75;
      real_t tmp_120 = tmp_62*tmp_76;
      real_t tmp_121 = tmp_80*tmp_94;
      real_t tmp_122 = tmp_81*tmp_95;
      real_t tmp_123 = tmp_113*tmp_99;
      real_t tmp_124 = tmp_100*tmp_114;
      real_t tmp_125 = tmp_0*tmp_37;
      real_t tmp_126 = tmp_2*tmp_45;
      real_t tmp_127 = tmp_60*tmp_75;
      real_t tmp_128 = tmp_62*tmp_77;
      real_t tmp_129 = tmp_79*tmp_94;
      real_t tmp_130 = tmp_81*tmp_96;
      real_t tmp_131 = tmp_113*tmp_98;
      real_t tmp_132 = tmp_100*tmp_115;
      real_t tmp_133 = tmp_0*tmp_41;
      real_t tmp_134 = tmp_1*tmp_45;
      real_t tmp_135 = tmp_60*tmp_76;
      real_t tmp_136 = tmp_61*tmp_77;
      real_t tmp_137 = tmp_79*tmp_95;
      real_t tmp_138 = tmp_80*tmp_96;
      real_t tmp_139 = tmp_114*tmp_98;
      real_t tmp_140 = tmp_115*tmp_99;
      real_t tmp_141 = -tmp_1;
      real_t tmp_142 = 4.0 - tmp_0;
      real_t tmp_143 = -tmp_61;
      real_t tmp_144 = 4.0 - tmp_60;
      real_t tmp_145 = -tmp_80;
      real_t tmp_146 = 4.0 - tmp_79;
      real_t tmp_147 = -tmp_99;
      real_t tmp_148 = 4.0 - tmp_98;
      real_t tmp_149 = -tmp_2;
      real_t tmp_150 = -tmp_62;
      real_t tmp_151 = -tmp_81;
      real_t tmp_152 = -tmp_100;
      real_t a_0_0 = tmp_116*(-tmp_101*tmp_113 - tmp_101*tmp_114 - tmp_101*tmp_115) + tmp_59*(-tmp_3*tmp_37 - tmp_3*tmp_41 - tmp_3*tmp_45) + tmp_78*(-tmp_63*tmp_75 - tmp_63*tmp_76 - tmp_63*tmp_77) + tmp_97*(-tmp_82*tmp_94 - tmp_82*tmp_95 - tmp_82*tmp_96);
      real_t a_0_1 = -tmp_115*tmp_116*(tmp_98 - 1.0) - tmp_45*tmp_59*(tmp_0 - 1.0) - tmp_77*tmp_78*(tmp_60 - 1.0) - tmp_96*tmp_97*(tmp_79 - 1.0);
      real_t a_0_2 = -tmp_114*tmp_116*(tmp_99 - 1.0) - tmp_41*tmp_59*(tmp_1 - 1.0) - tmp_76*tmp_78*(tmp_61 - 1.0) - tmp_95*tmp_97*(tmp_80 - 1.0);
      real_t a_0_3 = -tmp_113*tmp_116*(tmp_100 - 1.0) - tmp_37*tmp_59*(tmp_2 - 1.0) - tmp_75*tmp_78*(tmp_62 - 1.0) - tmp_94*tmp_97*(tmp_81 - 1.0);
      real_t a_0_4 = tmp_116*(-tmp_123 - tmp_124) + tmp_59*(-tmp_117 - tmp_118) + tmp_78*(-tmp_119 - tmp_120) + tmp_97*(-tmp_121 - tmp_122);
      real_t a_0_5 = tmp_116*(-tmp_131 - tmp_132) + tmp_59*(-tmp_125 - tmp_126) + tmp_78*(-tmp_127 - tmp_128) + tmp_97*(-tmp_129 - tmp_130);
      real_t a_0_6 = tmp_116*(-tmp_139 - tmp_140) + tmp_59*(-tmp_133 - tmp_134) + tmp_78*(-tmp_135 - tmp_136) + tmp_97*(-tmp_137 - tmp_138);
      real_t a_0_7 = tmp_116*(-tmp_113*(tmp_147 + tmp_148 - 1.1055728090000847) + tmp_124 + tmp_132) + tmp_59*(tmp_118 + tmp_126 - tmp_37*(tmp_141 + tmp_142 - 4.6832815729997463)) + tmp_78*(tmp_120 + tmp_128 - tmp_75*(tmp_143 + tmp_144 - 1.1055728090000847)) + tmp_97*(tmp_122 + tmp_130 - tmp_94*(tmp_145 + tmp_146 - 1.1055728090000847));
      real_t a_0_8 = tmp_116*(-tmp_114*(tmp_148 + tmp_152 - 1.1055728090000847) + tmp_123 + tmp_140) + tmp_59*(tmp_117 + tmp_134 - tmp_41*(tmp_142 + tmp_149 - 1.1055728090000847)) + tmp_78*(tmp_119 + tmp_136 - tmp_76*(tmp_144 + tmp_150 - 4.6832815729997463)) + tmp_97*(tmp_121 + tmp_138 - tmp_95*(tmp_146 + tmp_151 - 1.1055728090000847));
      real_t a_0_9 = tmp_116*(-tmp_115*(tmp_147 + tmp_152 + 2.8944271909999153) + tmp_131 + tmp_139) + tmp_59*(tmp_125 + tmp_133 - tmp_45*(tmp_141 + tmp_149 + 2.8944271909999153)) + tmp_78*(tmp_127 + tmp_135 - tmp_77*(tmp_143 + tmp_150 + 2.8944271909999153)) + tmp_97*(tmp_129 + tmp_137 - tmp_96*(tmp_145 + tmp_151 - 0.68328157299974634));
      (elMat(0, 0)) = a_0_0;
      (elMat(0, 1)) = a_0_1;
      (elMat(0, 2)) = a_0_2;
      (elMat(0, 3)) = a_0_3;
      (elMat(0, 4)) = a_0_4;
      (elMat(0, 5)) = a_0_5;
      (elMat(0, 6)) = a_0_6;
      (elMat(0, 7)) = a_0_7;
      (elMat(0, 8)) = a_0_8;
      (elMat(0, 9)) = a_0_9;
   }

   void p2_to_p1_div_1_blending_q2::Blending_DF_Triangle( real_t in_0, real_t in_1, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3 ) const
   {
      Point3D  mappedPt( {in_0, in_1, 0} );
      Matrix2r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 1, 0 );
      *out_3 = DPsi( 1, 1 );
   }

   void p2_to_p1_div_1_blending_q2::Blending_DF_Tetrahedron( real_t in_0, real_t in_1, real_t in_2, real_t * out_0, real_t * out_1, real_t * out_2, real_t * out_3, real_t * out_4, real_t * out_5, real_t * out_6, real_t * out_7, real_t * out_8 ) const
   {
      Point3D  mappedPt( {in_0, in_1, in_2} );
      Matrix3r DPsi;
      geometryMap_->evalDF( mappedPt, DPsi );
      *out_0 = DPsi( 0, 0 );
      *out_1 = DPsi( 0, 1 );
      *out_2 = DPsi( 0, 2 );
      *out_3 = DPsi( 1, 0 );
      *out_4 = DPsi( 1, 1 );
      *out_5 = DPsi( 1, 2 );
      *out_6 = DPsi( 2, 0 );
      *out_7 = DPsi( 2, 1 );
      *out_8 = DPsi( 2, 2 );
   }

} // namespace forms
} // namespace hyteg
