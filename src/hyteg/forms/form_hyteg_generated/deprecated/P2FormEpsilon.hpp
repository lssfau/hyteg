/*
 * Copyright (c) 2020 Daniel Drzisga.
 *
 * This file is part of HyTeG
 * (see https://i10git.cs.fau.de/hyteg/hyteg).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#pragma once

#include "hyteg/forms/form_hyteg_base/P2FormHyTeG.hpp"

using walberla::real_c;

namespace hyteg {

class P2Form_epsilon_11 : public P2FormHyTeG {
 public:
   void evalQuadraturePoint2D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,3>& coords, const Matrix2r& DF, real_t w, Matrix6r& elMat) const
   {
      real_t tmp0 = std::pow(x_hat[0] + x_hat[1] - 0.75, 2);
      real_t tmp1 = coords[0][0] - coords[2][0];
      real_t tmp2 = DF(0,0)*tmp1;
      real_t tmp3 = coords[0][1] - coords[2][1];
      real_t tmp4 = DF(0,1)*tmp3;
      real_t tmp5 = coords[0][0] - coords[1][0];
      real_t tmp6 = coords[0][1] - coords[1][1];
      real_t tmp7 = DF(0,0)*tmp5 + DF(0,1)*tmp6;
      real_t tmp8 = -tmp2 - tmp4 + tmp7;
      real_t tmp9 = DF(0,0)*DF(1,1) - DF(0,1)*DF(1,0);
      real_t tmp10 = coords[0][0]*coords[1][1] - coords[0][0]*coords[2][1] - coords[0][1]*coords[1][0] + coords[0][1]*coords[2][0] + coords[1][0]*coords[2][1] - coords[1][1]*coords[2][0];
      real_t tmp11 = 1/(std::pow(tmp10, 2)*std::pow(tmp9, 2));
      real_t tmp12 = 8.0*tmp11;
      real_t tmp13 = DF(1,0)*tmp1;
      real_t tmp14 = DF(1,1)*tmp3;
      real_t tmp15 = DF(1,0)*tmp5 + DF(1,1)*tmp6;
      real_t tmp16 = -tmp13 - tmp14 + tmp15;
      real_t tmp17 = 16.0*tmp11;
      real_t tmp18 = 2*std::fabs(tmp10*tmp9);
      real_t tmp19 = tmp2 + tmp4;
      real_t tmp20 = 4.0*x_hat[0];
      real_t tmp21 = tmp20 - 1.0;
      real_t tmp22 = tmp19*tmp21;
      real_t tmp23 = 4.0*x_hat[1];
      real_t tmp24 = tmp20 + tmp23 - 3.0;
      real_t tmp25 = tmp24*tmp8;
      real_t tmp26 = 0.5*tmp11*tmp25;
      real_t tmp27 = tmp13 + tmp14;
      real_t tmp28 = tmp21*tmp27;
      real_t tmp29 = tmp16*tmp24;
      real_t tmp30 = 1.0*tmp29;
      real_t tmp31 = tmp11*tmp30;
      real_t tmp32 = tmp18*(-tmp22*tmp26 - tmp28*tmp31);
      real_t tmp33 = tmp23 - 1.0;
      real_t tmp34 = tmp33*tmp7;
      real_t tmp35 = tmp15*tmp33;
      real_t tmp36 = tmp18*(tmp26*tmp34 + tmp31*tmp35);
      real_t tmp37 = tmp19*x_hat[1];
      real_t tmp38 = tmp7*x_hat[0];
      real_t tmp39 = tmp37 - tmp38;
      real_t tmp40 = 2.0*tmp11*tmp39;
      real_t tmp41 = tmp15*x_hat[0];
      real_t tmp42 = tmp27*x_hat[1];
      real_t tmp43 = tmp41 - tmp42;
      real_t tmp44 = 4.0*tmp43;
      real_t tmp45 = tmp11*tmp44;
      real_t tmp46 = tmp18*(-tmp25*tmp40 + tmp29*tmp45);
      real_t tmp47 = tmp20 + 8.0*x_hat[1] - 4.0;
      real_t tmp48 = tmp47*tmp7;
      real_t tmp49 = tmp11*(-2.0*tmp37 + 0.5*tmp48);
      real_t tmp50 = 1.0*tmp25;
      real_t tmp51 = tmp15*tmp47;
      real_t tmp52 = tmp11*(tmp23*tmp27 - 1.0*tmp51);
      real_t tmp53 = tmp18*(tmp30*tmp52 - tmp49*tmp50);
      real_t tmp54 = tmp23 + 8.0*x_hat[0] - 4.0;
      real_t tmp55 = tmp19*tmp54;
      real_t tmp56 = 2.0*tmp38 - 0.5*tmp55;
      real_t tmp57 = tmp11*tmp56;
      real_t tmp58 = tmp27*tmp54;
      real_t tmp59 = -tmp15*tmp20 + 1.0*tmp58;
      real_t tmp60 = tmp11*tmp59;
      real_t tmp61 = tmp18*(tmp30*tmp60 - tmp50*tmp57);
      real_t tmp62 = std::pow(x_hat[0] - 0.25, 2);
      real_t tmp63 = 1.0*tmp28;
      real_t tmp64 = tmp18*(-0.5*tmp11*tmp22*tmp34 - tmp11*tmp35*tmp63);
      real_t tmp65 = tmp18*(tmp22*tmp40 - tmp28*tmp45);
      real_t tmp66 = 1.0*tmp22;
      real_t tmp67 = tmp18*(tmp49*tmp66 - tmp52*tmp63);
      real_t tmp68 = tmp18*(tmp57*tmp66 - tmp60*tmp63);
      real_t tmp69 = std::pow(x_hat[1] - 0.25, 2);
      real_t tmp70 = tmp18*(-tmp34*tmp40 + tmp35*tmp45);
      real_t tmp71 = 1.0*tmp34;
      real_t tmp72 = 1.0*tmp35;
      real_t tmp73 = tmp18*(-tmp49*tmp71 + tmp52*tmp72);
      real_t tmp74 = tmp18*(-tmp57*tmp71 + tmp60*tmp72);
      real_t tmp75 = 4.0*tmp39;
      real_t tmp76 = tmp18*(tmp44*tmp52 + tmp49*tmp75);
      real_t tmp77 = tmp18*(tmp45*tmp59 + tmp57*tmp75);
      real_t tmp78 = tmp18*(2*tmp49*tmp56 + tmp52*tmp59);
      elMat(0,0) += w * tmp18*(tmp0*tmp12*std::pow(tmp8, 2) + tmp0*std::pow(tmp16, 2)*tmp17);
      elMat(0,1) += w * tmp32;
      elMat(0,2) += w * tmp36;
      elMat(0,3) += w * tmp46;
      elMat(0,4) += w * tmp53;
      elMat(0,5) += w * tmp61;
      elMat(1,0) += w * tmp32;
      elMat(1,1) += w * tmp18*(tmp12*std::pow(tmp19, 2)*tmp62 + tmp17*std::pow(tmp27, 2)*tmp62);
      elMat(1,2) += w * tmp64;
      elMat(1,3) += w * tmp65;
      elMat(1,4) += w * tmp67;
      elMat(1,5) += w * tmp68;
      elMat(2,0) += w * tmp36;
      elMat(2,1) += w * tmp64;
      elMat(2,2) += w * tmp18*(tmp12*tmp69*std::pow(tmp7, 2) + std::pow(tmp15, 2)*tmp17*tmp69);
      elMat(2,3) += w * tmp70;
      elMat(2,4) += w * tmp73;
      elMat(2,5) += w * tmp74;
      elMat(3,0) += w * tmp46;
      elMat(3,1) += w * tmp65;
      elMat(3,2) += w * tmp70;
      elMat(3,3) += w * tmp18*(tmp12*std::pow(tmp39, 2) + tmp17*std::pow(tmp43, 2));
      elMat(3,4) += w * tmp76;
      elMat(3,5) += w * tmp77;
      elMat(4,0) += w * tmp53;
      elMat(4,1) += w * tmp67;
      elMat(4,2) += w * tmp73;
      elMat(4,3) += w * tmp76;
      elMat(4,4) += w * tmp18*(tmp12*std::pow(-tmp37 + 0.25*tmp48, 2) + tmp17*std::pow(tmp42 - 0.25*tmp51, 2));
      elMat(4,5) += w * tmp78;
      elMat(5,0) += w * tmp61;
      elMat(5,1) += w * tmp68;
      elMat(5,2) += w * tmp74;
      elMat(5,3) += w * tmp77;
      elMat(5,4) += w * tmp78;
      elMat(5,5) += w * tmp18*(tmp12*std::pow(tmp38 - 0.25*tmp55, 2) + tmp17*std::pow(-tmp41 + 0.25*tmp58, 2));
   }

   void integrateAll( const std::array< Point3D, 3 >& coords, Matrix6r& elMat ) const final
   {
      Point3D x_hat;
      Point3D x_tilde;
      Matrix2r DF;
      elMat(0,0) = 0;
      elMat(0,1) = 0;
      elMat(0,2) = 0;
      elMat(0,3) = 0;
      elMat(0,4) = 0;
      elMat(0,5) = 0;
      elMat(1,0) = 0;
      elMat(1,1) = 0;
      elMat(1,2) = 0;
      elMat(1,3) = 0;
      elMat(1,4) = 0;
      elMat(1,5) = 0;
      elMat(2,0) = 0;
      elMat(2,1) = 0;
      elMat(2,2) = 0;
      elMat(2,3) = 0;
      elMat(2,4) = 0;
      elMat(2,5) = 0;
      elMat(3,0) = 0;
      elMat(3,1) = 0;
      elMat(3,2) = 0;
      elMat(3,3) = 0;
      elMat(3,4) = 0;
      elMat(3,5) = 0;
      elMat(4,0) = 0;
      elMat(4,1) = 0;
      elMat(4,2) = 0;
      elMat(4,3) = 0;
      elMat(4,4) = 0;
      elMat(4,5) = 0;
      elMat(5,0) = 0;
      elMat(5,1) = 0;
      elMat(5,2) = 0;
      elMat(5,3) = 0;
      elMat(5,4) = 0;
      elMat(5,5) = 0;
      x_hat[0] = 0.5;
      x_hat[1] = 0.0;
      x_tilde[0] = 0.5*coords[0][0] + 0.5*coords[1][0];
      x_tilde[1] = 0.5*coords[0][1] + 0.5*coords[1][1];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint2D(x_hat, x_tilde, coords, DF, 0.16666666666666666, elMat);
      x_hat[0] = 0.0;
      x_hat[1] = 0.5;
      x_tilde[0] = 0.5*coords[0][0] + 0.5*coords[2][0];
      x_tilde[1] = 0.5*coords[0][1] + 0.5*coords[2][1];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint2D(x_hat, x_tilde, coords, DF, 0.16666666666666666, elMat);
      x_hat[0] = 0.5;
      x_hat[1] = 0.5;
      x_tilde[0] = 0.5*coords[1][0] + 0.5*coords[2][0];
      x_tilde[1] = 0.5*coords[1][1] + 0.5*coords[2][1];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint2D(x_hat, x_tilde, coords, DF, 0.16666666666666666, elMat);
   }

   void evalQuadraturePoint3D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,4>& coords, const Matrix3r& DF, real_t w, Matrix10r& elMat) const
   {
      real_t tmp0 = 4.0*x_hat[0];
      real_t tmp1 = 4.0*x_hat[1];
      real_t tmp2 = 4.0*x_hat[2];
      real_t tmp3 = tmp0 + tmp1 + tmp2 - 3.0;
      real_t tmp4 = coords[0][1]*coords[2][0];
      real_t tmp5 = coords[0][0]*coords[2][1];
      real_t tmp6 = coords[0][0]*coords[1][1];
      real_t tmp7 = coords[0][1]*coords[1][0];
      real_t tmp8 = tmp6 - tmp7;
      real_t tmp9 = coords[1][0]*coords[2][1] - coords[1][1]*coords[2][0] + tmp4 - tmp5 + tmp8;
      real_t tmp10 = DF(1,1)*DF(2,2);
      real_t tmp11 = DF(1,2)*DF(2,0);
      real_t tmp12 = DF(1,0)*DF(2,1);
      real_t tmp13 = DF(1,2)*DF(2,1);
      real_t tmp14 = DF(1,0)*DF(2,2);
      real_t tmp15 = DF(1,1)*DF(2,0);
      real_t tmp16 = DF(0,0)*tmp10 - DF(0,0)*tmp13 + DF(0,1)*tmp11 - DF(0,1)*tmp14 + DF(0,2)*tmp12 - DF(0,2)*tmp15;
      real_t tmp17 = coords[0][0]*coords[3][1];
      real_t tmp18 = coords[0][0]*coords[3][2];
      real_t tmp19 = coords[0][1]*coords[1][2];
      real_t tmp20 = coords[0][1]*coords[3][0];
      real_t tmp21 = coords[0][2]*coords[1][0];
      real_t tmp22 = coords[1][1]*coords[3][0];
      real_t tmp23 = coords[0][2]*coords[3][1];
      real_t tmp24 = coords[1][0]*coords[3][1];
      real_t tmp25 = coords[1][1]*coords[3][2];
      real_t tmp26 = coords[1][2]*coords[3][0];
      real_t tmp27 = coords[0][0]*coords[1][2];
      real_t tmp28 = coords[0][1]*coords[3][2];
      real_t tmp29 = coords[0][2]*coords[1][1];
      real_t tmp30 = coords[0][2]*coords[3][0];
      real_t tmp31 = coords[1][0]*coords[3][2];
      real_t tmp32 = coords[1][2]*coords[3][1];
      real_t tmp33 = coords[0][2]*tmp22 - coords[0][2]*tmp24 + coords[1][2]*tmp17 - coords[1][2]*tmp20 + coords[2][0]*tmp19 + coords[2][0]*tmp23 + coords[2][0]*tmp25 - coords[2][0]*tmp28 - coords[2][0]*tmp29 - coords[2][0]*tmp32 + coords[2][1]*tmp18 + coords[2][1]*tmp21 + coords[2][1]*tmp26 - coords[2][1]*tmp27 - coords[2][1]*tmp30 - coords[2][1]*tmp31 - coords[2][2]*tmp17 + coords[2][2]*tmp20 - coords[2][2]*tmp22 + coords[2][2]*tmp24 + coords[2][2]*tmp6 - coords[2][2]*tmp7 - coords[3][2]*tmp6 + coords[3][2]*tmp7;
      real_t tmp34 = 1/(tmp16*tmp33);
      real_t tmp35 = tmp34*(DF(0,0)*DF(2,1) - DF(0,1)*DF(2,0));
      real_t tmp36 = coords[0][2]*coords[2][0];
      real_t tmp37 = coords[0][0]*coords[2][2];
      real_t tmp38 = -tmp21 + tmp27;
      real_t tmp39 = coords[1][0]*coords[2][2] - coords[1][2]*coords[2][0] + tmp36 - tmp37 + tmp38;
      real_t tmp40 = tmp34*(DF(0,0)*DF(2,2) - DF(0,2)*DF(2,0));
      real_t tmp41 = coords[0][2]*coords[2][1];
      real_t tmp42 = coords[0][1]*coords[2][2];
      real_t tmp43 = tmp19 - tmp29;
      real_t tmp44 = coords[1][1]*coords[2][2] - coords[1][2]*coords[2][1] + tmp41 - tmp42 + tmp43;
      real_t tmp45 = tmp34*(DF(0,1)*DF(2,2) - DF(0,2)*DF(2,1));
      real_t tmp46 = tmp35*tmp9 + tmp39*tmp40 + tmp44*tmp45;
      real_t tmp47 = tmp3*tmp46;
      real_t tmp48 = -tmp17 + tmp20;
      real_t tmp49 = coords[2][0]*coords[3][1] - coords[2][1]*coords[3][0] - tmp4 + tmp48 + tmp5;
      real_t tmp50 = -tmp18 + tmp30;
      real_t tmp51 = coords[2][0]*coords[3][2] - coords[2][2]*coords[3][0] - tmp36 + tmp37 + tmp50;
      real_t tmp52 = tmp23 - tmp28;
      real_t tmp53 = coords[2][1]*coords[3][2] - coords[2][2]*coords[3][1] - tmp41 + tmp42 + tmp52;
      real_t tmp54 = tmp35*tmp49 + tmp40*tmp51 + tmp45*tmp53;
      real_t tmp55 = tmp3*tmp54;
      real_t tmp56 = -tmp22 + tmp24 + tmp48 + tmp8;
      real_t tmp57 = -tmp26 + tmp31 + tmp38 + tmp50;
      real_t tmp58 = tmp25 - tmp32 + tmp43 + tmp52;
      real_t tmp59 = -tmp35*tmp56 - tmp40*tmp57 - tmp45*tmp58;
      real_t tmp60 = tmp3*tmp59;
      real_t tmp61 = tmp34*(DF(0,0)*DF(1,1) - DF(0,1)*DF(1,0));
      real_t tmp62 = tmp34*(DF(0,0)*DF(1,2) - DF(0,2)*DF(1,0));
      real_t tmp63 = tmp34*(DF(0,1)*DF(1,2) - DF(0,2)*DF(1,1));
      real_t tmp64 = tmp56*tmp61 + tmp57*tmp62 + tmp58*tmp63;
      real_t tmp65 = tmp3*tmp64;
      real_t tmp66 = -tmp39*tmp62 - tmp44*tmp63 - tmp61*tmp9;
      real_t tmp67 = tmp3*tmp66;
      real_t tmp68 = -tmp49*tmp61 - tmp51*tmp62 - tmp53*tmp63;
      real_t tmp69 = tmp3*tmp68;
      real_t tmp70 = tmp34*(tmp12 - tmp15);
      real_t tmp71 = tmp34*(-tmp11 + tmp14);
      real_t tmp72 = tmp34*(tmp10 - tmp13);
      real_t tmp73 = tmp56*tmp70 + tmp57*tmp71 + tmp58*tmp72;
      real_t tmp74 = 1.0*tmp3;
      real_t tmp75 = -tmp39*tmp71 - tmp44*tmp72 - tmp70*tmp9;
      real_t tmp76 = -tmp49*tmp70 - tmp51*tmp71 - tmp53*tmp72;
      real_t tmp77 = tmp73*tmp74 + tmp74*tmp75 + tmp74*tmp76;
      real_t tmp78 = 2*std::fabs(tmp16*tmp33);
      real_t tmp79 = 0.5*tmp47 + 0.5*tmp55 + 0.5*tmp60;
      real_t tmp80 = tmp0 - 1.0;
      real_t tmp81 = 1.0*tmp80;
      real_t tmp82 = tmp54*tmp81;
      real_t tmp83 = 0.5*tmp65 + 0.5*tmp67 + 0.5*tmp69;
      real_t tmp84 = tmp68*tmp81;
      real_t tmp85 = tmp76*tmp81;
      real_t tmp86 = tmp78*(tmp77*tmp85 + tmp79*tmp82 + tmp83*tmp84);
      real_t tmp87 = tmp1 - 1.0;
      real_t tmp88 = 1.0*tmp87;
      real_t tmp89 = tmp64*tmp88;
      real_t tmp90 = tmp59*tmp88;
      real_t tmp91 = tmp73*tmp88;
      real_t tmp92 = tmp78*(tmp77*tmp91 + tmp79*tmp90 + tmp83*tmp89);
      real_t tmp93 = tmp2 - 1.0;
      real_t tmp94 = 1.0*tmp93;
      real_t tmp95 = tmp46*tmp94;
      real_t tmp96 = tmp66*tmp94;
      real_t tmp97 = tmp75*tmp94;
      real_t tmp98 = tmp78*(tmp77*tmp97 + tmp79*tmp95 + tmp83*tmp96);
      real_t tmp99 = tmp46*x_hat[1];
      real_t tmp100 = 2.0*tmp99;
      real_t tmp101 = tmp59*x_hat[2];
      real_t tmp102 = 2.0*tmp101;
      real_t tmp103 = tmp100 + tmp102;
      real_t tmp104 = 2*tmp79;
      real_t tmp105 = tmp2*tmp73;
      real_t tmp106 = tmp1*tmp75;
      real_t tmp107 = tmp105 + tmp106;
      real_t tmp108 = tmp64*x_hat[2];
      real_t tmp109 = 2.0*tmp108;
      real_t tmp110 = tmp66*x_hat[1];
      real_t tmp111 = 2.0*tmp110;
      real_t tmp112 = tmp109 + tmp111;
      real_t tmp113 = 2*tmp83;
      real_t tmp114 = tmp78*(tmp103*tmp104 + tmp107*tmp77 + tmp112*tmp113);
      real_t tmp115 = tmp46*x_hat[0];
      real_t tmp116 = 2.0*tmp115;
      real_t tmp117 = tmp54*x_hat[2];
      real_t tmp118 = 2.0*tmp117;
      real_t tmp119 = tmp116 + tmp118;
      real_t tmp120 = tmp0*tmp75;
      real_t tmp121 = tmp2*tmp76;
      real_t tmp122 = tmp120 + tmp121;
      real_t tmp123 = tmp66*x_hat[0];
      real_t tmp124 = 2.0*tmp123;
      real_t tmp125 = tmp68*x_hat[2];
      real_t tmp126 = 2.0*tmp125;
      real_t tmp127 = tmp124 + tmp126;
      real_t tmp128 = tmp78*(tmp104*tmp119 + tmp113*tmp127 + tmp122*tmp77);
      real_t tmp129 = tmp54*x_hat[1];
      real_t tmp130 = 2.0*tmp129;
      real_t tmp131 = tmp59*x_hat[0];
      real_t tmp132 = 2.0*tmp131;
      real_t tmp133 = tmp130 + tmp132;
      real_t tmp134 = tmp0*tmp73;
      real_t tmp135 = tmp1*tmp76;
      real_t tmp136 = tmp134 + tmp135;
      real_t tmp137 = tmp64*x_hat[0];
      real_t tmp138 = 2.0*tmp137;
      real_t tmp139 = tmp68*x_hat[1];
      real_t tmp140 = 2.0*tmp139;
      real_t tmp141 = tmp138 + tmp140;
      real_t tmp142 = tmp78*(tmp104*tmp133 + tmp113*tmp141 + tmp136*tmp77);
      real_t tmp143 = -tmp1;
      real_t tmp144 = 4.0 - tmp0;
      real_t tmp145 = tmp143 + tmp144 - 8.0*x_hat[2];
      real_t tmp146 = 0.5*tmp145;
      real_t tmp147 = -tmp102 - tmp118 + tmp146*tmp46;
      real_t tmp148 = tmp145*tmp75;
      real_t tmp149 = -tmp105 - tmp121 + 1.0*tmp148;
      real_t tmp150 = -tmp109 - tmp126 + tmp146*tmp66;
      real_t tmp151 = tmp78*(tmp104*tmp147 + tmp113*tmp150 + tmp149*tmp77);
      real_t tmp152 = -tmp2;
      real_t tmp153 = tmp144 + tmp152 - 8.0*x_hat[1];
      real_t tmp154 = 0.5*tmp153;
      real_t tmp155 = -tmp100 - tmp130 + tmp154*tmp59;
      real_t tmp156 = tmp153*tmp73;
      real_t tmp157 = -tmp106 - tmp135 + 1.0*tmp156;
      real_t tmp158 = -tmp111 - tmp140 + tmp154*tmp64;
      real_t tmp159 = tmp78*(tmp104*tmp155 + tmp113*tmp158 + tmp157*tmp77);
      real_t tmp160 = tmp143 + tmp152 - 8.0*x_hat[0] + 4.0;
      real_t tmp161 = 0.5*tmp160;
      real_t tmp162 = -tmp116 - tmp132 + tmp161*tmp54;
      real_t tmp163 = tmp160*tmp76;
      real_t tmp164 = -tmp120 - tmp134 + 1.0*tmp163;
      real_t tmp165 = -tmp124 - tmp138 + tmp161*tmp68;
      real_t tmp166 = tmp78*(tmp104*tmp162 + tmp113*tmp165 + tmp164*tmp77);
      real_t tmp167 = std::pow(x_hat[0] - 0.25, 2);
      real_t tmp168 = 8.0*tmp167;
      real_t tmp169 = 0.5*tmp80;
      real_t tmp170 = tmp169*tmp87;
      real_t tmp171 = tmp78*(tmp170*tmp54*tmp59 + tmp170*tmp64*tmp68 + tmp73*tmp85*tmp87);
      real_t tmp172 = tmp169*tmp93;
      real_t tmp173 = tmp75*tmp93;
      real_t tmp174 = tmp78*(tmp172*tmp46*tmp54 + tmp172*tmp66*tmp68 + tmp173*tmp85);
      real_t tmp175 = tmp78*(tmp103*tmp82 + tmp107*tmp85 + tmp112*tmp84);
      real_t tmp176 = tmp78*(tmp119*tmp82 + tmp122*tmp85 + tmp127*tmp84);
      real_t tmp177 = tmp78*(tmp133*tmp82 + tmp136*tmp85 + tmp141*tmp84);
      real_t tmp178 = tmp78*(tmp147*tmp82 + tmp149*tmp85 + tmp150*tmp84);
      real_t tmp179 = tmp78*(tmp155*tmp82 + tmp157*tmp85 + tmp158*tmp84);
      real_t tmp180 = tmp78*(tmp162*tmp82 + tmp164*tmp85 + tmp165*tmp84);
      real_t tmp181 = std::pow(x_hat[1] - 0.25, 2);
      real_t tmp182 = 8.0*tmp181;
      real_t tmp183 = 0.5*tmp87*tmp93;
      real_t tmp184 = tmp78*(tmp173*tmp91 + tmp183*tmp46*tmp59 + tmp183*tmp64*tmp66);
      real_t tmp185 = tmp78*(tmp103*tmp90 + tmp107*tmp91 + tmp112*tmp89);
      real_t tmp186 = tmp78*(tmp119*tmp90 + tmp122*tmp91 + tmp127*tmp89);
      real_t tmp187 = tmp78*(tmp133*tmp90 + tmp136*tmp91 + tmp141*tmp89);
      real_t tmp188 = tmp78*(tmp147*tmp90 + tmp149*tmp91 + tmp150*tmp89);
      real_t tmp189 = tmp78*(tmp155*tmp90 + tmp157*tmp91 + tmp158*tmp89);
      real_t tmp190 = tmp78*(tmp162*tmp90 + tmp164*tmp91 + tmp165*tmp89);
      real_t tmp191 = std::pow(x_hat[2] - 0.25, 2);
      real_t tmp192 = 8.0*tmp191;
      real_t tmp193 = tmp78*(tmp103*tmp95 + tmp107*tmp97 + tmp112*tmp96);
      real_t tmp194 = tmp78*(tmp119*tmp95 + tmp122*tmp97 + tmp127*tmp96);
      real_t tmp195 = tmp78*(tmp133*tmp95 + tmp136*tmp97 + tmp141*tmp96);
      real_t tmp196 = tmp78*(tmp147*tmp95 + tmp149*tmp97 + tmp150*tmp96);
      real_t tmp197 = tmp78*(tmp155*tmp95 + tmp157*tmp97 + tmp158*tmp96);
      real_t tmp198 = tmp78*(tmp162*tmp95 + tmp164*tmp97 + tmp165*tmp96);
      real_t tmp199 = tmp73*x_hat[2];
      real_t tmp200 = tmp75*x_hat[1];
      real_t tmp201 = 2*tmp103;
      real_t tmp202 = 2*tmp112;
      real_t tmp203 = tmp78*(tmp107*tmp122 + tmp119*tmp201 + tmp127*tmp202);
      real_t tmp204 = tmp78*(tmp107*tmp136 + tmp133*tmp201 + tmp141*tmp202);
      real_t tmp205 = tmp78*(tmp107*tmp149 + tmp147*tmp201 + tmp150*tmp202);
      real_t tmp206 = tmp78*(tmp107*tmp157 + tmp155*tmp201 + tmp158*tmp202);
      real_t tmp207 = tmp78*(tmp107*tmp164 + tmp162*tmp201 + tmp165*tmp202);
      real_t tmp208 = tmp75*x_hat[0];
      real_t tmp209 = tmp76*x_hat[2];
      real_t tmp210 = 2*tmp119;
      real_t tmp211 = 2*tmp127;
      real_t tmp212 = tmp78*(tmp122*tmp136 + tmp133*tmp210 + tmp141*tmp211);
      real_t tmp213 = tmp78*(tmp122*tmp149 + tmp147*tmp210 + tmp150*tmp211);
      real_t tmp214 = tmp78*(tmp122*tmp157 + tmp155*tmp210 + tmp158*tmp211);
      real_t tmp215 = tmp78*(tmp122*tmp164 + tmp162*tmp210 + tmp165*tmp211);
      real_t tmp216 = tmp73*x_hat[0];
      real_t tmp217 = tmp76*x_hat[1];
      real_t tmp218 = 2*tmp133;
      real_t tmp219 = 2*tmp141;
      real_t tmp220 = tmp78*(tmp136*tmp149 + tmp147*tmp218 + tmp150*tmp219);
      real_t tmp221 = tmp78*(tmp136*tmp157 + tmp155*tmp218 + tmp158*tmp219);
      real_t tmp222 = tmp78*(tmp136*tmp164 + tmp162*tmp218 + tmp165*tmp219);
      real_t tmp223 = 0.25*tmp145;
      real_t tmp224 = 2*tmp147;
      real_t tmp225 = 2*tmp150;
      real_t tmp226 = tmp78*(tmp149*tmp157 + tmp155*tmp224 + tmp158*tmp225);
      real_t tmp227 = tmp78*(tmp149*tmp164 + tmp162*tmp224 + tmp165*tmp225);
      real_t tmp228 = 0.25*tmp153;
      real_t tmp229 = tmp78*(2*tmp155*tmp162 + tmp157*tmp164 + 2*tmp158*tmp165);
      real_t tmp230 = 0.25*tmp160;
      elMat(0,0) += w * tmp78*(std::pow(tmp77, 2) + 0.5*std::pow(tmp47 + tmp55 + tmp60, 2) + 0.5*std::pow(tmp65 + tmp67 + tmp69, 2));
      elMat(0,1) += w * tmp86;
      elMat(0,2) += w * tmp92;
      elMat(0,3) += w * tmp98;
      elMat(0,4) += w * tmp114;
      elMat(0,5) += w * tmp128;
      elMat(0,6) += w * tmp142;
      elMat(0,7) += w * tmp151;
      elMat(0,8) += w * tmp159;
      elMat(0,9) += w * tmp166;
      elMat(1,0) += w * tmp86;
      elMat(1,1) += w * tmp78*(16.0*tmp167*std::pow(tmp76, 2) + tmp168*std::pow(tmp54, 2) + tmp168*std::pow(tmp68, 2));
      elMat(1,2) += w * tmp171;
      elMat(1,3) += w * tmp174;
      elMat(1,4) += w * tmp175;
      elMat(1,5) += w * tmp176;
      elMat(1,6) += w * tmp177;
      elMat(1,7) += w * tmp178;
      elMat(1,8) += w * tmp179;
      elMat(1,9) += w * tmp180;
      elMat(2,0) += w * tmp92;
      elMat(2,1) += w * tmp171;
      elMat(2,2) += w * tmp78*(16.0*tmp181*std::pow(tmp73, 2) + tmp182*std::pow(tmp59, 2) + tmp182*std::pow(tmp64, 2));
      elMat(2,3) += w * tmp184;
      elMat(2,4) += w * tmp185;
      elMat(2,5) += w * tmp186;
      elMat(2,6) += w * tmp187;
      elMat(2,7) += w * tmp188;
      elMat(2,8) += w * tmp189;
      elMat(2,9) += w * tmp190;
      elMat(3,0) += w * tmp98;
      elMat(3,1) += w * tmp174;
      elMat(3,2) += w * tmp184;
      elMat(3,3) += w * tmp78*(16.0*tmp191*std::pow(tmp75, 2) + tmp192*std::pow(tmp46, 2) + tmp192*std::pow(tmp66, 2));
      elMat(3,4) += w * tmp193;
      elMat(3,5) += w * tmp194;
      elMat(3,6) += w * tmp195;
      elMat(3,7) += w * tmp196;
      elMat(3,8) += w * tmp197;
      elMat(3,9) += w * tmp198;
      elMat(4,0) += w * tmp114;
      elMat(4,1) += w * tmp175;
      elMat(4,2) += w * tmp185;
      elMat(4,3) += w * tmp193;
      elMat(4,4) += w * tmp78*(8.0*std::pow(tmp101 + tmp99, 2) + 8.0*std::pow(tmp108 + tmp110, 2) + 16.0*std::pow(tmp199 + tmp200, 2));
      elMat(4,5) += w * tmp203;
      elMat(4,6) += w * tmp204;
      elMat(4,7) += w * tmp205;
      elMat(4,8) += w * tmp206;
      elMat(4,9) += w * tmp207;
      elMat(5,0) += w * tmp128;
      elMat(5,1) += w * tmp176;
      elMat(5,2) += w * tmp186;
      elMat(5,3) += w * tmp194;
      elMat(5,4) += w * tmp203;
      elMat(5,5) += w * tmp78*(8.0*std::pow(tmp115 + tmp117, 2) + 8.0*std::pow(tmp123 + tmp125, 2) + 16.0*std::pow(tmp208 + tmp209, 2));
      elMat(5,6) += w * tmp212;
      elMat(5,7) += w * tmp213;
      elMat(5,8) += w * tmp214;
      elMat(5,9) += w * tmp215;
      elMat(6,0) += w * tmp142;
      elMat(6,1) += w * tmp177;
      elMat(6,2) += w * tmp187;
      elMat(6,3) += w * tmp195;
      elMat(6,4) += w * tmp204;
      elMat(6,5) += w * tmp212;
      elMat(6,6) += w * tmp78*(8.0*std::pow(tmp129 + tmp131, 2) + 8.0*std::pow(tmp137 + tmp139, 2) + 16.0*std::pow(tmp216 + tmp217, 2));
      elMat(6,7) += w * tmp220;
      elMat(6,8) += w * tmp221;
      elMat(6,9) += w * tmp222;
      elMat(7,0) += w * tmp151;
      elMat(7,1) += w * tmp178;
      elMat(7,2) += w * tmp188;
      elMat(7,3) += w * tmp196;
      elMat(7,4) += w * tmp205;
      elMat(7,5) += w * tmp213;
      elMat(7,6) += w * tmp220;
      elMat(7,7) += w * tmp78*(8.0*std::pow(-tmp101 - tmp117 + tmp223*tmp46, 2) + 8.0*std::pow(-tmp108 - tmp125 + tmp223*tmp66, 2) + 16.0*std::pow(0.25*tmp148 - tmp199 - tmp209, 2));
      elMat(7,8) += w * tmp226;
      elMat(7,9) += w * tmp227;
      elMat(8,0) += w * tmp159;
      elMat(8,1) += w * tmp179;
      elMat(8,2) += w * tmp189;
      elMat(8,3) += w * tmp197;
      elMat(8,4) += w * tmp206;
      elMat(8,5) += w * tmp214;
      elMat(8,6) += w * tmp221;
      elMat(8,7) += w * tmp226;
      elMat(8,8) += w * tmp78*(8.0*std::pow(-tmp110 - tmp139 + tmp228*tmp64, 2) + 8.0*std::pow(-tmp129 + tmp228*tmp59 - tmp99, 2) + 16.0*std::pow(0.25*tmp156 - tmp200 - tmp217, 2));
      elMat(8,9) += w * tmp229;
      elMat(9,0) += w * tmp166;
      elMat(9,1) += w * tmp180;
      elMat(9,2) += w * tmp190;
      elMat(9,3) += w * tmp198;
      elMat(9,4) += w * tmp207;
      elMat(9,5) += w * tmp215;
      elMat(9,6) += w * tmp222;
      elMat(9,7) += w * tmp227;
      elMat(9,8) += w * tmp229;
      elMat(9,9) += w * tmp78*(8.0*std::pow(-tmp115 - tmp131 + tmp230*tmp54, 2) + 8.0*std::pow(-tmp123 - tmp137 + tmp230*tmp68, 2) + 16.0*std::pow(0.25*tmp163 - tmp208 - tmp216, 2));
   }

   void integrateAll( const std::array< Point3D, 4 >& coords, Matrix10r& elMat ) const final
   {
      Point3D x_hat;
      Point3D x_tilde;
      Matrix3r DF;
      elMat(0,0) = 0;
      elMat(0,1) = 0;
      elMat(0,2) = 0;
      elMat(0,3) = 0;
      elMat(0,4) = 0;
      elMat(0,5) = 0;
      elMat(0,6) = 0;
      elMat(0,7) = 0;
      elMat(0,8) = 0;
      elMat(0,9) = 0;
      elMat(1,0) = 0;
      elMat(1,1) = 0;
      elMat(1,2) = 0;
      elMat(1,3) = 0;
      elMat(1,4) = 0;
      elMat(1,5) = 0;
      elMat(1,6) = 0;
      elMat(1,7) = 0;
      elMat(1,8) = 0;
      elMat(1,9) = 0;
      elMat(2,0) = 0;
      elMat(2,1) = 0;
      elMat(2,2) = 0;
      elMat(2,3) = 0;
      elMat(2,4) = 0;
      elMat(2,5) = 0;
      elMat(2,6) = 0;
      elMat(2,7) = 0;
      elMat(2,8) = 0;
      elMat(2,9) = 0;
      elMat(3,0) = 0;
      elMat(3,1) = 0;
      elMat(3,2) = 0;
      elMat(3,3) = 0;
      elMat(3,4) = 0;
      elMat(3,5) = 0;
      elMat(3,6) = 0;
      elMat(3,7) = 0;
      elMat(3,8) = 0;
      elMat(3,9) = 0;
      elMat(4,0) = 0;
      elMat(4,1) = 0;
      elMat(4,2) = 0;
      elMat(4,3) = 0;
      elMat(4,4) = 0;
      elMat(4,5) = 0;
      elMat(4,6) = 0;
      elMat(4,7) = 0;
      elMat(4,8) = 0;
      elMat(4,9) = 0;
      elMat(5,0) = 0;
      elMat(5,1) = 0;
      elMat(5,2) = 0;
      elMat(5,3) = 0;
      elMat(5,4) = 0;
      elMat(5,5) = 0;
      elMat(5,6) = 0;
      elMat(5,7) = 0;
      elMat(5,8) = 0;
      elMat(5,9) = 0;
      elMat(6,0) = 0;
      elMat(6,1) = 0;
      elMat(6,2) = 0;
      elMat(6,3) = 0;
      elMat(6,4) = 0;
      elMat(6,5) = 0;
      elMat(6,6) = 0;
      elMat(6,7) = 0;
      elMat(6,8) = 0;
      elMat(6,9) = 0;
      elMat(7,0) = 0;
      elMat(7,1) = 0;
      elMat(7,2) = 0;
      elMat(7,3) = 0;
      elMat(7,4) = 0;
      elMat(7,5) = 0;
      elMat(7,6) = 0;
      elMat(7,7) = 0;
      elMat(7,8) = 0;
      elMat(7,9) = 0;
      elMat(8,0) = 0;
      elMat(8,1) = 0;
      elMat(8,2) = 0;
      elMat(8,3) = 0;
      elMat(8,4) = 0;
      elMat(8,5) = 0;
      elMat(8,6) = 0;
      elMat(8,7) = 0;
      elMat(8,8) = 0;
      elMat(8,9) = 0;
      elMat(9,0) = 0;
      elMat(9,1) = 0;
      elMat(9,2) = 0;
      elMat(9,3) = 0;
      elMat(9,4) = 0;
      elMat(9,5) = 0;
      elMat(9,6) = 0;
      elMat(9,7) = 0;
      elMat(9,8) = 0;
      elMat(9,9) = 0;
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.5854101966249684;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.585410196624968*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.585410196624968*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.585410196624968*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.5854101966249684;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.585410196624968*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.585410196624968*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.585410196624968*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.5854101966249684;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.585410196624968*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.585410196624968*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.585410196624968*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.585410196624968*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.585410196624968*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.585410196624968*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
   }

};

class P2Form_epsilon_12 : public P2FormHyTeG {
 public:
   void evalQuadraturePoint2D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,3>& coords, const Matrix2r& DF, real_t w, Matrix6r& elMat) const
   {
      real_t tmp0 = coords[0][0] - coords[2][0];
      real_t tmp1 = DF(1,0)*tmp0;
      real_t tmp2 = coords[0][1] - coords[2][1];
      real_t tmp3 = DF(1,1)*tmp2;
      real_t tmp4 = coords[0][0] - coords[1][0];
      real_t tmp5 = coords[0][1] - coords[1][1];
      real_t tmp6 = DF(1,0)*tmp4 + DF(1,1)*tmp5;
      real_t tmp7 = -tmp1 - tmp3 + tmp6;
      real_t tmp8 = DF(0,0)*tmp0;
      real_t tmp9 = DF(0,1)*tmp2;
      real_t tmp10 = DF(0,0)*tmp4 + DF(0,1)*tmp5;
      real_t tmp11 = DF(0,0)*DF(1,1) - DF(0,1)*DF(1,0);
      real_t tmp12 = coords[0][0]*coords[1][1] - coords[0][0]*coords[2][1] - coords[0][1]*coords[1][0] + coords[0][1]*coords[2][0] + coords[1][0]*coords[2][1] - coords[1][1]*coords[2][0];
      real_t tmp13 = std::fabs(tmp11*tmp12)/(std::pow(tmp11, 2)*std::pow(tmp12, 2));
      real_t tmp14 = tmp13*(tmp10 - tmp8 - tmp9);
      real_t tmp15 = tmp1 + tmp3;
      real_t tmp16 = 4.0*x_hat[0];
      real_t tmp17 = tmp16 - 1.0;
      real_t tmp18 = tmp15*tmp17;
      real_t tmp19 = 4.0*x_hat[1];
      real_t tmp20 = tmp16 + tmp19 - 3.0;
      real_t tmp21 = tmp14*tmp20;
      real_t tmp22 = 1.0*tmp21;
      real_t tmp23 = tmp19 - 1.0;
      real_t tmp24 = tmp23*tmp6;
      real_t tmp25 = tmp6*x_hat[0];
      real_t tmp26 = tmp15*x_hat[1];
      real_t tmp27 = tmp25 - tmp26;
      real_t tmp28 = 4.0*tmp27;
      real_t tmp29 = 0.5*tmp16 + 4.0*x_hat[1] - 2.0;
      real_t tmp30 = 2.0*tmp26 - tmp29*tmp6;
      real_t tmp31 = 2.0*tmp21;
      real_t tmp32 = 0.5*tmp19 + 4.0*x_hat[0] - 2.0;
      real_t tmp33 = tmp15*tmp32 - 2.0*tmp25;
      real_t tmp34 = tmp20*tmp7;
      real_t tmp35 = tmp8 + tmp9;
      real_t tmp36 = tmp13*tmp35;
      real_t tmp37 = tmp17*tmp36;
      real_t tmp38 = 1.0*tmp37;
      real_t tmp39 = 2.0*tmp37;
      real_t tmp40 = tmp10*tmp13;
      real_t tmp41 = tmp23*tmp40;
      real_t tmp42 = 1.0*tmp41;
      real_t tmp43 = 2.0*tmp41;
      real_t tmp44 = tmp35*x_hat[1];
      real_t tmp45 = tmp10*x_hat[0];
      real_t tmp46 = tmp13*(tmp44 - tmp45);
      real_t tmp47 = 4.0*tmp46;
      real_t tmp48 = 8.0*tmp46;
      real_t tmp49 = tmp13*(tmp10*tmp29 - 2.0*tmp44);
      real_t tmp50 = 2.0*tmp49;
      real_t tmp51 = 8.0*tmp27;
      real_t tmp52 = 4*tmp49;
      real_t tmp53 = tmp13*(-tmp32*tmp35 + 2.0*tmp45);
      real_t tmp54 = 2.0*tmp53;
      real_t tmp55 = 4*tmp53;
      elMat(0,0) += w * -16.0*tmp14*tmp7*std::pow(x_hat[0] + x_hat[1] - 0.75, 2);
      elMat(0,1) += w * tmp18*tmp22;
      elMat(0,2) += w * -tmp22*tmp24;
      elMat(0,3) += w * -tmp21*tmp28;
      elMat(0,4) += w * -tmp30*tmp31;
      elMat(0,5) += w * -tmp31*tmp33;
      elMat(1,0) += w * tmp34*tmp38;
      elMat(1,1) += w * -16.0*tmp15*tmp36*std::pow(x_hat[0] - 0.25, 2);
      elMat(1,2) += w * tmp24*tmp38;
      elMat(1,3) += w * tmp28*tmp37;
      elMat(1,4) += w * tmp30*tmp39;
      elMat(1,5) += w * tmp33*tmp39;
      elMat(2,0) += w * -tmp34*tmp42;
      elMat(2,1) += w * tmp18*tmp42;
      elMat(2,2) += w * -16.0*tmp40*tmp6*std::pow(x_hat[1] - 0.25, 2);
      elMat(2,3) += w * -tmp28*tmp41;
      elMat(2,4) += w * -tmp30*tmp43;
      elMat(2,5) += w * -tmp33*tmp43;
      elMat(3,0) += w * tmp34*tmp47;
      elMat(3,1) += w * -tmp18*tmp47;
      elMat(3,2) += w * tmp24*tmp47;
      elMat(3,3) += w * 16.0*tmp27*tmp46;
      elMat(3,4) += w * tmp30*tmp48;
      elMat(3,5) += w * tmp33*tmp48;
      elMat(4,0) += w * tmp34*tmp50;
      elMat(4,1) += w * -tmp18*tmp50;
      elMat(4,2) += w * tmp24*tmp50;
      elMat(4,3) += w * tmp49*tmp51;
      elMat(4,4) += w * tmp30*tmp52;
      elMat(4,5) += w * tmp33*tmp52;
      elMat(5,0) += w * tmp34*tmp54;
      elMat(5,1) += w * -tmp18*tmp54;
      elMat(5,2) += w * tmp24*tmp54;
      elMat(5,3) += w * tmp51*tmp53;
      elMat(5,4) += w * tmp30*tmp55;
      elMat(5,5) += w * tmp33*tmp55;
   }

   void integrateAll( const std::array< Point3D, 3 >& coords, Matrix6r& elMat ) const final
   {
      Point3D x_hat;
      Point3D x_tilde;
      Matrix2r DF;
      elMat(0,0) = 0;
      elMat(0,1) = 0;
      elMat(0,2) = 0;
      elMat(0,3) = 0;
      elMat(0,4) = 0;
      elMat(0,5) = 0;
      elMat(1,0) = 0;
      elMat(1,1) = 0;
      elMat(1,2) = 0;
      elMat(1,3) = 0;
      elMat(1,4) = 0;
      elMat(1,5) = 0;
      elMat(2,0) = 0;
      elMat(2,1) = 0;
      elMat(2,2) = 0;
      elMat(2,3) = 0;
      elMat(2,4) = 0;
      elMat(2,5) = 0;
      elMat(3,0) = 0;
      elMat(3,1) = 0;
      elMat(3,2) = 0;
      elMat(3,3) = 0;
      elMat(3,4) = 0;
      elMat(3,5) = 0;
      elMat(4,0) = 0;
      elMat(4,1) = 0;
      elMat(4,2) = 0;
      elMat(4,3) = 0;
      elMat(4,4) = 0;
      elMat(4,5) = 0;
      elMat(5,0) = 0;
      elMat(5,1) = 0;
      elMat(5,2) = 0;
      elMat(5,3) = 0;
      elMat(5,4) = 0;
      elMat(5,5) = 0;
      x_hat[0] = 0.5;
      x_hat[1] = 0.0;
      x_tilde[0] = 0.5*coords[0][0] + 0.5*coords[1][0];
      x_tilde[1] = 0.5*coords[0][1] + 0.5*coords[1][1];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint2D(x_hat, x_tilde, coords, DF, 0.16666666666666666, elMat);
      x_hat[0] = 0.0;
      x_hat[1] = 0.5;
      x_tilde[0] = 0.5*coords[0][0] + 0.5*coords[2][0];
      x_tilde[1] = 0.5*coords[0][1] + 0.5*coords[2][1];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint2D(x_hat, x_tilde, coords, DF, 0.16666666666666666, elMat);
      x_hat[0] = 0.5;
      x_hat[1] = 0.5;
      x_tilde[0] = 0.5*coords[1][0] + 0.5*coords[2][0];
      x_tilde[1] = 0.5*coords[1][1] + 0.5*coords[2][1];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint2D(x_hat, x_tilde, coords, DF, 0.16666666666666666, elMat);
   }

   void evalQuadraturePoint3D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,4>& coords, const Matrix3r& DF, real_t w, Matrix10r& elMat) const
   {
      real_t tmp0 = coords[0][0]*coords[1][1];
      real_t tmp1 = coords[0][1]*coords[1][0];
      real_t tmp2 = tmp0 - tmp1;
      real_t tmp3 = -coords[0][0]*coords[3][1] + coords[0][1]*coords[3][0];
      real_t tmp4 = coords[1][0]*coords[3][1] - coords[1][1]*coords[3][0] + tmp2 + tmp3;
      real_t tmp5 = DF(0,0)*DF(2,2);
      real_t tmp6 = DF(0,1)*DF(2,0);
      real_t tmp7 = DF(0,2)*DF(2,1);
      real_t tmp8 = DF(0,0)*DF(2,1);
      real_t tmp9 = DF(0,1)*DF(2,2);
      real_t tmp10 = DF(0,2)*DF(2,0);
      real_t tmp11 = DF(1,0)*tmp7 - DF(1,0)*tmp9 - DF(1,1)*tmp10 + DF(1,1)*tmp5 + DF(1,2)*tmp6 - DF(1,2)*tmp8;
      real_t tmp12 = coords[0][0]*coords[1][2];
      real_t tmp13 = coords[0][0]*coords[2][1];
      real_t tmp14 = coords[0][1]*coords[2][0];
      real_t tmp15 = coords[0][1]*coords[2][2];
      real_t tmp16 = coords[1][0]*coords[2][1];
      real_t tmp17 = coords[0][2]*coords[1][1];
      real_t tmp18 = coords[0][2]*coords[2][0];
      real_t tmp19 = coords[1][0]*coords[2][2];
      real_t tmp20 = coords[1][1]*coords[2][0];
      real_t tmp21 = coords[1][2]*coords[2][1];
      real_t tmp22 = coords[0][0]*coords[2][2];
      real_t tmp23 = coords[0][1]*coords[1][2];
      real_t tmp24 = coords[0][2]*coords[1][0];
      real_t tmp25 = coords[0][2]*coords[2][1];
      real_t tmp26 = coords[1][1]*coords[2][2];
      real_t tmp27 = coords[1][2]*coords[2][0];
      real_t tmp28 = coords[0][2]*tmp16 - coords[0][2]*tmp20 - coords[1][2]*tmp13 + coords[1][2]*tmp14 + coords[2][2]*tmp0 - coords[2][2]*tmp1 + coords[3][0]*tmp15 + coords[3][0]*tmp17 + coords[3][0]*tmp21 - coords[3][0]*tmp23 - coords[3][0]*tmp25 - coords[3][0]*tmp26 + coords[3][1]*tmp12 + coords[3][1]*tmp18 + coords[3][1]*tmp19 - coords[3][1]*tmp22 - coords[3][1]*tmp24 - coords[3][1]*tmp27 - coords[3][2]*tmp0 + coords[3][2]*tmp1 + coords[3][2]*tmp13 - coords[3][2]*tmp14 - coords[3][2]*tmp16 + coords[3][2]*tmp20;
      real_t tmp29 = 1/(tmp11*tmp28);
      real_t tmp30 = tmp29*(DF(1,0)*DF(2,1) - DF(1,1)*DF(2,0));
      real_t tmp31 = tmp12 - tmp24;
      real_t tmp32 = -coords[0][0]*coords[3][2] + coords[0][2]*coords[3][0];
      real_t tmp33 = coords[1][0]*coords[3][2] - coords[1][2]*coords[3][0] + tmp31 + tmp32;
      real_t tmp34 = tmp29*(DF(1,0)*DF(2,2) - DF(1,2)*DF(2,0));
      real_t tmp35 = -tmp17 + tmp23;
      real_t tmp36 = -coords[0][1]*coords[3][2] + coords[0][2]*coords[3][1];
      real_t tmp37 = coords[1][1]*coords[3][2] - coords[1][2]*coords[3][1] + tmp35 + tmp36;
      real_t tmp38 = tmp29*(DF(1,1)*DF(2,2) - DF(1,2)*DF(2,1));
      real_t tmp39 = tmp30*tmp4 + tmp33*tmp34 + tmp37*tmp38;
      real_t tmp40 = 4.0*x_hat[0];
      real_t tmp41 = 4.0*x_hat[1];
      real_t tmp42 = 4.0*x_hat[2];
      real_t tmp43 = 0.5*tmp40 + 0.5*tmp41 + 0.5*tmp42 - 1.5;
      real_t tmp44 = -tmp13 + tmp14 + tmp16 + tmp2 - tmp20;
      real_t tmp45 = tmp18 + tmp19 - tmp22 - tmp27 + tmp31;
      real_t tmp46 = -tmp15 - tmp21 + tmp25 + tmp26 + tmp35;
      real_t tmp47 = -tmp30*tmp44 - tmp34*tmp45 - tmp38*tmp46;
      real_t tmp48 = coords[2][0]*coords[3][1] - coords[2][1]*coords[3][0] + tmp13 - tmp14 + tmp3;
      real_t tmp49 = coords[2][0]*coords[3][2] - coords[2][2]*coords[3][0] - tmp18 + tmp22 + tmp32;
      real_t tmp50 = coords[2][1]*coords[3][2] - coords[2][2]*coords[3][1] + tmp15 - tmp25 + tmp36;
      real_t tmp51 = -tmp30*tmp48 - tmp34*tmp49 - tmp38*tmp50;
      real_t tmp52 = tmp39*tmp43 + tmp43*tmp47 + tmp43*tmp51;
      real_t tmp53 = tmp29*(-tmp6 + tmp8);
      real_t tmp54 = tmp29*(-tmp10 + tmp5);
      real_t tmp55 = tmp29*(-tmp7 + tmp9);
      real_t tmp56 = tmp44*tmp53 + tmp45*tmp54 + tmp46*tmp55;
      real_t tmp57 = tmp48*tmp53 + tmp49*tmp54 + tmp50*tmp55;
      real_t tmp58 = -tmp33*tmp54 - tmp37*tmp55 - tmp4*tmp53;
      real_t tmp59 = tmp43*tmp56 + tmp43*tmp57 + tmp43*tmp58;
      real_t tmp60 = std::fabs(tmp11*tmp28);
      real_t tmp61 = 4*tmp60;
      real_t tmp62 = tmp59*tmp61;
      real_t tmp63 = tmp59*tmp60;
      real_t tmp64 = 2.0*tmp63;
      real_t tmp65 = tmp40 - 1.0;
      real_t tmp66 = tmp51*tmp65;
      real_t tmp67 = tmp41 - 1.0;
      real_t tmp68 = tmp39*tmp67;
      real_t tmp69 = tmp42 - 1.0;
      real_t tmp70 = 2.0*tmp47;
      real_t tmp71 = tmp69*tmp70;
      real_t tmp72 = 2.0*x_hat[2];
      real_t tmp73 = tmp39*tmp72;
      real_t tmp74 = tmp70*x_hat[1];
      real_t tmp75 = tmp73 + tmp74;
      real_t tmp76 = tmp70*x_hat[0];
      real_t tmp77 = tmp51*tmp72;
      real_t tmp78 = tmp76 + tmp77;
      real_t tmp79 = 2.0*x_hat[0];
      real_t tmp80 = tmp39*tmp79;
      real_t tmp81 = 2.0*x_hat[1];
      real_t tmp82 = tmp51*tmp81;
      real_t tmp83 = tmp80 + tmp82;
      real_t tmp84 = -tmp41;
      real_t tmp85 = 4.0 - tmp40;
      real_t tmp86 = 0.5*tmp84 + 0.5*tmp85 - 4.0*x_hat[2];
      real_t tmp87 = tmp47*tmp86 - tmp73 - tmp77;
      real_t tmp88 = -tmp42;
      real_t tmp89 = 0.5*tmp85 + 0.5*tmp88 - 4.0*x_hat[1];
      real_t tmp90 = tmp39*tmp89 - tmp74 - tmp82;
      real_t tmp91 = 0.5*tmp84 + 0.5*tmp88 - 4.0*x_hat[0] + 2.0;
      real_t tmp92 = tmp51*tmp91 - tmp76 - tmp80;
      real_t tmp93 = 2.0*tmp52;
      real_t tmp94 = tmp57*tmp60;
      real_t tmp95 = tmp65*tmp94;
      real_t tmp96 = 1.0*tmp95;
      real_t tmp97 = tmp47*tmp69;
      real_t tmp98 = 2.0*tmp95;
      real_t tmp99 = tmp58*tmp60;
      real_t tmp100 = tmp67*tmp99;
      real_t tmp101 = 1.0*tmp100;
      real_t tmp102 = 2.0*tmp100;
      real_t tmp103 = tmp56*tmp60;
      real_t tmp104 = tmp103*tmp69;
      real_t tmp105 = 1.0*tmp104;
      real_t tmp106 = 2.0*tmp104;
      real_t tmp107 = tmp56*tmp81;
      real_t tmp108 = tmp58*tmp72;
      real_t tmp109 = tmp107 + tmp108;
      real_t tmp110 = tmp109*tmp61;
      real_t tmp111 = tmp109*tmp60;
      real_t tmp112 = 2.0*tmp111;
      real_t tmp113 = tmp56*tmp79;
      real_t tmp114 = tmp57*tmp72;
      real_t tmp115 = tmp113 + tmp114;
      real_t tmp116 = tmp115*tmp61;
      real_t tmp117 = tmp115*tmp60;
      real_t tmp118 = 2.0*tmp117;
      real_t tmp119 = tmp57*tmp81;
      real_t tmp120 = tmp58*tmp79;
      real_t tmp121 = tmp119 + tmp120;
      real_t tmp122 = tmp121*tmp61;
      real_t tmp123 = tmp121*tmp60;
      real_t tmp124 = 2.0*tmp123;
      real_t tmp125 = -tmp108 - tmp114 + tmp56*tmp86;
      real_t tmp126 = tmp125*tmp61;
      real_t tmp127 = tmp125*tmp60;
      real_t tmp128 = 2.0*tmp127;
      real_t tmp129 = -tmp107 - tmp119 + tmp58*tmp89;
      real_t tmp130 = tmp129*tmp61;
      real_t tmp131 = tmp129*tmp60;
      real_t tmp132 = 2.0*tmp131;
      real_t tmp133 = -tmp113 - tmp120 + tmp57*tmp91;
      real_t tmp134 = tmp133*tmp61;
      real_t tmp135 = tmp133*tmp60;
      real_t tmp136 = 2.0*tmp135;
      elMat(0,0) += w * tmp52*tmp62;
      elMat(0,1) += w * tmp64*tmp66;
      elMat(0,2) += w * tmp64*tmp68;
      elMat(0,3) += w * tmp63*tmp71;
      elMat(0,4) += w * tmp62*tmp75;
      elMat(0,5) += w * tmp62*tmp78;
      elMat(0,6) += w * tmp62*tmp83;
      elMat(0,7) += w * tmp62*tmp87;
      elMat(0,8) += w * tmp62*tmp90;
      elMat(0,9) += w * tmp62*tmp92;
      elMat(1,0) += w * tmp93*tmp95;
      elMat(1,1) += w * 16.0*tmp51*tmp94*std::pow(x_hat[0] - 0.25, 2);
      elMat(1,2) += w * tmp68*tmp96;
      elMat(1,3) += w * tmp96*tmp97;
      elMat(1,4) += w * tmp75*tmp98;
      elMat(1,5) += w * tmp78*tmp98;
      elMat(1,6) += w * tmp83*tmp98;
      elMat(1,7) += w * tmp87*tmp98;
      elMat(1,8) += w * tmp90*tmp98;
      elMat(1,9) += w * tmp92*tmp98;
      elMat(2,0) += w * tmp100*tmp93;
      elMat(2,1) += w * tmp101*tmp66;
      elMat(2,2) += w * 16.0*tmp39*tmp99*std::pow(x_hat[1] - 0.25, 2);
      elMat(2,3) += w * tmp101*tmp97;
      elMat(2,4) += w * tmp102*tmp75;
      elMat(2,5) += w * tmp102*tmp78;
      elMat(2,6) += w * tmp102*tmp83;
      elMat(2,7) += w * tmp102*tmp87;
      elMat(2,8) += w * tmp102*tmp90;
      elMat(2,9) += w * tmp102*tmp92;
      elMat(3,0) += w * tmp104*tmp93;
      elMat(3,1) += w * tmp105*tmp66;
      elMat(3,2) += w * tmp105*tmp68;
      elMat(3,3) += w * 16.0*tmp103*tmp47*std::pow(x_hat[2] - 0.25, 2);
      elMat(3,4) += w * tmp106*tmp75;
      elMat(3,5) += w * tmp106*tmp78;
      elMat(3,6) += w * tmp106*tmp83;
      elMat(3,7) += w * tmp106*tmp87;
      elMat(3,8) += w * tmp106*tmp90;
      elMat(3,9) += w * tmp106*tmp92;
      elMat(4,0) += w * tmp110*tmp52;
      elMat(4,1) += w * tmp112*tmp66;
      elMat(4,2) += w * tmp112*tmp68;
      elMat(4,3) += w * tmp111*tmp71;
      elMat(4,4) += w * tmp110*tmp75;
      elMat(4,5) += w * tmp110*tmp78;
      elMat(4,6) += w * tmp110*tmp83;
      elMat(4,7) += w * tmp110*tmp87;
      elMat(4,8) += w * tmp110*tmp90;
      elMat(4,9) += w * tmp110*tmp92;
      elMat(5,0) += w * tmp116*tmp52;
      elMat(5,1) += w * tmp118*tmp66;
      elMat(5,2) += w * tmp118*tmp68;
      elMat(5,3) += w * tmp117*tmp71;
      elMat(5,4) += w * tmp116*tmp75;
      elMat(5,5) += w * tmp116*tmp78;
      elMat(5,6) += w * tmp116*tmp83;
      elMat(5,7) += w * tmp116*tmp87;
      elMat(5,8) += w * tmp116*tmp90;
      elMat(5,9) += w * tmp116*tmp92;
      elMat(6,0) += w * tmp122*tmp52;
      elMat(6,1) += w * tmp124*tmp66;
      elMat(6,2) += w * tmp124*tmp68;
      elMat(6,3) += w * tmp123*tmp71;
      elMat(6,4) += w * tmp122*tmp75;
      elMat(6,5) += w * tmp122*tmp78;
      elMat(6,6) += w * tmp122*tmp83;
      elMat(6,7) += w * tmp122*tmp87;
      elMat(6,8) += w * tmp122*tmp90;
      elMat(6,9) += w * tmp122*tmp92;
      elMat(7,0) += w * tmp126*tmp52;
      elMat(7,1) += w * tmp128*tmp66;
      elMat(7,2) += w * tmp128*tmp68;
      elMat(7,3) += w * tmp127*tmp71;
      elMat(7,4) += w * tmp126*tmp75;
      elMat(7,5) += w * tmp126*tmp78;
      elMat(7,6) += w * tmp126*tmp83;
      elMat(7,7) += w * tmp126*tmp87;
      elMat(7,8) += w * tmp126*tmp90;
      elMat(7,9) += w * tmp126*tmp92;
      elMat(8,0) += w * tmp130*tmp52;
      elMat(8,1) += w * tmp132*tmp66;
      elMat(8,2) += w * tmp132*tmp68;
      elMat(8,3) += w * tmp131*tmp71;
      elMat(8,4) += w * tmp130*tmp75;
      elMat(8,5) += w * tmp130*tmp78;
      elMat(8,6) += w * tmp130*tmp83;
      elMat(8,7) += w * tmp130*tmp87;
      elMat(8,8) += w * tmp130*tmp90;
      elMat(8,9) += w * tmp130*tmp92;
      elMat(9,0) += w * tmp134*tmp52;
      elMat(9,1) += w * tmp136*tmp66;
      elMat(9,2) += w * tmp136*tmp68;
      elMat(9,3) += w * tmp135*tmp71;
      elMat(9,4) += w * tmp134*tmp75;
      elMat(9,5) += w * tmp134*tmp78;
      elMat(9,6) += w * tmp134*tmp83;
      elMat(9,7) += w * tmp134*tmp87;
      elMat(9,8) += w * tmp134*tmp90;
      elMat(9,9) += w * tmp134*tmp92;
   }

   void integrateAll( const std::array< Point3D, 4 >& coords, Matrix10r& elMat ) const final
   {
      Point3D x_hat;
      Point3D x_tilde;
      Matrix3r DF;
      elMat(0,0) = 0;
      elMat(0,1) = 0;
      elMat(0,2) = 0;
      elMat(0,3) = 0;
      elMat(0,4) = 0;
      elMat(0,5) = 0;
      elMat(0,6) = 0;
      elMat(0,7) = 0;
      elMat(0,8) = 0;
      elMat(0,9) = 0;
      elMat(1,0) = 0;
      elMat(1,1) = 0;
      elMat(1,2) = 0;
      elMat(1,3) = 0;
      elMat(1,4) = 0;
      elMat(1,5) = 0;
      elMat(1,6) = 0;
      elMat(1,7) = 0;
      elMat(1,8) = 0;
      elMat(1,9) = 0;
      elMat(2,0) = 0;
      elMat(2,1) = 0;
      elMat(2,2) = 0;
      elMat(2,3) = 0;
      elMat(2,4) = 0;
      elMat(2,5) = 0;
      elMat(2,6) = 0;
      elMat(2,7) = 0;
      elMat(2,8) = 0;
      elMat(2,9) = 0;
      elMat(3,0) = 0;
      elMat(3,1) = 0;
      elMat(3,2) = 0;
      elMat(3,3) = 0;
      elMat(3,4) = 0;
      elMat(3,5) = 0;
      elMat(3,6) = 0;
      elMat(3,7) = 0;
      elMat(3,8) = 0;
      elMat(3,9) = 0;
      elMat(4,0) = 0;
      elMat(4,1) = 0;
      elMat(4,2) = 0;
      elMat(4,3) = 0;
      elMat(4,4) = 0;
      elMat(4,5) = 0;
      elMat(4,6) = 0;
      elMat(4,7) = 0;
      elMat(4,8) = 0;
      elMat(4,9) = 0;
      elMat(5,0) = 0;
      elMat(5,1) = 0;
      elMat(5,2) = 0;
      elMat(5,3) = 0;
      elMat(5,4) = 0;
      elMat(5,5) = 0;
      elMat(5,6) = 0;
      elMat(5,7) = 0;
      elMat(5,8) = 0;
      elMat(5,9) = 0;
      elMat(6,0) = 0;
      elMat(6,1) = 0;
      elMat(6,2) = 0;
      elMat(6,3) = 0;
      elMat(6,4) = 0;
      elMat(6,5) = 0;
      elMat(6,6) = 0;
      elMat(6,7) = 0;
      elMat(6,8) = 0;
      elMat(6,9) = 0;
      elMat(7,0) = 0;
      elMat(7,1) = 0;
      elMat(7,2) = 0;
      elMat(7,3) = 0;
      elMat(7,4) = 0;
      elMat(7,5) = 0;
      elMat(7,6) = 0;
      elMat(7,7) = 0;
      elMat(7,8) = 0;
      elMat(7,9) = 0;
      elMat(8,0) = 0;
      elMat(8,1) = 0;
      elMat(8,2) = 0;
      elMat(8,3) = 0;
      elMat(8,4) = 0;
      elMat(8,5) = 0;
      elMat(8,6) = 0;
      elMat(8,7) = 0;
      elMat(8,8) = 0;
      elMat(8,9) = 0;
      elMat(9,0) = 0;
      elMat(9,1) = 0;
      elMat(9,2) = 0;
      elMat(9,3) = 0;
      elMat(9,4) = 0;
      elMat(9,5) = 0;
      elMat(9,6) = 0;
      elMat(9,7) = 0;
      elMat(9,8) = 0;
      elMat(9,9) = 0;
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.5854101966249684;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.585410196624968*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.585410196624968*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.585410196624968*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.5854101966249684;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.585410196624968*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.585410196624968*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.585410196624968*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.5854101966249684;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.585410196624968*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.585410196624968*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.585410196624968*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.585410196624968*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.585410196624968*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.585410196624968*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
   }

};

class P2Form_epsilon_13 : public P2FormHyTeG {
 public:
   void evalQuadraturePoint2D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,3>& coords, const Matrix2r& DF, real_t w, Matrix6r& elMat) const
   {
      WALBERLA_ABORT("Not available in 2D");
   }

   void integrateAll( const std::array< Point3D, 3 >& coords, Matrix6r& elMat ) const final
   {
      WALBERLA_ABORT("Not available in 2D");
   }

   void evalQuadraturePoint3D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,4>& coords, const Matrix3r& DF, real_t w, Matrix10r& elMat) const
   {
      real_t tmp0 = coords[1][0]*coords[3][1];
      real_t tmp1 = coords[1][1]*coords[3][0];
      real_t tmp2 = coords[0][0]*coords[1][1];
      real_t tmp3 = coords[0][1]*coords[1][0];
      real_t tmp4 = tmp2 - tmp3;
      real_t tmp5 = coords[0][1]*coords[3][0];
      real_t tmp6 = coords[0][0]*coords[3][1];
      real_t tmp7 = tmp5 - tmp6;
      real_t tmp8 = tmp0 - tmp1 + tmp4 + tmp7;
      real_t tmp9 = DF(0,0)*DF(1,1);
      real_t tmp10 = DF(0,1)*DF(1,2);
      real_t tmp11 = DF(0,2)*DF(1,0);
      real_t tmp12 = DF(0,0)*DF(1,2);
      real_t tmp13 = DF(0,1)*DF(1,0);
      real_t tmp14 = DF(0,2)*DF(1,1);
      real_t tmp15 = DF(2,0)*tmp10 - DF(2,0)*tmp14 + DF(2,1)*tmp11 - DF(2,1)*tmp12 - DF(2,2)*tmp13 + DF(2,2)*tmp9;
      real_t tmp16 = coords[0][0]*coords[3][2];
      real_t tmp17 = coords[0][1]*coords[1][2];
      real_t tmp18 = coords[0][2]*coords[1][0];
      real_t tmp19 = coords[0][2]*coords[3][1];
      real_t tmp20 = coords[1][1]*coords[3][2];
      real_t tmp21 = coords[1][2]*coords[3][0];
      real_t tmp22 = coords[0][0]*coords[1][2];
      real_t tmp23 = coords[0][1]*coords[3][2];
      real_t tmp24 = coords[0][2]*coords[1][1];
      real_t tmp25 = coords[0][2]*coords[3][0];
      real_t tmp26 = coords[1][0]*coords[3][2];
      real_t tmp27 = coords[1][2]*coords[3][1];
      real_t tmp28 = -coords[0][2]*tmp0 + coords[0][2]*tmp1 - coords[1][2]*tmp5 + coords[1][2]*tmp6 + coords[2][0]*tmp17 + coords[2][0]*tmp19 + coords[2][0]*tmp20 - coords[2][0]*tmp23 - coords[2][0]*tmp24 - coords[2][0]*tmp27 + coords[2][1]*tmp16 + coords[2][1]*tmp18 + coords[2][1]*tmp21 - coords[2][1]*tmp22 - coords[2][1]*tmp25 - coords[2][1]*tmp26 + coords[2][2]*tmp0 - coords[2][2]*tmp1 + coords[2][2]*tmp2 - coords[2][2]*tmp3 + coords[2][2]*tmp5 - coords[2][2]*tmp6 - coords[3][2]*tmp2 + coords[3][2]*tmp3;
      real_t tmp29 = 1/(tmp15*tmp28);
      real_t tmp30 = tmp29*(DF(1,0)*DF(2,1) - DF(1,1)*DF(2,0));
      real_t tmp31 = -tmp18 + tmp22;
      real_t tmp32 = -tmp16 + tmp25;
      real_t tmp33 = -tmp21 + tmp26 + tmp31 + tmp32;
      real_t tmp34 = tmp29*(DF(1,0)*DF(2,2) - DF(1,2)*DF(2,0));
      real_t tmp35 = tmp17 - tmp24;
      real_t tmp36 = tmp19 - tmp23;
      real_t tmp37 = tmp20 - tmp27 + tmp35 + tmp36;
      real_t tmp38 = tmp29*(DF(1,1)*DF(2,2) - DF(1,2)*DF(2,1));
      real_t tmp39 = tmp30*tmp8 + tmp33*tmp34 + tmp37*tmp38;
      real_t tmp40 = 4.0*x_hat[0];
      real_t tmp41 = 4.0*x_hat[1];
      real_t tmp42 = 4.0*x_hat[2];
      real_t tmp43 = 0.5*tmp40 + 0.5*tmp41 + 0.5*tmp42 - 1.5;
      real_t tmp44 = coords[0][1]*coords[2][0];
      real_t tmp45 = coords[0][0]*coords[2][1];
      real_t tmp46 = coords[1][0]*coords[2][1] - coords[1][1]*coords[2][0] + tmp4 + tmp44 - tmp45;
      real_t tmp47 = coords[0][2]*coords[2][0];
      real_t tmp48 = coords[0][0]*coords[2][2];
      real_t tmp49 = coords[1][0]*coords[2][2] - coords[1][2]*coords[2][0] + tmp31 + tmp47 - tmp48;
      real_t tmp50 = coords[0][2]*coords[2][1];
      real_t tmp51 = coords[0][1]*coords[2][2];
      real_t tmp52 = coords[1][1]*coords[2][2] - coords[1][2]*coords[2][1] + tmp35 + tmp50 - tmp51;
      real_t tmp53 = -tmp30*tmp46 - tmp34*tmp49 - tmp38*tmp52;
      real_t tmp54 = coords[2][0]*coords[3][1] - coords[2][1]*coords[3][0] - tmp44 + tmp45 + tmp7;
      real_t tmp55 = coords[2][0]*coords[3][2] - coords[2][2]*coords[3][0] + tmp32 - tmp47 + tmp48;
      real_t tmp56 = coords[2][1]*coords[3][2] - coords[2][2]*coords[3][1] + tmp36 - tmp50 + tmp51;
      real_t tmp57 = -tmp30*tmp54 - tmp34*tmp55 - tmp38*tmp56;
      real_t tmp58 = tmp39*tmp43 + tmp43*tmp53 + tmp43*tmp57;
      real_t tmp59 = tmp29*(-tmp13 + tmp9);
      real_t tmp60 = tmp29*(-tmp11 + tmp12);
      real_t tmp61 = tmp29*(tmp10 - tmp14);
      real_t tmp62 = tmp33*tmp60 + tmp37*tmp61 + tmp59*tmp8;
      real_t tmp63 = -tmp46*tmp59 - tmp49*tmp60 - tmp52*tmp61;
      real_t tmp64 = -tmp54*tmp59 - tmp55*tmp60 - tmp56*tmp61;
      real_t tmp65 = tmp43*tmp62 + tmp43*tmp63 + tmp43*tmp64;
      real_t tmp66 = std::fabs(tmp15*tmp28);
      real_t tmp67 = 4*tmp66;
      real_t tmp68 = tmp65*tmp67;
      real_t tmp69 = tmp65*tmp66;
      real_t tmp70 = 2.0*tmp69;
      real_t tmp71 = tmp40 - 1.0;
      real_t tmp72 = tmp57*tmp71;
      real_t tmp73 = tmp41 - 1.0;
      real_t tmp74 = tmp39*tmp73;
      real_t tmp75 = tmp42 - 1.0;
      real_t tmp76 = 2.0*tmp53;
      real_t tmp77 = tmp75*tmp76;
      real_t tmp78 = 2.0*x_hat[2];
      real_t tmp79 = tmp39*tmp78;
      real_t tmp80 = tmp76*x_hat[1];
      real_t tmp81 = tmp79 + tmp80;
      real_t tmp82 = tmp76*x_hat[0];
      real_t tmp83 = tmp57*tmp78;
      real_t tmp84 = tmp82 + tmp83;
      real_t tmp85 = 2.0*x_hat[0];
      real_t tmp86 = tmp39*tmp85;
      real_t tmp87 = 2.0*x_hat[1];
      real_t tmp88 = tmp57*tmp87;
      real_t tmp89 = tmp86 + tmp88;
      real_t tmp90 = -tmp41;
      real_t tmp91 = 4.0 - tmp40;
      real_t tmp92 = 0.5*tmp90 + 0.5*tmp91 - 4.0*x_hat[2];
      real_t tmp93 = tmp53*tmp92 - tmp79 - tmp83;
      real_t tmp94 = -tmp42;
      real_t tmp95 = 0.5*tmp91 + 0.5*tmp94 - 4.0*x_hat[1];
      real_t tmp96 = tmp39*tmp95 - tmp80 - tmp88;
      real_t tmp97 = 0.5*tmp90 + 0.5*tmp94 - 4.0*x_hat[0] + 2.0;
      real_t tmp98 = tmp57*tmp97 - tmp82 - tmp86;
      real_t tmp99 = 2.0*tmp58;
      real_t tmp100 = tmp64*tmp66;
      real_t tmp101 = tmp100*tmp71;
      real_t tmp102 = 1.0*tmp101;
      real_t tmp103 = tmp53*tmp75;
      real_t tmp104 = 2.0*tmp101;
      real_t tmp105 = tmp62*tmp66;
      real_t tmp106 = tmp105*tmp73;
      real_t tmp107 = 1.0*tmp106;
      real_t tmp108 = 2.0*tmp106;
      real_t tmp109 = tmp63*tmp66;
      real_t tmp110 = tmp109*tmp75;
      real_t tmp111 = 1.0*tmp110;
      real_t tmp112 = 2.0*tmp110;
      real_t tmp113 = tmp62*tmp78;
      real_t tmp114 = tmp63*tmp87;
      real_t tmp115 = tmp113 + tmp114;
      real_t tmp116 = tmp115*tmp67;
      real_t tmp117 = tmp115*tmp66;
      real_t tmp118 = 2.0*tmp117;
      real_t tmp119 = tmp63*tmp85;
      real_t tmp120 = tmp64*tmp78;
      real_t tmp121 = tmp119 + tmp120;
      real_t tmp122 = tmp121*tmp67;
      real_t tmp123 = tmp121*tmp66;
      real_t tmp124 = 2.0*tmp123;
      real_t tmp125 = tmp62*tmp85;
      real_t tmp126 = tmp64*tmp87;
      real_t tmp127 = tmp125 + tmp126;
      real_t tmp128 = tmp127*tmp67;
      real_t tmp129 = tmp127*tmp66;
      real_t tmp130 = 2.0*tmp129;
      real_t tmp131 = -tmp113 - tmp120 + tmp63*tmp92;
      real_t tmp132 = tmp131*tmp67;
      real_t tmp133 = tmp131*tmp66;
      real_t tmp134 = 2.0*tmp133;
      real_t tmp135 = -tmp114 - tmp126 + tmp62*tmp95;
      real_t tmp136 = tmp135*tmp67;
      real_t tmp137 = tmp135*tmp66;
      real_t tmp138 = 2.0*tmp137;
      real_t tmp139 = -tmp119 - tmp125 + tmp64*tmp97;
      real_t tmp140 = tmp139*tmp67;
      real_t tmp141 = tmp139*tmp66;
      real_t tmp142 = 2.0*tmp141;
      elMat(0,0) += w * tmp58*tmp68;
      elMat(0,1) += w * tmp70*tmp72;
      elMat(0,2) += w * tmp70*tmp74;
      elMat(0,3) += w * tmp69*tmp77;
      elMat(0,4) += w * tmp68*tmp81;
      elMat(0,5) += w * tmp68*tmp84;
      elMat(0,6) += w * tmp68*tmp89;
      elMat(0,7) += w * tmp68*tmp93;
      elMat(0,8) += w * tmp68*tmp96;
      elMat(0,9) += w * tmp68*tmp98;
      elMat(1,0) += w * tmp101*tmp99;
      elMat(1,1) += w * 16.0*tmp100*tmp57*std::pow(x_hat[0] - 0.25, 2);
      elMat(1,2) += w * tmp102*tmp74;
      elMat(1,3) += w * tmp102*tmp103;
      elMat(1,4) += w * tmp104*tmp81;
      elMat(1,5) += w * tmp104*tmp84;
      elMat(1,6) += w * tmp104*tmp89;
      elMat(1,7) += w * tmp104*tmp93;
      elMat(1,8) += w * tmp104*tmp96;
      elMat(1,9) += w * tmp104*tmp98;
      elMat(2,0) += w * tmp106*tmp99;
      elMat(2,1) += w * tmp107*tmp72;
      elMat(2,2) += w * 16.0*tmp105*tmp39*std::pow(x_hat[1] - 0.25, 2);
      elMat(2,3) += w * tmp103*tmp107;
      elMat(2,4) += w * tmp108*tmp81;
      elMat(2,5) += w * tmp108*tmp84;
      elMat(2,6) += w * tmp108*tmp89;
      elMat(2,7) += w * tmp108*tmp93;
      elMat(2,8) += w * tmp108*tmp96;
      elMat(2,9) += w * tmp108*tmp98;
      elMat(3,0) += w * tmp110*tmp99;
      elMat(3,1) += w * tmp111*tmp72;
      elMat(3,2) += w * tmp111*tmp74;
      elMat(3,3) += w * 16.0*tmp109*tmp53*std::pow(x_hat[2] - 0.25, 2);
      elMat(3,4) += w * tmp112*tmp81;
      elMat(3,5) += w * tmp112*tmp84;
      elMat(3,6) += w * tmp112*tmp89;
      elMat(3,7) += w * tmp112*tmp93;
      elMat(3,8) += w * tmp112*tmp96;
      elMat(3,9) += w * tmp112*tmp98;
      elMat(4,0) += w * tmp116*tmp58;
      elMat(4,1) += w * tmp118*tmp72;
      elMat(4,2) += w * tmp118*tmp74;
      elMat(4,3) += w * tmp117*tmp77;
      elMat(4,4) += w * tmp116*tmp81;
      elMat(4,5) += w * tmp116*tmp84;
      elMat(4,6) += w * tmp116*tmp89;
      elMat(4,7) += w * tmp116*tmp93;
      elMat(4,8) += w * tmp116*tmp96;
      elMat(4,9) += w * tmp116*tmp98;
      elMat(5,0) += w * tmp122*tmp58;
      elMat(5,1) += w * tmp124*tmp72;
      elMat(5,2) += w * tmp124*tmp74;
      elMat(5,3) += w * tmp123*tmp77;
      elMat(5,4) += w * tmp122*tmp81;
      elMat(5,5) += w * tmp122*tmp84;
      elMat(5,6) += w * tmp122*tmp89;
      elMat(5,7) += w * tmp122*tmp93;
      elMat(5,8) += w * tmp122*tmp96;
      elMat(5,9) += w * tmp122*tmp98;
      elMat(6,0) += w * tmp128*tmp58;
      elMat(6,1) += w * tmp130*tmp72;
      elMat(6,2) += w * tmp130*tmp74;
      elMat(6,3) += w * tmp129*tmp77;
      elMat(6,4) += w * tmp128*tmp81;
      elMat(6,5) += w * tmp128*tmp84;
      elMat(6,6) += w * tmp128*tmp89;
      elMat(6,7) += w * tmp128*tmp93;
      elMat(6,8) += w * tmp128*tmp96;
      elMat(6,9) += w * tmp128*tmp98;
      elMat(7,0) += w * tmp132*tmp58;
      elMat(7,1) += w * tmp134*tmp72;
      elMat(7,2) += w * tmp134*tmp74;
      elMat(7,3) += w * tmp133*tmp77;
      elMat(7,4) += w * tmp132*tmp81;
      elMat(7,5) += w * tmp132*tmp84;
      elMat(7,6) += w * tmp132*tmp89;
      elMat(7,7) += w * tmp132*tmp93;
      elMat(7,8) += w * tmp132*tmp96;
      elMat(7,9) += w * tmp132*tmp98;
      elMat(8,0) += w * tmp136*tmp58;
      elMat(8,1) += w * tmp138*tmp72;
      elMat(8,2) += w * tmp138*tmp74;
      elMat(8,3) += w * tmp137*tmp77;
      elMat(8,4) += w * tmp136*tmp81;
      elMat(8,5) += w * tmp136*tmp84;
      elMat(8,6) += w * tmp136*tmp89;
      elMat(8,7) += w * tmp136*tmp93;
      elMat(8,8) += w * tmp136*tmp96;
      elMat(8,9) += w * tmp136*tmp98;
      elMat(9,0) += w * tmp140*tmp58;
      elMat(9,1) += w * tmp142*tmp72;
      elMat(9,2) += w * tmp142*tmp74;
      elMat(9,3) += w * tmp141*tmp77;
      elMat(9,4) += w * tmp140*tmp81;
      elMat(9,5) += w * tmp140*tmp84;
      elMat(9,6) += w * tmp140*tmp89;
      elMat(9,7) += w * tmp140*tmp93;
      elMat(9,8) += w * tmp140*tmp96;
      elMat(9,9) += w * tmp140*tmp98;
   }

   void integrateAll( const std::array< Point3D, 4 >& coords, Matrix10r& elMat ) const final
   {
      Point3D x_hat;
      Point3D x_tilde;
      Matrix3r DF;
      elMat(0,0) = 0;
      elMat(0,1) = 0;
      elMat(0,2) = 0;
      elMat(0,3) = 0;
      elMat(0,4) = 0;
      elMat(0,5) = 0;
      elMat(0,6) = 0;
      elMat(0,7) = 0;
      elMat(0,8) = 0;
      elMat(0,9) = 0;
      elMat(1,0) = 0;
      elMat(1,1) = 0;
      elMat(1,2) = 0;
      elMat(1,3) = 0;
      elMat(1,4) = 0;
      elMat(1,5) = 0;
      elMat(1,6) = 0;
      elMat(1,7) = 0;
      elMat(1,8) = 0;
      elMat(1,9) = 0;
      elMat(2,0) = 0;
      elMat(2,1) = 0;
      elMat(2,2) = 0;
      elMat(2,3) = 0;
      elMat(2,4) = 0;
      elMat(2,5) = 0;
      elMat(2,6) = 0;
      elMat(2,7) = 0;
      elMat(2,8) = 0;
      elMat(2,9) = 0;
      elMat(3,0) = 0;
      elMat(3,1) = 0;
      elMat(3,2) = 0;
      elMat(3,3) = 0;
      elMat(3,4) = 0;
      elMat(3,5) = 0;
      elMat(3,6) = 0;
      elMat(3,7) = 0;
      elMat(3,8) = 0;
      elMat(3,9) = 0;
      elMat(4,0) = 0;
      elMat(4,1) = 0;
      elMat(4,2) = 0;
      elMat(4,3) = 0;
      elMat(4,4) = 0;
      elMat(4,5) = 0;
      elMat(4,6) = 0;
      elMat(4,7) = 0;
      elMat(4,8) = 0;
      elMat(4,9) = 0;
      elMat(5,0) = 0;
      elMat(5,1) = 0;
      elMat(5,2) = 0;
      elMat(5,3) = 0;
      elMat(5,4) = 0;
      elMat(5,5) = 0;
      elMat(5,6) = 0;
      elMat(5,7) = 0;
      elMat(5,8) = 0;
      elMat(5,9) = 0;
      elMat(6,0) = 0;
      elMat(6,1) = 0;
      elMat(6,2) = 0;
      elMat(6,3) = 0;
      elMat(6,4) = 0;
      elMat(6,5) = 0;
      elMat(6,6) = 0;
      elMat(6,7) = 0;
      elMat(6,8) = 0;
      elMat(6,9) = 0;
      elMat(7,0) = 0;
      elMat(7,1) = 0;
      elMat(7,2) = 0;
      elMat(7,3) = 0;
      elMat(7,4) = 0;
      elMat(7,5) = 0;
      elMat(7,6) = 0;
      elMat(7,7) = 0;
      elMat(7,8) = 0;
      elMat(7,9) = 0;
      elMat(8,0) = 0;
      elMat(8,1) = 0;
      elMat(8,2) = 0;
      elMat(8,3) = 0;
      elMat(8,4) = 0;
      elMat(8,5) = 0;
      elMat(8,6) = 0;
      elMat(8,7) = 0;
      elMat(8,8) = 0;
      elMat(8,9) = 0;
      elMat(9,0) = 0;
      elMat(9,1) = 0;
      elMat(9,2) = 0;
      elMat(9,3) = 0;
      elMat(9,4) = 0;
      elMat(9,5) = 0;
      elMat(9,6) = 0;
      elMat(9,7) = 0;
      elMat(9,8) = 0;
      elMat(9,9) = 0;
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.5854101966249684;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.585410196624968*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.585410196624968*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.585410196624968*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.5854101966249684;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.585410196624968*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.585410196624968*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.585410196624968*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.5854101966249684;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.585410196624968*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.585410196624968*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.585410196624968*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.585410196624968*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.585410196624968*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.585410196624968*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
   }

};

class P2Form_epsilon_21 : public P2FormHyTeG {
 public:
   void evalQuadraturePoint2D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,3>& coords, const Matrix2r& DF, real_t w, Matrix6r& elMat) const
   {
      real_t tmp0 = coords[0][0] - coords[2][0];
      real_t tmp1 = DF(0,0)*tmp0;
      real_t tmp2 = coords[0][1] - coords[2][1];
      real_t tmp3 = DF(0,1)*tmp2;
      real_t tmp4 = coords[0][0] - coords[1][0];
      real_t tmp5 = coords[0][1] - coords[1][1];
      real_t tmp6 = DF(0,0)*tmp4 + DF(0,1)*tmp5;
      real_t tmp7 = -tmp1 - tmp3 + tmp6;
      real_t tmp8 = DF(1,0)*tmp0;
      real_t tmp9 = DF(1,1)*tmp2;
      real_t tmp10 = DF(1,0)*tmp4 + DF(1,1)*tmp5;
      real_t tmp11 = DF(0,0)*DF(1,1) - DF(0,1)*DF(1,0);
      real_t tmp12 = coords[0][0]*coords[1][1] - coords[0][0]*coords[2][1] - coords[0][1]*coords[1][0] + coords[0][1]*coords[2][0] + coords[1][0]*coords[2][1] - coords[1][1]*coords[2][0];
      real_t tmp13 = std::fabs(tmp11*tmp12)/(std::pow(tmp11, 2)*std::pow(tmp12, 2));
      real_t tmp14 = tmp13*(tmp10 - tmp8 - tmp9);
      real_t tmp15 = tmp1 + tmp3;
      real_t tmp16 = 4.0*x_hat[0];
      real_t tmp17 = tmp16 - 1.0;
      real_t tmp18 = tmp15*tmp17;
      real_t tmp19 = 4.0*x_hat[1];
      real_t tmp20 = tmp16 + tmp19 - 3.0;
      real_t tmp21 = tmp14*tmp20;
      real_t tmp22 = 1.0*tmp21;
      real_t tmp23 = tmp19 - 1.0;
      real_t tmp24 = tmp23*tmp6;
      real_t tmp25 = tmp15*x_hat[1];
      real_t tmp26 = tmp6*x_hat[0];
      real_t tmp27 = tmp25 - tmp26;
      real_t tmp28 = 4.0*tmp27;
      real_t tmp29 = 0.5*tmp16 + 4.0*x_hat[1] - 2.0;
      real_t tmp30 = -2.0*tmp25 + tmp29*tmp6;
      real_t tmp31 = 2.0*tmp21;
      real_t tmp32 = 0.5*tmp19 + 4.0*x_hat[0] - 2.0;
      real_t tmp33 = -tmp15*tmp32 + 2.0*tmp26;
      real_t tmp34 = tmp20*tmp7;
      real_t tmp35 = tmp8 + tmp9;
      real_t tmp36 = tmp13*tmp35;
      real_t tmp37 = tmp17*tmp36;
      real_t tmp38 = 1.0*tmp37;
      real_t tmp39 = 2.0*tmp37;
      real_t tmp40 = tmp10*tmp13;
      real_t tmp41 = tmp23*tmp40;
      real_t tmp42 = 1.0*tmp41;
      real_t tmp43 = 2.0*tmp41;
      real_t tmp44 = tmp10*x_hat[0];
      real_t tmp45 = tmp35*x_hat[1];
      real_t tmp46 = tmp13*(tmp44 - tmp45);
      real_t tmp47 = 4.0*tmp46;
      real_t tmp48 = 8.0*tmp46;
      real_t tmp49 = tmp13*(-tmp10*tmp29 + 2.0*tmp45);
      real_t tmp50 = 2.0*tmp49;
      real_t tmp51 = 8.0*tmp27;
      real_t tmp52 = 4*tmp49;
      real_t tmp53 = tmp13*(tmp32*tmp35 - 2.0*tmp44);
      real_t tmp54 = 2.0*tmp53;
      real_t tmp55 = 4*tmp53;
      elMat(0,0) += w * -16.0*tmp14*tmp7*std::pow(x_hat[0] + x_hat[1] - 0.75, 2);
      elMat(0,1) += w * tmp18*tmp22;
      elMat(0,2) += w * -tmp22*tmp24;
      elMat(0,3) += w * tmp21*tmp28;
      elMat(0,4) += w * tmp30*tmp31;
      elMat(0,5) += w * tmp31*tmp33;
      elMat(1,0) += w * tmp34*tmp38;
      elMat(1,1) += w * -16.0*tmp15*tmp36*std::pow(x_hat[0] - 0.25, 2);
      elMat(1,2) += w * tmp24*tmp38;
      elMat(1,3) += w * -tmp28*tmp37;
      elMat(1,4) += w * -tmp30*tmp39;
      elMat(1,5) += w * -tmp33*tmp39;
      elMat(2,0) += w * -tmp34*tmp42;
      elMat(2,1) += w * tmp18*tmp42;
      elMat(2,2) += w * -16.0*tmp40*tmp6*std::pow(x_hat[1] - 0.25, 2);
      elMat(2,3) += w * tmp28*tmp41;
      elMat(2,4) += w * tmp30*tmp43;
      elMat(2,5) += w * tmp33*tmp43;
      elMat(3,0) += w * -tmp34*tmp47;
      elMat(3,1) += w * tmp18*tmp47;
      elMat(3,2) += w * -tmp24*tmp47;
      elMat(3,3) += w * 16.0*tmp27*tmp46;
      elMat(3,4) += w * tmp30*tmp48;
      elMat(3,5) += w * tmp33*tmp48;
      elMat(4,0) += w * -tmp34*tmp50;
      elMat(4,1) += w * tmp18*tmp50;
      elMat(4,2) += w * -tmp24*tmp50;
      elMat(4,3) += w * tmp49*tmp51;
      elMat(4,4) += w * tmp30*tmp52;
      elMat(4,5) += w * tmp33*tmp52;
      elMat(5,0) += w * -tmp34*tmp54;
      elMat(5,1) += w * tmp18*tmp54;
      elMat(5,2) += w * -tmp24*tmp54;
      elMat(5,3) += w * tmp51*tmp53;
      elMat(5,4) += w * tmp30*tmp55;
      elMat(5,5) += w * tmp33*tmp55;
   }

   void integrateAll( const std::array< Point3D, 3 >& coords, Matrix6r& elMat ) const final
   {
      Point3D x_hat;
      Point3D x_tilde;
      Matrix2r DF;
      elMat(0,0) = 0;
      elMat(0,1) = 0;
      elMat(0,2) = 0;
      elMat(0,3) = 0;
      elMat(0,4) = 0;
      elMat(0,5) = 0;
      elMat(1,0) = 0;
      elMat(1,1) = 0;
      elMat(1,2) = 0;
      elMat(1,3) = 0;
      elMat(1,4) = 0;
      elMat(1,5) = 0;
      elMat(2,0) = 0;
      elMat(2,1) = 0;
      elMat(2,2) = 0;
      elMat(2,3) = 0;
      elMat(2,4) = 0;
      elMat(2,5) = 0;
      elMat(3,0) = 0;
      elMat(3,1) = 0;
      elMat(3,2) = 0;
      elMat(3,3) = 0;
      elMat(3,4) = 0;
      elMat(3,5) = 0;
      elMat(4,0) = 0;
      elMat(4,1) = 0;
      elMat(4,2) = 0;
      elMat(4,3) = 0;
      elMat(4,4) = 0;
      elMat(4,5) = 0;
      elMat(5,0) = 0;
      elMat(5,1) = 0;
      elMat(5,2) = 0;
      elMat(5,3) = 0;
      elMat(5,4) = 0;
      elMat(5,5) = 0;
      x_hat[0] = 0.5;
      x_hat[1] = 0.0;
      x_tilde[0] = 0.5*coords[0][0] + 0.5*coords[1][0];
      x_tilde[1] = 0.5*coords[0][1] + 0.5*coords[1][1];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint2D(x_hat, x_tilde, coords, DF, 0.16666666666666666, elMat);
      x_hat[0] = 0.0;
      x_hat[1] = 0.5;
      x_tilde[0] = 0.5*coords[0][0] + 0.5*coords[2][0];
      x_tilde[1] = 0.5*coords[0][1] + 0.5*coords[2][1];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint2D(x_hat, x_tilde, coords, DF, 0.16666666666666666, elMat);
      x_hat[0] = 0.5;
      x_hat[1] = 0.5;
      x_tilde[0] = 0.5*coords[1][0] + 0.5*coords[2][0];
      x_tilde[1] = 0.5*coords[1][1] + 0.5*coords[2][1];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint2D(x_hat, x_tilde, coords, DF, 0.16666666666666666, elMat);
   }

   void evalQuadraturePoint3D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,4>& coords, const Matrix3r& DF, real_t w, Matrix10r& elMat) const
   {
      real_t tmp0 = coords[0][1]*coords[2][0];
      real_t tmp1 = coords[1][0]*coords[2][1];
      real_t tmp2 = coords[0][0]*coords[2][1];
      real_t tmp3 = coords[1][1]*coords[2][0];
      real_t tmp4 = coords[0][0]*coords[1][1];
      real_t tmp5 = coords[0][1]*coords[1][0];
      real_t tmp6 = tmp4 - tmp5;
      real_t tmp7 = tmp0 + tmp1 - tmp2 - tmp3 + tmp6;
      real_t tmp8 = DF(0,0)*DF(2,1);
      real_t tmp9 = DF(0,1)*DF(2,0);
      real_t tmp10 = DF(0,0)*DF(2,2);
      real_t tmp11 = DF(0,2)*DF(2,1);
      real_t tmp12 = DF(0,1)*DF(2,2);
      real_t tmp13 = DF(0,2)*DF(2,0);
      real_t tmp14 = DF(1,0)*tmp11 - DF(1,0)*tmp12 + DF(1,1)*tmp10 - DF(1,1)*tmp13 - DF(1,2)*tmp8 + DF(1,2)*tmp9;
      real_t tmp15 = coords[0][0]*coords[1][2];
      real_t tmp16 = coords[0][1]*coords[2][2];
      real_t tmp17 = coords[0][2]*coords[1][1];
      real_t tmp18 = coords[0][2]*coords[2][0];
      real_t tmp19 = coords[1][0]*coords[2][2];
      real_t tmp20 = coords[1][2]*coords[2][1];
      real_t tmp21 = coords[0][0]*coords[2][2];
      real_t tmp22 = coords[0][1]*coords[1][2];
      real_t tmp23 = coords[0][2]*coords[1][0];
      real_t tmp24 = coords[0][2]*coords[2][1];
      real_t tmp25 = coords[1][1]*coords[2][2];
      real_t tmp26 = coords[1][2]*coords[2][0];
      real_t tmp27 = coords[0][2]*tmp1 - coords[0][2]*tmp3 + coords[1][2]*tmp0 - coords[1][2]*tmp2 + coords[2][2]*tmp4 - coords[2][2]*tmp5 + coords[3][0]*tmp16 + coords[3][0]*tmp17 + coords[3][0]*tmp20 - coords[3][0]*tmp22 - coords[3][0]*tmp24 - coords[3][0]*tmp25 + coords[3][1]*tmp15 + coords[3][1]*tmp18 + coords[3][1]*tmp19 - coords[3][1]*tmp21 - coords[3][1]*tmp23 - coords[3][1]*tmp26 - coords[3][2]*tmp0 - coords[3][2]*tmp1 + coords[3][2]*tmp2 + coords[3][2]*tmp3 - coords[3][2]*tmp4 + coords[3][2]*tmp5;
      real_t tmp28 = 1/(tmp14*tmp27);
      real_t tmp29 = tmp28*(tmp8 - tmp9);
      real_t tmp30 = tmp15 - tmp23;
      real_t tmp31 = tmp18 + tmp19 - tmp21 - tmp26 + tmp30;
      real_t tmp32 = tmp28*(tmp10 - tmp13);
      real_t tmp33 = -tmp17 + tmp22;
      real_t tmp34 = -tmp16 - tmp20 + tmp24 + tmp25 + tmp33;
      real_t tmp35 = tmp28*(-tmp11 + tmp12);
      real_t tmp36 = tmp29*tmp7 + tmp31*tmp32 + tmp34*tmp35;
      real_t tmp37 = 4.0*x_hat[0];
      real_t tmp38 = 4.0*x_hat[1];
      real_t tmp39 = 4.0*x_hat[2];
      real_t tmp40 = 0.5*tmp37 + 0.5*tmp38 + 0.5*tmp39 - 1.5;
      real_t tmp41 = -coords[0][0]*coords[3][1] + coords[0][1]*coords[3][0];
      real_t tmp42 = coords[2][0]*coords[3][1] - coords[2][1]*coords[3][0] - tmp0 + tmp2 + tmp41;
      real_t tmp43 = -coords[0][0]*coords[3][2] + coords[0][2]*coords[3][0];
      real_t tmp44 = coords[2][0]*coords[3][2] - coords[2][2]*coords[3][0] - tmp18 + tmp21 + tmp43;
      real_t tmp45 = -coords[0][1]*coords[3][2] + coords[0][2]*coords[3][1];
      real_t tmp46 = coords[2][1]*coords[3][2] - coords[2][2]*coords[3][1] + tmp16 - tmp24 + tmp45;
      real_t tmp47 = tmp29*tmp42 + tmp32*tmp44 + tmp35*tmp46;
      real_t tmp48 = coords[1][0]*coords[3][1] - coords[1][1]*coords[3][0] + tmp41 + tmp6;
      real_t tmp49 = coords[1][0]*coords[3][2] - coords[1][2]*coords[3][0] + tmp30 + tmp43;
      real_t tmp50 = coords[1][1]*coords[3][2] - coords[1][2]*coords[3][1] + tmp33 + tmp45;
      real_t tmp51 = -tmp29*tmp48 - tmp32*tmp49 - tmp35*tmp50;
      real_t tmp52 = tmp36*tmp40 + tmp40*tmp47 + tmp40*tmp51;
      real_t tmp53 = tmp28*(DF(1,0)*DF(2,1) - DF(1,1)*DF(2,0));
      real_t tmp54 = tmp28*(DF(1,0)*DF(2,2) - DF(1,2)*DF(2,0));
      real_t tmp55 = tmp28*(DF(1,1)*DF(2,2) - DF(1,2)*DF(2,1));
      real_t tmp56 = tmp48*tmp53 + tmp49*tmp54 + tmp50*tmp55;
      real_t tmp57 = -tmp31*tmp54 - tmp34*tmp55 - tmp53*tmp7;
      real_t tmp58 = -tmp42*tmp53 - tmp44*tmp54 - tmp46*tmp55;
      real_t tmp59 = tmp40*tmp56 + tmp40*tmp57 + tmp40*tmp58;
      real_t tmp60 = std::fabs(tmp14*tmp27);
      real_t tmp61 = 4*tmp60;
      real_t tmp62 = tmp59*tmp61;
      real_t tmp63 = tmp59*tmp60;
      real_t tmp64 = 2.0*tmp63;
      real_t tmp65 = tmp37 - 1.0;
      real_t tmp66 = tmp47*tmp65;
      real_t tmp67 = tmp38 - 1.0;
      real_t tmp68 = tmp51*tmp67;
      real_t tmp69 = tmp39 - 1.0;
      real_t tmp70 = 2.0*tmp36;
      real_t tmp71 = tmp69*tmp70;
      real_t tmp72 = tmp70*x_hat[1];
      real_t tmp73 = 2.0*x_hat[2];
      real_t tmp74 = tmp51*tmp73;
      real_t tmp75 = tmp72 + tmp74;
      real_t tmp76 = tmp70*x_hat[0];
      real_t tmp77 = tmp47*tmp73;
      real_t tmp78 = tmp76 + tmp77;
      real_t tmp79 = 2.0*x_hat[1];
      real_t tmp80 = tmp47*tmp79;
      real_t tmp81 = 2.0*x_hat[0];
      real_t tmp82 = tmp51*tmp81;
      real_t tmp83 = tmp80 + tmp82;
      real_t tmp84 = -tmp38;
      real_t tmp85 = 4.0 - tmp37;
      real_t tmp86 = 0.5*tmp84 + 0.5*tmp85 - 4.0*x_hat[2];
      real_t tmp87 = tmp36*tmp86 - tmp74 - tmp77;
      real_t tmp88 = -tmp39;
      real_t tmp89 = 0.5*tmp85 + 0.5*tmp88 - 4.0*x_hat[1];
      real_t tmp90 = tmp51*tmp89 - tmp72 - tmp80;
      real_t tmp91 = 0.5*tmp84 + 0.5*tmp88 - 4.0*x_hat[0] + 2.0;
      real_t tmp92 = tmp47*tmp91 - tmp76 - tmp82;
      real_t tmp93 = 2.0*tmp52;
      real_t tmp94 = tmp58*tmp60;
      real_t tmp95 = tmp65*tmp94;
      real_t tmp96 = 1.0*tmp95;
      real_t tmp97 = tmp36*tmp69;
      real_t tmp98 = 2.0*tmp95;
      real_t tmp99 = tmp56*tmp60;
      real_t tmp100 = tmp67*tmp99;
      real_t tmp101 = 1.0*tmp100;
      real_t tmp102 = 2.0*tmp100;
      real_t tmp103 = tmp57*tmp60;
      real_t tmp104 = tmp103*tmp69;
      real_t tmp105 = 1.0*tmp104;
      real_t tmp106 = 2.0*tmp104;
      real_t tmp107 = tmp56*tmp73;
      real_t tmp108 = tmp57*tmp79;
      real_t tmp109 = tmp107 + tmp108;
      real_t tmp110 = tmp109*tmp61;
      real_t tmp111 = tmp109*tmp60;
      real_t tmp112 = 2.0*tmp111;
      real_t tmp113 = tmp57*tmp81;
      real_t tmp114 = tmp58*tmp73;
      real_t tmp115 = tmp113 + tmp114;
      real_t tmp116 = tmp115*tmp61;
      real_t tmp117 = tmp115*tmp60;
      real_t tmp118 = 2.0*tmp117;
      real_t tmp119 = tmp56*tmp81;
      real_t tmp120 = tmp58*tmp79;
      real_t tmp121 = tmp119 + tmp120;
      real_t tmp122 = tmp121*tmp61;
      real_t tmp123 = tmp121*tmp60;
      real_t tmp124 = 2.0*tmp123;
      real_t tmp125 = -tmp107 - tmp114 + tmp57*tmp86;
      real_t tmp126 = tmp125*tmp61;
      real_t tmp127 = tmp125*tmp60;
      real_t tmp128 = 2.0*tmp127;
      real_t tmp129 = -tmp108 - tmp120 + tmp56*tmp89;
      real_t tmp130 = tmp129*tmp61;
      real_t tmp131 = tmp129*tmp60;
      real_t tmp132 = 2.0*tmp131;
      real_t tmp133 = -tmp113 - tmp119 + tmp58*tmp91;
      real_t tmp134 = tmp133*tmp61;
      real_t tmp135 = tmp133*tmp60;
      real_t tmp136 = 2.0*tmp135;
      elMat(0,0) += w * tmp52*tmp62;
      elMat(0,1) += w * tmp64*tmp66;
      elMat(0,2) += w * tmp64*tmp68;
      elMat(0,3) += w * tmp63*tmp71;
      elMat(0,4) += w * tmp62*tmp75;
      elMat(0,5) += w * tmp62*tmp78;
      elMat(0,6) += w * tmp62*tmp83;
      elMat(0,7) += w * tmp62*tmp87;
      elMat(0,8) += w * tmp62*tmp90;
      elMat(0,9) += w * tmp62*tmp92;
      elMat(1,0) += w * tmp93*tmp95;
      elMat(1,1) += w * 16.0*tmp47*tmp94*std::pow(x_hat[0] - 0.25, 2);
      elMat(1,2) += w * tmp68*tmp96;
      elMat(1,3) += w * tmp96*tmp97;
      elMat(1,4) += w * tmp75*tmp98;
      elMat(1,5) += w * tmp78*tmp98;
      elMat(1,6) += w * tmp83*tmp98;
      elMat(1,7) += w * tmp87*tmp98;
      elMat(1,8) += w * tmp90*tmp98;
      elMat(1,9) += w * tmp92*tmp98;
      elMat(2,0) += w * tmp100*tmp93;
      elMat(2,1) += w * tmp101*tmp66;
      elMat(2,2) += w * 16.0*tmp51*tmp99*std::pow(x_hat[1] - 0.25, 2);
      elMat(2,3) += w * tmp101*tmp97;
      elMat(2,4) += w * tmp102*tmp75;
      elMat(2,5) += w * tmp102*tmp78;
      elMat(2,6) += w * tmp102*tmp83;
      elMat(2,7) += w * tmp102*tmp87;
      elMat(2,8) += w * tmp102*tmp90;
      elMat(2,9) += w * tmp102*tmp92;
      elMat(3,0) += w * tmp104*tmp93;
      elMat(3,1) += w * tmp105*tmp66;
      elMat(3,2) += w * tmp105*tmp68;
      elMat(3,3) += w * 16.0*tmp103*tmp36*std::pow(x_hat[2] - 0.25, 2);
      elMat(3,4) += w * tmp106*tmp75;
      elMat(3,5) += w * tmp106*tmp78;
      elMat(3,6) += w * tmp106*tmp83;
      elMat(3,7) += w * tmp106*tmp87;
      elMat(3,8) += w * tmp106*tmp90;
      elMat(3,9) += w * tmp106*tmp92;
      elMat(4,0) += w * tmp110*tmp52;
      elMat(4,1) += w * tmp112*tmp66;
      elMat(4,2) += w * tmp112*tmp68;
      elMat(4,3) += w * tmp111*tmp71;
      elMat(4,4) += w * tmp110*tmp75;
      elMat(4,5) += w * tmp110*tmp78;
      elMat(4,6) += w * tmp110*tmp83;
      elMat(4,7) += w * tmp110*tmp87;
      elMat(4,8) += w * tmp110*tmp90;
      elMat(4,9) += w * tmp110*tmp92;
      elMat(5,0) += w * tmp116*tmp52;
      elMat(5,1) += w * tmp118*tmp66;
      elMat(5,2) += w * tmp118*tmp68;
      elMat(5,3) += w * tmp117*tmp71;
      elMat(5,4) += w * tmp116*tmp75;
      elMat(5,5) += w * tmp116*tmp78;
      elMat(5,6) += w * tmp116*tmp83;
      elMat(5,7) += w * tmp116*tmp87;
      elMat(5,8) += w * tmp116*tmp90;
      elMat(5,9) += w * tmp116*tmp92;
      elMat(6,0) += w * tmp122*tmp52;
      elMat(6,1) += w * tmp124*tmp66;
      elMat(6,2) += w * tmp124*tmp68;
      elMat(6,3) += w * tmp123*tmp71;
      elMat(6,4) += w * tmp122*tmp75;
      elMat(6,5) += w * tmp122*tmp78;
      elMat(6,6) += w * tmp122*tmp83;
      elMat(6,7) += w * tmp122*tmp87;
      elMat(6,8) += w * tmp122*tmp90;
      elMat(6,9) += w * tmp122*tmp92;
      elMat(7,0) += w * tmp126*tmp52;
      elMat(7,1) += w * tmp128*tmp66;
      elMat(7,2) += w * tmp128*tmp68;
      elMat(7,3) += w * tmp127*tmp71;
      elMat(7,4) += w * tmp126*tmp75;
      elMat(7,5) += w * tmp126*tmp78;
      elMat(7,6) += w * tmp126*tmp83;
      elMat(7,7) += w * tmp126*tmp87;
      elMat(7,8) += w * tmp126*tmp90;
      elMat(7,9) += w * tmp126*tmp92;
      elMat(8,0) += w * tmp130*tmp52;
      elMat(8,1) += w * tmp132*tmp66;
      elMat(8,2) += w * tmp132*tmp68;
      elMat(8,3) += w * tmp131*tmp71;
      elMat(8,4) += w * tmp130*tmp75;
      elMat(8,5) += w * tmp130*tmp78;
      elMat(8,6) += w * tmp130*tmp83;
      elMat(8,7) += w * tmp130*tmp87;
      elMat(8,8) += w * tmp130*tmp90;
      elMat(8,9) += w * tmp130*tmp92;
      elMat(9,0) += w * tmp134*tmp52;
      elMat(9,1) += w * tmp136*tmp66;
      elMat(9,2) += w * tmp136*tmp68;
      elMat(9,3) += w * tmp135*tmp71;
      elMat(9,4) += w * tmp134*tmp75;
      elMat(9,5) += w * tmp134*tmp78;
      elMat(9,6) += w * tmp134*tmp83;
      elMat(9,7) += w * tmp134*tmp87;
      elMat(9,8) += w * tmp134*tmp90;
      elMat(9,9) += w * tmp134*tmp92;
   }

   void integrateAll( const std::array< Point3D, 4 >& coords, Matrix10r& elMat ) const final
   {
      Point3D x_hat;
      Point3D x_tilde;
      Matrix3r DF;
      elMat(0,0) = 0;
      elMat(0,1) = 0;
      elMat(0,2) = 0;
      elMat(0,3) = 0;
      elMat(0,4) = 0;
      elMat(0,5) = 0;
      elMat(0,6) = 0;
      elMat(0,7) = 0;
      elMat(0,8) = 0;
      elMat(0,9) = 0;
      elMat(1,0) = 0;
      elMat(1,1) = 0;
      elMat(1,2) = 0;
      elMat(1,3) = 0;
      elMat(1,4) = 0;
      elMat(1,5) = 0;
      elMat(1,6) = 0;
      elMat(1,7) = 0;
      elMat(1,8) = 0;
      elMat(1,9) = 0;
      elMat(2,0) = 0;
      elMat(2,1) = 0;
      elMat(2,2) = 0;
      elMat(2,3) = 0;
      elMat(2,4) = 0;
      elMat(2,5) = 0;
      elMat(2,6) = 0;
      elMat(2,7) = 0;
      elMat(2,8) = 0;
      elMat(2,9) = 0;
      elMat(3,0) = 0;
      elMat(3,1) = 0;
      elMat(3,2) = 0;
      elMat(3,3) = 0;
      elMat(3,4) = 0;
      elMat(3,5) = 0;
      elMat(3,6) = 0;
      elMat(3,7) = 0;
      elMat(3,8) = 0;
      elMat(3,9) = 0;
      elMat(4,0) = 0;
      elMat(4,1) = 0;
      elMat(4,2) = 0;
      elMat(4,3) = 0;
      elMat(4,4) = 0;
      elMat(4,5) = 0;
      elMat(4,6) = 0;
      elMat(4,7) = 0;
      elMat(4,8) = 0;
      elMat(4,9) = 0;
      elMat(5,0) = 0;
      elMat(5,1) = 0;
      elMat(5,2) = 0;
      elMat(5,3) = 0;
      elMat(5,4) = 0;
      elMat(5,5) = 0;
      elMat(5,6) = 0;
      elMat(5,7) = 0;
      elMat(5,8) = 0;
      elMat(5,9) = 0;
      elMat(6,0) = 0;
      elMat(6,1) = 0;
      elMat(6,2) = 0;
      elMat(6,3) = 0;
      elMat(6,4) = 0;
      elMat(6,5) = 0;
      elMat(6,6) = 0;
      elMat(6,7) = 0;
      elMat(6,8) = 0;
      elMat(6,9) = 0;
      elMat(7,0) = 0;
      elMat(7,1) = 0;
      elMat(7,2) = 0;
      elMat(7,3) = 0;
      elMat(7,4) = 0;
      elMat(7,5) = 0;
      elMat(7,6) = 0;
      elMat(7,7) = 0;
      elMat(7,8) = 0;
      elMat(7,9) = 0;
      elMat(8,0) = 0;
      elMat(8,1) = 0;
      elMat(8,2) = 0;
      elMat(8,3) = 0;
      elMat(8,4) = 0;
      elMat(8,5) = 0;
      elMat(8,6) = 0;
      elMat(8,7) = 0;
      elMat(8,8) = 0;
      elMat(8,9) = 0;
      elMat(9,0) = 0;
      elMat(9,1) = 0;
      elMat(9,2) = 0;
      elMat(9,3) = 0;
      elMat(9,4) = 0;
      elMat(9,5) = 0;
      elMat(9,6) = 0;
      elMat(9,7) = 0;
      elMat(9,8) = 0;
      elMat(9,9) = 0;
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.5854101966249684;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.585410196624968*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.585410196624968*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.585410196624968*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.5854101966249684;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.585410196624968*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.585410196624968*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.585410196624968*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.5854101966249684;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.585410196624968*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.585410196624968*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.585410196624968*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.585410196624968*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.585410196624968*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.585410196624968*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
   }

};

class P2Form_epsilon_22 : public P2FormHyTeG {
 public:
   void evalQuadraturePoint2D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,3>& coords, const Matrix2r& DF, real_t w, Matrix6r& elMat) const
   {
      real_t tmp0 = std::pow(x_hat[0] + x_hat[1] - 0.75, 2);
      real_t tmp1 = coords[0][0] - coords[2][0];
      real_t tmp2 = DF(0,0)*tmp1;
      real_t tmp3 = coords[0][1] - coords[2][1];
      real_t tmp4 = DF(0,1)*tmp3;
      real_t tmp5 = coords[0][0] - coords[1][0];
      real_t tmp6 = coords[0][1] - coords[1][1];
      real_t tmp7 = DF(0,0)*tmp5 + DF(0,1)*tmp6;
      real_t tmp8 = -tmp2 - tmp4 + tmp7;
      real_t tmp9 = DF(0,0)*DF(1,1) - DF(0,1)*DF(1,0);
      real_t tmp10 = coords[0][0]*coords[1][1] - coords[0][0]*coords[2][1] - coords[0][1]*coords[1][0] + coords[0][1]*coords[2][0] + coords[1][0]*coords[2][1] - coords[1][1]*coords[2][0];
      real_t tmp11 = 1/(std::pow(tmp10, 2)*std::pow(tmp9, 2));
      real_t tmp12 = 16.0*tmp11;
      real_t tmp13 = DF(1,0)*tmp1;
      real_t tmp14 = DF(1,1)*tmp3;
      real_t tmp15 = DF(1,0)*tmp5 + DF(1,1)*tmp6;
      real_t tmp16 = -tmp13 - tmp14 + tmp15;
      real_t tmp17 = 8.0*tmp11;
      real_t tmp18 = 2*std::fabs(tmp10*tmp9);
      real_t tmp19 = tmp2 + tmp4;
      real_t tmp20 = 4.0*x_hat[0];
      real_t tmp21 = tmp20 - 1.0;
      real_t tmp22 = tmp19*tmp21;
      real_t tmp23 = 4.0*x_hat[1];
      real_t tmp24 = tmp20 + tmp23 - 3.0;
      real_t tmp25 = tmp24*tmp8;
      real_t tmp26 = 1.0*tmp25;
      real_t tmp27 = tmp11*tmp26;
      real_t tmp28 = tmp13 + tmp14;
      real_t tmp29 = tmp21*tmp28;
      real_t tmp30 = tmp16*tmp24;
      real_t tmp31 = tmp11*tmp30;
      real_t tmp32 = 0.5*tmp31;
      real_t tmp33 = tmp18*(-tmp22*tmp27 - tmp29*tmp32);
      real_t tmp34 = tmp23 - 1.0;
      real_t tmp35 = tmp34*tmp7;
      real_t tmp36 = tmp15*tmp34;
      real_t tmp37 = tmp18*(tmp27*tmp35 + tmp32*tmp36);
      real_t tmp38 = tmp19*x_hat[1];
      real_t tmp39 = tmp7*x_hat[0];
      real_t tmp40 = tmp38 - tmp39;
      real_t tmp41 = 4.0*tmp11;
      real_t tmp42 = tmp40*tmp41;
      real_t tmp43 = tmp15*x_hat[0];
      real_t tmp44 = tmp28*x_hat[1];
      real_t tmp45 = tmp43 - tmp44;
      real_t tmp46 = 2.0*tmp45;
      real_t tmp47 = tmp18*(-tmp25*tmp42 + tmp31*tmp46);
      real_t tmp48 = tmp20 + 8.0*x_hat[1] - 4.0;
      real_t tmp49 = tmp48*tmp7;
      real_t tmp50 = tmp11*(-tmp19*tmp23 + 1.0*tmp49);
      real_t tmp51 = tmp15*tmp48;
      real_t tmp52 = 2.0*tmp44 - 0.5*tmp51;
      real_t tmp53 = tmp11*tmp52;
      real_t tmp54 = 1.0*tmp53;
      real_t tmp55 = tmp18*(-tmp26*tmp50 + tmp30*tmp54);
      real_t tmp56 = tmp23 + 8.0*x_hat[0] - 4.0;
      real_t tmp57 = tmp19*tmp56;
      real_t tmp58 = tmp20*tmp7 - 1.0*tmp57;
      real_t tmp59 = tmp11*tmp58;
      real_t tmp60 = tmp28*tmp56;
      real_t tmp61 = -2.0*tmp43 + 0.5*tmp60;
      real_t tmp62 = 1.0*tmp61;
      real_t tmp63 = tmp18*(-tmp26*tmp59 + tmp31*tmp62);
      real_t tmp64 = std::pow(x_hat[0] - 0.25, 2);
      real_t tmp65 = 1.0*tmp22;
      real_t tmp66 = tmp18*(-0.5*tmp11*tmp29*tmp36 - tmp11*tmp35*tmp65);
      real_t tmp67 = tmp11*tmp46;
      real_t tmp68 = tmp18*(tmp22*tmp42 - tmp29*tmp67);
      real_t tmp69 = tmp18*(-tmp29*tmp54 + tmp50*tmp65);
      real_t tmp70 = tmp11*tmp62;
      real_t tmp71 = tmp18*(-tmp29*tmp70 + tmp59*tmp65);
      real_t tmp72 = std::pow(x_hat[1] - 0.25, 2);
      real_t tmp73 = tmp18*(-tmp35*tmp42 + tmp36*tmp67);
      real_t tmp74 = 1.0*tmp35;
      real_t tmp75 = tmp18*(tmp36*tmp54 - tmp50*tmp74);
      real_t tmp76 = tmp18*(tmp36*tmp70 - tmp59*tmp74);
      real_t tmp77 = tmp41*tmp45;
      real_t tmp78 = tmp18*(4.0*tmp40*tmp50 + tmp52*tmp77);
      real_t tmp79 = tmp18*(tmp42*tmp58 + tmp61*tmp77);
      real_t tmp80 = tmp18*(tmp50*tmp58 + 2*tmp53*tmp61);
      elMat(0,0) += w * tmp18*(tmp0*tmp12*std::pow(tmp8, 2) + tmp0*std::pow(tmp16, 2)*tmp17);
      elMat(0,1) += w * tmp33;
      elMat(0,2) += w * tmp37;
      elMat(0,3) += w * tmp47;
      elMat(0,4) += w * tmp55;
      elMat(0,5) += w * tmp63;
      elMat(1,0) += w * tmp33;
      elMat(1,1) += w * tmp18*(tmp12*std::pow(tmp19, 2)*tmp64 + tmp17*std::pow(tmp28, 2)*tmp64);
      elMat(1,2) += w * tmp66;
      elMat(1,3) += w * tmp68;
      elMat(1,4) += w * tmp69;
      elMat(1,5) += w * tmp71;
      elMat(2,0) += w * tmp37;
      elMat(2,1) += w * tmp66;
      elMat(2,2) += w * tmp18*(tmp12*std::pow(tmp7, 2)*tmp72 + std::pow(tmp15, 2)*tmp17*tmp72);
      elMat(2,3) += w * tmp73;
      elMat(2,4) += w * tmp75;
      elMat(2,5) += w * tmp76;
      elMat(3,0) += w * tmp47;
      elMat(3,1) += w * tmp68;
      elMat(3,2) += w * tmp73;
      elMat(3,3) += w * tmp18*(tmp12*std::pow(tmp40, 2) + tmp17*std::pow(tmp45, 2));
      elMat(3,4) += w * tmp78;
      elMat(3,5) += w * tmp79;
      elMat(4,0) += w * tmp55;
      elMat(4,1) += w * tmp69;
      elMat(4,2) += w * tmp75;
      elMat(4,3) += w * tmp78;
      elMat(4,4) += w * tmp18*(tmp12*std::pow(-tmp38 + 0.25*tmp49, 2) + tmp17*std::pow(tmp44 - 0.25*tmp51, 2));
      elMat(4,5) += w * tmp80;
      elMat(5,0) += w * tmp63;
      elMat(5,1) += w * tmp71;
      elMat(5,2) += w * tmp76;
      elMat(5,3) += w * tmp79;
      elMat(5,4) += w * tmp80;
      elMat(5,5) += w * tmp18*(tmp12*std::pow(tmp39 - 0.25*tmp57, 2) + tmp17*std::pow(-tmp43 + 0.25*tmp60, 2));
   }

   void integrateAll( const std::array< Point3D, 3 >& coords, Matrix6r& elMat ) const final
   {
      Point3D x_hat;
      Point3D x_tilde;
      Matrix2r DF;
      elMat(0,0) = 0;
      elMat(0,1) = 0;
      elMat(0,2) = 0;
      elMat(0,3) = 0;
      elMat(0,4) = 0;
      elMat(0,5) = 0;
      elMat(1,0) = 0;
      elMat(1,1) = 0;
      elMat(1,2) = 0;
      elMat(1,3) = 0;
      elMat(1,4) = 0;
      elMat(1,5) = 0;
      elMat(2,0) = 0;
      elMat(2,1) = 0;
      elMat(2,2) = 0;
      elMat(2,3) = 0;
      elMat(2,4) = 0;
      elMat(2,5) = 0;
      elMat(3,0) = 0;
      elMat(3,1) = 0;
      elMat(3,2) = 0;
      elMat(3,3) = 0;
      elMat(3,4) = 0;
      elMat(3,5) = 0;
      elMat(4,0) = 0;
      elMat(4,1) = 0;
      elMat(4,2) = 0;
      elMat(4,3) = 0;
      elMat(4,4) = 0;
      elMat(4,5) = 0;
      elMat(5,0) = 0;
      elMat(5,1) = 0;
      elMat(5,2) = 0;
      elMat(5,3) = 0;
      elMat(5,4) = 0;
      elMat(5,5) = 0;
      x_hat[0] = 0.5;
      x_hat[1] = 0.0;
      x_tilde[0] = 0.5*coords[0][0] + 0.5*coords[1][0];
      x_tilde[1] = 0.5*coords[0][1] + 0.5*coords[1][1];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint2D(x_hat, x_tilde, coords, DF, 0.16666666666666666, elMat);
      x_hat[0] = 0.0;
      x_hat[1] = 0.5;
      x_tilde[0] = 0.5*coords[0][0] + 0.5*coords[2][0];
      x_tilde[1] = 0.5*coords[0][1] + 0.5*coords[2][1];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint2D(x_hat, x_tilde, coords, DF, 0.16666666666666666, elMat);
      x_hat[0] = 0.5;
      x_hat[1] = 0.5;
      x_tilde[0] = 0.5*coords[1][0] + 0.5*coords[2][0];
      x_tilde[1] = 0.5*coords[1][1] + 0.5*coords[2][1];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint2D(x_hat, x_tilde, coords, DF, 0.16666666666666666, elMat);
   }

   void evalQuadraturePoint3D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,4>& coords, const Matrix3r& DF, real_t w, Matrix10r& elMat) const
   {
      real_t tmp0 = coords[0][1]*coords[2][0];
      real_t tmp1 = coords[1][0]*coords[2][1];
      real_t tmp2 = coords[0][0]*coords[2][1];
      real_t tmp3 = coords[1][1]*coords[2][0];
      real_t tmp4 = coords[0][0]*coords[1][1];
      real_t tmp5 = coords[0][1]*coords[1][0];
      real_t tmp6 = tmp4 - tmp5;
      real_t tmp7 = tmp0 + tmp1 - tmp2 - tmp3 + tmp6;
      real_t tmp8 = DF(0,0)*DF(2,1);
      real_t tmp9 = DF(0,1)*DF(2,0);
      real_t tmp10 = DF(0,0)*DF(2,2);
      real_t tmp11 = DF(0,2)*DF(2,1);
      real_t tmp12 = DF(0,1)*DF(2,2);
      real_t tmp13 = DF(0,2)*DF(2,0);
      real_t tmp14 = DF(1,0)*tmp11 - DF(1,0)*tmp12 + DF(1,1)*tmp10 - DF(1,1)*tmp13 - DF(1,2)*tmp8 + DF(1,2)*tmp9;
      real_t tmp15 = coords[0][0]*coords[1][2];
      real_t tmp16 = coords[0][1]*coords[2][2];
      real_t tmp17 = coords[0][2]*coords[1][1];
      real_t tmp18 = coords[0][2]*coords[2][0];
      real_t tmp19 = coords[1][0]*coords[2][2];
      real_t tmp20 = coords[1][2]*coords[2][1];
      real_t tmp21 = coords[0][0]*coords[2][2];
      real_t tmp22 = coords[0][1]*coords[1][2];
      real_t tmp23 = coords[0][2]*coords[1][0];
      real_t tmp24 = coords[0][2]*coords[2][1];
      real_t tmp25 = coords[1][1]*coords[2][2];
      real_t tmp26 = coords[1][2]*coords[2][0];
      real_t tmp27 = coords[0][2]*tmp1 - coords[0][2]*tmp3 + coords[1][2]*tmp0 - coords[1][2]*tmp2 + coords[2][2]*tmp4 - coords[2][2]*tmp5 + coords[3][0]*tmp16 + coords[3][0]*tmp17 + coords[3][0]*tmp20 - coords[3][0]*tmp22 - coords[3][0]*tmp24 - coords[3][0]*tmp25 + coords[3][1]*tmp15 + coords[3][1]*tmp18 + coords[3][1]*tmp19 - coords[3][1]*tmp21 - coords[3][1]*tmp23 - coords[3][1]*tmp26 - coords[3][2]*tmp0 - coords[3][2]*tmp1 + coords[3][2]*tmp2 + coords[3][2]*tmp3 - coords[3][2]*tmp4 + coords[3][2]*tmp5;
      real_t tmp28 = 1/(tmp14*tmp27);
      real_t tmp29 = tmp28*(tmp8 - tmp9);
      real_t tmp30 = tmp15 - tmp23;
      real_t tmp31 = tmp18 + tmp19 - tmp21 - tmp26 + tmp30;
      real_t tmp32 = tmp28*(tmp10 - tmp13);
      real_t tmp33 = -tmp17 + tmp22;
      real_t tmp34 = -tmp16 - tmp20 + tmp24 + tmp25 + tmp33;
      real_t tmp35 = tmp28*(-tmp11 + tmp12);
      real_t tmp36 = tmp29*tmp7 + tmp31*tmp32 + tmp34*tmp35;
      real_t tmp37 = 4.0*x_hat[0];
      real_t tmp38 = 4.0*x_hat[1];
      real_t tmp39 = 4.0*x_hat[2];
      real_t tmp40 = tmp37 + tmp38 + tmp39 - 3.0;
      real_t tmp41 = 1.0*tmp40;
      real_t tmp42 = -coords[0][0]*coords[3][1] + coords[0][1]*coords[3][0];
      real_t tmp43 = coords[2][0]*coords[3][1] - coords[2][1]*coords[3][0] - tmp0 + tmp2 + tmp42;
      real_t tmp44 = -coords[0][0]*coords[3][2] + coords[0][2]*coords[3][0];
      real_t tmp45 = coords[2][0]*coords[3][2] - coords[2][2]*coords[3][0] - tmp18 + tmp21 + tmp44;
      real_t tmp46 = -coords[0][1]*coords[3][2] + coords[0][2]*coords[3][1];
      real_t tmp47 = coords[2][1]*coords[3][2] - coords[2][2]*coords[3][1] + tmp16 - tmp24 + tmp46;
      real_t tmp48 = tmp29*tmp43 + tmp32*tmp45 + tmp35*tmp47;
      real_t tmp49 = coords[1][0]*coords[3][1] - coords[1][1]*coords[3][0] + tmp42 + tmp6;
      real_t tmp50 = coords[1][0]*coords[3][2] - coords[1][2]*coords[3][0] + tmp30 + tmp44;
      real_t tmp51 = coords[1][1]*coords[3][2] - coords[1][2]*coords[3][1] + tmp33 + tmp46;
      real_t tmp52 = -tmp29*tmp49 - tmp32*tmp50 - tmp35*tmp51;
      real_t tmp53 = tmp36*tmp41 + tmp41*tmp48 + tmp41*tmp52;
      real_t tmp54 = tmp28*(DF(0,0)*DF(1,1) - DF(0,1)*DF(1,0));
      real_t tmp55 = tmp28*(DF(0,0)*DF(1,2) - DF(0,2)*DF(1,0));
      real_t tmp56 = tmp28*(DF(0,1)*DF(1,2) - DF(0,2)*DF(1,1));
      real_t tmp57 = tmp49*tmp54 + tmp50*tmp55 + tmp51*tmp56;
      real_t tmp58 = tmp40*tmp57;
      real_t tmp59 = -tmp31*tmp55 - tmp34*tmp56 - tmp54*tmp7;
      real_t tmp60 = tmp40*tmp59;
      real_t tmp61 = -tmp43*tmp54 - tmp45*tmp55 - tmp47*tmp56;
      real_t tmp62 = tmp40*tmp61;
      real_t tmp63 = tmp28*(DF(1,0)*DF(2,1) - DF(1,1)*DF(2,0));
      real_t tmp64 = tmp28*(DF(1,0)*DF(2,2) - DF(1,2)*DF(2,0));
      real_t tmp65 = tmp28*(DF(1,1)*DF(2,2) - DF(1,2)*DF(2,1));
      real_t tmp66 = tmp49*tmp63 + tmp50*tmp64 + tmp51*tmp65;
      real_t tmp67 = tmp40*tmp66;
      real_t tmp68 = -tmp31*tmp64 - tmp34*tmp65 - tmp63*tmp7;
      real_t tmp69 = tmp40*tmp68;
      real_t tmp70 = -tmp43*tmp63 - tmp45*tmp64 - tmp47*tmp65;
      real_t tmp71 = tmp40*tmp70;
      real_t tmp72 = 2*std::fabs(tmp14*tmp27);
      real_t tmp73 = tmp37 - 1.0;
      real_t tmp74 = 1.0*tmp73;
      real_t tmp75 = tmp48*tmp74;
      real_t tmp76 = 0.5*tmp58 + 0.5*tmp60 + 0.5*tmp62;
      real_t tmp77 = tmp61*tmp74;
      real_t tmp78 = 0.5*tmp67 + 0.5*tmp69 + 0.5*tmp71;
      real_t tmp79 = tmp70*tmp74;
      real_t tmp80 = tmp72*(tmp53*tmp75 + tmp76*tmp77 + tmp78*tmp79);
      real_t tmp81 = tmp38 - 1.0;
      real_t tmp82 = 1.0*tmp81;
      real_t tmp83 = tmp57*tmp82;
      real_t tmp84 = tmp52*tmp82;
      real_t tmp85 = tmp66*tmp82;
      real_t tmp86 = tmp72*(tmp53*tmp84 + tmp76*tmp83 + tmp78*tmp85);
      real_t tmp87 = tmp39 - 1.0;
      real_t tmp88 = 1.0*tmp87;
      real_t tmp89 = tmp36*tmp88;
      real_t tmp90 = tmp59*tmp88;
      real_t tmp91 = tmp68*tmp88;
      real_t tmp92 = tmp72*(tmp53*tmp89 + tmp76*tmp90 + tmp78*tmp91);
      real_t tmp93 = tmp36*tmp38;
      real_t tmp94 = tmp39*tmp52;
      real_t tmp95 = tmp93 + tmp94;
      real_t tmp96 = tmp57*x_hat[2];
      real_t tmp97 = 2.0*tmp96;
      real_t tmp98 = tmp59*x_hat[1];
      real_t tmp99 = 2.0*tmp98;
      real_t tmp100 = tmp97 + tmp99;
      real_t tmp101 = 2*tmp76;
      real_t tmp102 = tmp66*x_hat[2];
      real_t tmp103 = 2.0*tmp102;
      real_t tmp104 = tmp68*x_hat[1];
      real_t tmp105 = 2.0*tmp104;
      real_t tmp106 = tmp103 + tmp105;
      real_t tmp107 = 2*tmp78;
      real_t tmp108 = tmp72*(tmp100*tmp101 + tmp106*tmp107 + tmp53*tmp95);
      real_t tmp109 = tmp36*tmp37;
      real_t tmp110 = tmp39*tmp48;
      real_t tmp111 = tmp109 + tmp110;
      real_t tmp112 = tmp59*x_hat[0];
      real_t tmp113 = 2.0*tmp112;
      real_t tmp114 = tmp61*x_hat[2];
      real_t tmp115 = 2.0*tmp114;
      real_t tmp116 = tmp113 + tmp115;
      real_t tmp117 = tmp68*x_hat[0];
      real_t tmp118 = 2.0*tmp117;
      real_t tmp119 = tmp70*x_hat[2];
      real_t tmp120 = 2.0*tmp119;
      real_t tmp121 = tmp118 + tmp120;
      real_t tmp122 = tmp72*(tmp101*tmp116 + tmp107*tmp121 + tmp111*tmp53);
      real_t tmp123 = tmp38*tmp48;
      real_t tmp124 = tmp37*tmp52;
      real_t tmp125 = tmp123 + tmp124;
      real_t tmp126 = tmp57*x_hat[0];
      real_t tmp127 = 2.0*tmp126;
      real_t tmp128 = tmp61*x_hat[1];
      real_t tmp129 = 2.0*tmp128;
      real_t tmp130 = tmp127 + tmp129;
      real_t tmp131 = tmp66*x_hat[0];
      real_t tmp132 = 2.0*tmp131;
      real_t tmp133 = tmp70*x_hat[1];
      real_t tmp134 = 2.0*tmp133;
      real_t tmp135 = tmp132 + tmp134;
      real_t tmp136 = tmp72*(tmp101*tmp130 + tmp107*tmp135 + tmp125*tmp53);
      real_t tmp137 = -tmp38;
      real_t tmp138 = 4.0 - tmp37;
      real_t tmp139 = tmp137 + tmp138 - 8.0*x_hat[2];
      real_t tmp140 = tmp139*tmp36;
      real_t tmp141 = -tmp110 + 1.0*tmp140 - tmp94;
      real_t tmp142 = 0.5*tmp139;
      real_t tmp143 = -tmp115 + tmp142*tmp59 - tmp97;
      real_t tmp144 = -tmp103 - tmp120 + tmp142*tmp68;
      real_t tmp145 = tmp72*(tmp101*tmp143 + tmp107*tmp144 + tmp141*tmp53);
      real_t tmp146 = -tmp39;
      real_t tmp147 = tmp138 + tmp146 - 8.0*x_hat[1];
      real_t tmp148 = tmp147*tmp52;
      real_t tmp149 = -tmp123 + 1.0*tmp148 - tmp93;
      real_t tmp150 = 0.5*tmp147;
      real_t tmp151 = -tmp129 + tmp150*tmp57 - tmp99;
      real_t tmp152 = -tmp105 - tmp134 + tmp150*tmp66;
      real_t tmp153 = tmp72*(tmp101*tmp151 + tmp107*tmp152 + tmp149*tmp53);
      real_t tmp154 = tmp137 + tmp146 - 8.0*x_hat[0] + 4.0;
      real_t tmp155 = tmp154*tmp48;
      real_t tmp156 = -tmp109 - tmp124 + 1.0*tmp155;
      real_t tmp157 = 0.5*tmp154;
      real_t tmp158 = -tmp113 - tmp127 + tmp157*tmp61;
      real_t tmp159 = -tmp118 - tmp132 + tmp157*tmp70;
      real_t tmp160 = tmp72*(tmp101*tmp158 + tmp107*tmp159 + tmp156*tmp53);
      real_t tmp161 = std::pow(x_hat[0] - 0.25, 2);
      real_t tmp162 = 8.0*tmp161;
      real_t tmp163 = 0.5*tmp73;
      real_t tmp164 = tmp163*tmp81;
      real_t tmp165 = tmp72*(tmp164*tmp57*tmp61 + tmp164*tmp66*tmp70 + tmp52*tmp75*tmp81);
      real_t tmp166 = tmp36*tmp87;
      real_t tmp167 = tmp163*tmp87;
      real_t tmp168 = tmp72*(tmp166*tmp75 + tmp167*tmp59*tmp61 + tmp167*tmp68*tmp70);
      real_t tmp169 = tmp72*(tmp100*tmp77 + tmp106*tmp79 + tmp75*tmp95);
      real_t tmp170 = tmp72*(tmp111*tmp75 + tmp116*tmp77 + tmp121*tmp79);
      real_t tmp171 = tmp72*(tmp125*tmp75 + tmp130*tmp77 + tmp135*tmp79);
      real_t tmp172 = tmp72*(tmp141*tmp75 + tmp143*tmp77 + tmp144*tmp79);
      real_t tmp173 = tmp72*(tmp149*tmp75 + tmp151*tmp77 + tmp152*tmp79);
      real_t tmp174 = tmp72*(tmp156*tmp75 + tmp158*tmp77 + tmp159*tmp79);
      real_t tmp175 = std::pow(x_hat[1] - 0.25, 2);
      real_t tmp176 = 8.0*tmp175;
      real_t tmp177 = 0.5*tmp81*tmp87;
      real_t tmp178 = tmp72*(tmp166*tmp84 + tmp177*tmp57*tmp59 + tmp177*tmp66*tmp68);
      real_t tmp179 = tmp72*(tmp100*tmp83 + tmp106*tmp85 + tmp84*tmp95);
      real_t tmp180 = tmp72*(tmp111*tmp84 + tmp116*tmp83 + tmp121*tmp85);
      real_t tmp181 = tmp72*(tmp125*tmp84 + tmp130*tmp83 + tmp135*tmp85);
      real_t tmp182 = tmp72*(tmp141*tmp84 + tmp143*tmp83 + tmp144*tmp85);
      real_t tmp183 = tmp72*(tmp149*tmp84 + tmp151*tmp83 + tmp152*tmp85);
      real_t tmp184 = tmp72*(tmp156*tmp84 + tmp158*tmp83 + tmp159*tmp85);
      real_t tmp185 = std::pow(x_hat[2] - 0.25, 2);
      real_t tmp186 = 8.0*tmp185;
      real_t tmp187 = tmp72*(tmp100*tmp90 + tmp106*tmp91 + tmp89*tmp95);
      real_t tmp188 = tmp72*(tmp111*tmp89 + tmp116*tmp90 + tmp121*tmp91);
      real_t tmp189 = tmp72*(tmp125*tmp89 + tmp130*tmp90 + tmp135*tmp91);
      real_t tmp190 = tmp72*(tmp141*tmp89 + tmp143*tmp90 + tmp144*tmp91);
      real_t tmp191 = tmp72*(tmp149*tmp89 + tmp151*tmp90 + tmp152*tmp91);
      real_t tmp192 = tmp72*(tmp156*tmp89 + tmp158*tmp90 + tmp159*tmp91);
      real_t tmp193 = tmp36*x_hat[1];
      real_t tmp194 = tmp52*x_hat[2];
      real_t tmp195 = 2*tmp100;
      real_t tmp196 = 2*tmp106;
      real_t tmp197 = tmp72*(tmp111*tmp95 + tmp116*tmp195 + tmp121*tmp196);
      real_t tmp198 = tmp72*(tmp125*tmp95 + tmp130*tmp195 + tmp135*tmp196);
      real_t tmp199 = tmp72*(tmp141*tmp95 + tmp143*tmp195 + tmp144*tmp196);
      real_t tmp200 = tmp72*(tmp149*tmp95 + tmp151*tmp195 + tmp152*tmp196);
      real_t tmp201 = tmp72*(tmp156*tmp95 + tmp158*tmp195 + tmp159*tmp196);
      real_t tmp202 = tmp36*x_hat[0];
      real_t tmp203 = tmp48*x_hat[2];
      real_t tmp204 = 2*tmp116;
      real_t tmp205 = 2*tmp121;
      real_t tmp206 = tmp72*(tmp111*tmp125 + tmp130*tmp204 + tmp135*tmp205);
      real_t tmp207 = tmp72*(tmp111*tmp141 + tmp143*tmp204 + tmp144*tmp205);
      real_t tmp208 = tmp72*(tmp111*tmp149 + tmp151*tmp204 + tmp152*tmp205);
      real_t tmp209 = tmp72*(tmp111*tmp156 + tmp158*tmp204 + tmp159*tmp205);
      real_t tmp210 = tmp48*x_hat[1];
      real_t tmp211 = tmp52*x_hat[0];
      real_t tmp212 = 2*tmp130;
      real_t tmp213 = 2*tmp135;
      real_t tmp214 = tmp72*(tmp125*tmp141 + tmp143*tmp212 + tmp144*tmp213);
      real_t tmp215 = tmp72*(tmp125*tmp149 + tmp151*tmp212 + tmp152*tmp213);
      real_t tmp216 = tmp72*(tmp125*tmp156 + tmp158*tmp212 + tmp159*tmp213);
      real_t tmp217 = 0.25*tmp139;
      real_t tmp218 = 2*tmp143;
      real_t tmp219 = 2*tmp144;
      real_t tmp220 = tmp72*(tmp141*tmp149 + tmp151*tmp218 + tmp152*tmp219);
      real_t tmp221 = tmp72*(tmp141*tmp156 + tmp158*tmp218 + tmp159*tmp219);
      real_t tmp222 = 0.25*tmp147;
      real_t tmp223 = tmp72*(tmp149*tmp156 + 2*tmp151*tmp158 + 2*tmp152*tmp159);
      real_t tmp224 = 0.25*tmp154;
      elMat(0,0) += w * tmp72*(std::pow(tmp53, 2) + 0.5*std::pow(tmp58 + tmp60 + tmp62, 2) + 0.5*std::pow(tmp67 + tmp69 + tmp71, 2));
      elMat(0,1) += w * tmp80;
      elMat(0,2) += w * tmp86;
      elMat(0,3) += w * tmp92;
      elMat(0,4) += w * tmp108;
      elMat(0,5) += w * tmp122;
      elMat(0,6) += w * tmp136;
      elMat(0,7) += w * tmp145;
      elMat(0,8) += w * tmp153;
      elMat(0,9) += w * tmp160;
      elMat(1,0) += w * tmp80;
      elMat(1,1) += w * tmp72*(16.0*tmp161*std::pow(tmp48, 2) + tmp162*std::pow(tmp61, 2) + tmp162*std::pow(tmp70, 2));
      elMat(1,2) += w * tmp165;
      elMat(1,3) += w * tmp168;
      elMat(1,4) += w * tmp169;
      elMat(1,5) += w * tmp170;
      elMat(1,6) += w * tmp171;
      elMat(1,7) += w * tmp172;
      elMat(1,8) += w * tmp173;
      elMat(1,9) += w * tmp174;
      elMat(2,0) += w * tmp86;
      elMat(2,1) += w * tmp165;
      elMat(2,2) += w * tmp72*(16.0*tmp175*std::pow(tmp52, 2) + tmp176*std::pow(tmp57, 2) + tmp176*std::pow(tmp66, 2));
      elMat(2,3) += w * tmp178;
      elMat(2,4) += w * tmp179;
      elMat(2,5) += w * tmp180;
      elMat(2,6) += w * tmp181;
      elMat(2,7) += w * tmp182;
      elMat(2,8) += w * tmp183;
      elMat(2,9) += w * tmp184;
      elMat(3,0) += w * tmp92;
      elMat(3,1) += w * tmp168;
      elMat(3,2) += w * tmp178;
      elMat(3,3) += w * tmp72*(16.0*tmp185*std::pow(tmp36, 2) + tmp186*std::pow(tmp59, 2) + tmp186*std::pow(tmp68, 2));
      elMat(3,4) += w * tmp187;
      elMat(3,5) += w * tmp188;
      elMat(3,6) += w * tmp189;
      elMat(3,7) += w * tmp190;
      elMat(3,8) += w * tmp191;
      elMat(3,9) += w * tmp192;
      elMat(4,0) += w * tmp108;
      elMat(4,1) += w * tmp169;
      elMat(4,2) += w * tmp179;
      elMat(4,3) += w * tmp187;
      elMat(4,4) += w * tmp72*(8.0*std::pow(tmp102 + tmp104, 2) + 16.0*std::pow(tmp193 + tmp194, 2) + 8.0*std::pow(tmp96 + tmp98, 2));
      elMat(4,5) += w * tmp197;
      elMat(4,6) += w * tmp198;
      elMat(4,7) += w * tmp199;
      elMat(4,8) += w * tmp200;
      elMat(4,9) += w * tmp201;
      elMat(5,0) += w * tmp122;
      elMat(5,1) += w * tmp170;
      elMat(5,2) += w * tmp180;
      elMat(5,3) += w * tmp188;
      elMat(5,4) += w * tmp197;
      elMat(5,5) += w * tmp72*(8.0*std::pow(tmp112 + tmp114, 2) + 8.0*std::pow(tmp117 + tmp119, 2) + 16.0*std::pow(tmp202 + tmp203, 2));
      elMat(5,6) += w * tmp206;
      elMat(5,7) += w * tmp207;
      elMat(5,8) += w * tmp208;
      elMat(5,9) += w * tmp209;
      elMat(6,0) += w * tmp136;
      elMat(6,1) += w * tmp171;
      elMat(6,2) += w * tmp181;
      elMat(6,3) += w * tmp189;
      elMat(6,4) += w * tmp198;
      elMat(6,5) += w * tmp206;
      elMat(6,6) += w * tmp72*(8.0*std::pow(tmp126 + tmp128, 2) + 8.0*std::pow(tmp131 + tmp133, 2) + 16.0*std::pow(tmp210 + tmp211, 2));
      elMat(6,7) += w * tmp214;
      elMat(6,8) += w * tmp215;
      elMat(6,9) += w * tmp216;
      elMat(7,0) += w * tmp145;
      elMat(7,1) += w * tmp172;
      elMat(7,2) += w * tmp182;
      elMat(7,3) += w * tmp190;
      elMat(7,4) += w * tmp199;
      elMat(7,5) += w * tmp207;
      elMat(7,6) += w * tmp214;
      elMat(7,7) += w * tmp72*(8.0*std::pow(-tmp102 - tmp119 + tmp217*tmp68, 2) + 8.0*std::pow(-tmp114 + tmp217*tmp59 - tmp96, 2) + 16.0*std::pow(0.25*tmp140 - tmp194 - tmp203, 2));
      elMat(7,8) += w * tmp220;
      elMat(7,9) += w * tmp221;
      elMat(8,0) += w * tmp153;
      elMat(8,1) += w * tmp173;
      elMat(8,2) += w * tmp183;
      elMat(8,3) += w * tmp191;
      elMat(8,4) += w * tmp200;
      elMat(8,5) += w * tmp208;
      elMat(8,6) += w * tmp215;
      elMat(8,7) += w * tmp220;
      elMat(8,8) += w * tmp72*(8.0*std::pow(-tmp104 - tmp133 + tmp222*tmp66, 2) + 8.0*std::pow(-tmp128 + tmp222*tmp57 - tmp98, 2) + 16.0*std::pow(0.25*tmp148 - tmp193 - tmp210, 2));
      elMat(8,9) += w * tmp223;
      elMat(9,0) += w * tmp160;
      elMat(9,1) += w * tmp174;
      elMat(9,2) += w * tmp184;
      elMat(9,3) += w * tmp192;
      elMat(9,4) += w * tmp201;
      elMat(9,5) += w * tmp209;
      elMat(9,6) += w * tmp216;
      elMat(9,7) += w * tmp221;
      elMat(9,8) += w * tmp223;
      elMat(9,9) += w * tmp72*(8.0*std::pow(-tmp112 - tmp126 + tmp224*tmp61, 2) + 8.0*std::pow(-tmp117 - tmp131 + tmp224*tmp70, 2) + 16.0*std::pow(0.25*tmp155 - tmp202 - tmp211, 2));
   }

   void integrateAll( const std::array< Point3D, 4 >& coords, Matrix10r& elMat ) const final
   {
      Point3D x_hat;
      Point3D x_tilde;
      Matrix3r DF;
      elMat(0,0) = 0;
      elMat(0,1) = 0;
      elMat(0,2) = 0;
      elMat(0,3) = 0;
      elMat(0,4) = 0;
      elMat(0,5) = 0;
      elMat(0,6) = 0;
      elMat(0,7) = 0;
      elMat(0,8) = 0;
      elMat(0,9) = 0;
      elMat(1,0) = 0;
      elMat(1,1) = 0;
      elMat(1,2) = 0;
      elMat(1,3) = 0;
      elMat(1,4) = 0;
      elMat(1,5) = 0;
      elMat(1,6) = 0;
      elMat(1,7) = 0;
      elMat(1,8) = 0;
      elMat(1,9) = 0;
      elMat(2,0) = 0;
      elMat(2,1) = 0;
      elMat(2,2) = 0;
      elMat(2,3) = 0;
      elMat(2,4) = 0;
      elMat(2,5) = 0;
      elMat(2,6) = 0;
      elMat(2,7) = 0;
      elMat(2,8) = 0;
      elMat(2,9) = 0;
      elMat(3,0) = 0;
      elMat(3,1) = 0;
      elMat(3,2) = 0;
      elMat(3,3) = 0;
      elMat(3,4) = 0;
      elMat(3,5) = 0;
      elMat(3,6) = 0;
      elMat(3,7) = 0;
      elMat(3,8) = 0;
      elMat(3,9) = 0;
      elMat(4,0) = 0;
      elMat(4,1) = 0;
      elMat(4,2) = 0;
      elMat(4,3) = 0;
      elMat(4,4) = 0;
      elMat(4,5) = 0;
      elMat(4,6) = 0;
      elMat(4,7) = 0;
      elMat(4,8) = 0;
      elMat(4,9) = 0;
      elMat(5,0) = 0;
      elMat(5,1) = 0;
      elMat(5,2) = 0;
      elMat(5,3) = 0;
      elMat(5,4) = 0;
      elMat(5,5) = 0;
      elMat(5,6) = 0;
      elMat(5,7) = 0;
      elMat(5,8) = 0;
      elMat(5,9) = 0;
      elMat(6,0) = 0;
      elMat(6,1) = 0;
      elMat(6,2) = 0;
      elMat(6,3) = 0;
      elMat(6,4) = 0;
      elMat(6,5) = 0;
      elMat(6,6) = 0;
      elMat(6,7) = 0;
      elMat(6,8) = 0;
      elMat(6,9) = 0;
      elMat(7,0) = 0;
      elMat(7,1) = 0;
      elMat(7,2) = 0;
      elMat(7,3) = 0;
      elMat(7,4) = 0;
      elMat(7,5) = 0;
      elMat(7,6) = 0;
      elMat(7,7) = 0;
      elMat(7,8) = 0;
      elMat(7,9) = 0;
      elMat(8,0) = 0;
      elMat(8,1) = 0;
      elMat(8,2) = 0;
      elMat(8,3) = 0;
      elMat(8,4) = 0;
      elMat(8,5) = 0;
      elMat(8,6) = 0;
      elMat(8,7) = 0;
      elMat(8,8) = 0;
      elMat(8,9) = 0;
      elMat(9,0) = 0;
      elMat(9,1) = 0;
      elMat(9,2) = 0;
      elMat(9,3) = 0;
      elMat(9,4) = 0;
      elMat(9,5) = 0;
      elMat(9,6) = 0;
      elMat(9,7) = 0;
      elMat(9,8) = 0;
      elMat(9,9) = 0;
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.5854101966249684;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.585410196624968*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.585410196624968*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.585410196624968*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.5854101966249684;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.585410196624968*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.585410196624968*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.585410196624968*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.5854101966249684;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.585410196624968*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.585410196624968*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.585410196624968*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.585410196624968*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.585410196624968*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.585410196624968*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
   }

};

class P2Form_epsilon_23 : public P2FormHyTeG {
 public:
   void evalQuadraturePoint2D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,3>& coords, const Matrix2r& DF, real_t w, Matrix6r& elMat) const
   {
      WALBERLA_ABORT("Not available in 2D");
   }

   void integrateAll( const std::array< Point3D, 3 >& coords, Matrix6r& elMat ) const final
   {
      WALBERLA_ABORT("Not available in 2D");
   }

   void evalQuadraturePoint3D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,4>& coords, const Matrix3r& DF, real_t w, Matrix10r& elMat) const
   {
      real_t tmp0 = coords[0][1]*coords[2][0];
      real_t tmp1 = coords[0][0]*coords[2][1];
      real_t tmp2 = coords[0][0]*coords[1][1];
      real_t tmp3 = coords[0][1]*coords[1][0];
      real_t tmp4 = tmp2 - tmp3;
      real_t tmp5 = coords[1][0]*coords[2][1] - coords[1][1]*coords[2][0] + tmp0 - tmp1 + tmp4;
      real_t tmp6 = DF(0,0)*DF(1,1);
      real_t tmp7 = DF(0,1)*DF(1,2);
      real_t tmp8 = DF(0,2)*DF(1,0);
      real_t tmp9 = DF(0,0)*DF(1,2);
      real_t tmp10 = DF(0,1)*DF(1,0);
      real_t tmp11 = DF(0,2)*DF(1,1);
      real_t tmp12 = -DF(2,0)*tmp11 + DF(2,0)*tmp7 + DF(2,1)*tmp8 - DF(2,1)*tmp9 - DF(2,2)*tmp10 + DF(2,2)*tmp6;
      real_t tmp13 = coords[0][0]*coords[3][1];
      real_t tmp14 = coords[0][0]*coords[3][2];
      real_t tmp15 = coords[0][1]*coords[1][2];
      real_t tmp16 = coords[0][1]*coords[3][0];
      real_t tmp17 = coords[0][2]*coords[1][0];
      real_t tmp18 = coords[1][1]*coords[3][0];
      real_t tmp19 = coords[0][2]*coords[3][1];
      real_t tmp20 = coords[1][0]*coords[3][1];
      real_t tmp21 = coords[1][1]*coords[3][2];
      real_t tmp22 = coords[1][2]*coords[3][0];
      real_t tmp23 = coords[0][0]*coords[1][2];
      real_t tmp24 = coords[0][1]*coords[3][2];
      real_t tmp25 = coords[0][2]*coords[1][1];
      real_t tmp26 = coords[0][2]*coords[3][0];
      real_t tmp27 = coords[1][0]*coords[3][2];
      real_t tmp28 = coords[1][2]*coords[3][1];
      real_t tmp29 = coords[0][2]*tmp18 - coords[0][2]*tmp20 + coords[1][2]*tmp13 - coords[1][2]*tmp16 + coords[2][0]*tmp15 + coords[2][0]*tmp19 + coords[2][0]*tmp21 - coords[2][0]*tmp24 - coords[2][0]*tmp25 - coords[2][0]*tmp28 + coords[2][1]*tmp14 + coords[2][1]*tmp17 + coords[2][1]*tmp22 - coords[2][1]*tmp23 - coords[2][1]*tmp26 - coords[2][1]*tmp27 - coords[2][2]*tmp13 + coords[2][2]*tmp16 - coords[2][2]*tmp18 + coords[2][2]*tmp2 + coords[2][2]*tmp20 - coords[2][2]*tmp3 - coords[3][2]*tmp2 + coords[3][2]*tmp3;
      real_t tmp30 = 1/(tmp12*tmp29);
      real_t tmp31 = tmp30*(DF(0,0)*DF(2,1) - DF(0,1)*DF(2,0));
      real_t tmp32 = coords[0][2]*coords[2][0];
      real_t tmp33 = coords[0][0]*coords[2][2];
      real_t tmp34 = -tmp17 + tmp23;
      real_t tmp35 = coords[1][0]*coords[2][2] - coords[1][2]*coords[2][0] + tmp32 - tmp33 + tmp34;
      real_t tmp36 = tmp30*(DF(0,0)*DF(2,2) - DF(0,2)*DF(2,0));
      real_t tmp37 = coords[0][2]*coords[2][1];
      real_t tmp38 = coords[0][1]*coords[2][2];
      real_t tmp39 = tmp15 - tmp25;
      real_t tmp40 = coords[1][1]*coords[2][2] - coords[1][2]*coords[2][1] + tmp37 - tmp38 + tmp39;
      real_t tmp41 = tmp30*(DF(0,1)*DF(2,2) - DF(0,2)*DF(2,1));
      real_t tmp42 = tmp31*tmp5 + tmp35*tmp36 + tmp40*tmp41;
      real_t tmp43 = 4.0*x_hat[0];
      real_t tmp44 = 4.0*x_hat[1];
      real_t tmp45 = 4.0*x_hat[2];
      real_t tmp46 = 0.5*tmp43 + 0.5*tmp44 + 0.5*tmp45 - 1.5;
      real_t tmp47 = -tmp13 + tmp16;
      real_t tmp48 = coords[2][0]*coords[3][1] - coords[2][1]*coords[3][0] - tmp0 + tmp1 + tmp47;
      real_t tmp49 = -tmp14 + tmp26;
      real_t tmp50 = coords[2][0]*coords[3][2] - coords[2][2]*coords[3][0] - tmp32 + tmp33 + tmp49;
      real_t tmp51 = tmp19 - tmp24;
      real_t tmp52 = coords[2][1]*coords[3][2] - coords[2][2]*coords[3][1] - tmp37 + tmp38 + tmp51;
      real_t tmp53 = tmp31*tmp48 + tmp36*tmp50 + tmp41*tmp52;
      real_t tmp54 = -tmp18 + tmp20 + tmp4 + tmp47;
      real_t tmp55 = -tmp22 + tmp27 + tmp34 + tmp49;
      real_t tmp56 = tmp21 - tmp28 + tmp39 + tmp51;
      real_t tmp57 = -tmp31*tmp54 - tmp36*tmp55 - tmp41*tmp56;
      real_t tmp58 = tmp42*tmp46 + tmp46*tmp53 + tmp46*tmp57;
      real_t tmp59 = tmp30*(-tmp10 + tmp6);
      real_t tmp60 = tmp30*(-tmp8 + tmp9);
      real_t tmp61 = tmp30*(-tmp11 + tmp7);
      real_t tmp62 = tmp54*tmp59 + tmp55*tmp60 + tmp56*tmp61;
      real_t tmp63 = -tmp35*tmp60 - tmp40*tmp61 - tmp5*tmp59;
      real_t tmp64 = -tmp48*tmp59 - tmp50*tmp60 - tmp52*tmp61;
      real_t tmp65 = tmp46*tmp62 + tmp46*tmp63 + tmp46*tmp64;
      real_t tmp66 = std::fabs(tmp12*tmp29);
      real_t tmp67 = 4*tmp66;
      real_t tmp68 = tmp65*tmp67;
      real_t tmp69 = tmp65*tmp66;
      real_t tmp70 = 2.0*tmp69;
      real_t tmp71 = tmp43 - 1.0;
      real_t tmp72 = tmp53*tmp71;
      real_t tmp73 = tmp44 - 1.0;
      real_t tmp74 = tmp57*tmp73;
      real_t tmp75 = tmp45 - 1.0;
      real_t tmp76 = 2.0*tmp42;
      real_t tmp77 = tmp75*tmp76;
      real_t tmp78 = tmp76*x_hat[1];
      real_t tmp79 = 2.0*x_hat[2];
      real_t tmp80 = tmp57*tmp79;
      real_t tmp81 = tmp78 + tmp80;
      real_t tmp82 = tmp76*x_hat[0];
      real_t tmp83 = tmp53*tmp79;
      real_t tmp84 = tmp82 + tmp83;
      real_t tmp85 = 2.0*x_hat[1];
      real_t tmp86 = tmp53*tmp85;
      real_t tmp87 = 2.0*x_hat[0];
      real_t tmp88 = tmp57*tmp87;
      real_t tmp89 = tmp86 + tmp88;
      real_t tmp90 = -tmp44;
      real_t tmp91 = 4.0 - tmp43;
      real_t tmp92 = 0.5*tmp90 + 0.5*tmp91 - 4.0*x_hat[2];
      real_t tmp93 = tmp42*tmp92 - tmp80 - tmp83;
      real_t tmp94 = -tmp45;
      real_t tmp95 = 0.5*tmp91 + 0.5*tmp94 - 4.0*x_hat[1];
      real_t tmp96 = tmp57*tmp95 - tmp78 - tmp86;
      real_t tmp97 = 0.5*tmp90 + 0.5*tmp94 - 4.0*x_hat[0] + 2.0;
      real_t tmp98 = tmp53*tmp97 - tmp82 - tmp88;
      real_t tmp99 = 2.0*tmp58;
      real_t tmp100 = tmp64*tmp66;
      real_t tmp101 = tmp100*tmp71;
      real_t tmp102 = 1.0*tmp101;
      real_t tmp103 = tmp42*tmp75;
      real_t tmp104 = 2.0*tmp101;
      real_t tmp105 = tmp62*tmp66;
      real_t tmp106 = tmp105*tmp73;
      real_t tmp107 = 1.0*tmp106;
      real_t tmp108 = 2.0*tmp106;
      real_t tmp109 = tmp63*tmp66;
      real_t tmp110 = tmp109*tmp75;
      real_t tmp111 = 1.0*tmp110;
      real_t tmp112 = 2.0*tmp110;
      real_t tmp113 = tmp62*tmp79;
      real_t tmp114 = tmp63*tmp85;
      real_t tmp115 = tmp113 + tmp114;
      real_t tmp116 = tmp115*tmp67;
      real_t tmp117 = tmp115*tmp66;
      real_t tmp118 = 2.0*tmp117;
      real_t tmp119 = tmp63*tmp87;
      real_t tmp120 = tmp64*tmp79;
      real_t tmp121 = tmp119 + tmp120;
      real_t tmp122 = tmp121*tmp67;
      real_t tmp123 = tmp121*tmp66;
      real_t tmp124 = 2.0*tmp123;
      real_t tmp125 = tmp62*tmp87;
      real_t tmp126 = tmp64*tmp85;
      real_t tmp127 = tmp125 + tmp126;
      real_t tmp128 = tmp127*tmp67;
      real_t tmp129 = tmp127*tmp66;
      real_t tmp130 = 2.0*tmp129;
      real_t tmp131 = -tmp113 - tmp120 + tmp63*tmp92;
      real_t tmp132 = tmp131*tmp67;
      real_t tmp133 = tmp131*tmp66;
      real_t tmp134 = 2.0*tmp133;
      real_t tmp135 = -tmp114 - tmp126 + tmp62*tmp95;
      real_t tmp136 = tmp135*tmp67;
      real_t tmp137 = tmp135*tmp66;
      real_t tmp138 = 2.0*tmp137;
      real_t tmp139 = -tmp119 - tmp125 + tmp64*tmp97;
      real_t tmp140 = tmp139*tmp67;
      real_t tmp141 = tmp139*tmp66;
      real_t tmp142 = 2.0*tmp141;
      elMat(0,0) += w * tmp58*tmp68;
      elMat(0,1) += w * tmp70*tmp72;
      elMat(0,2) += w * tmp70*tmp74;
      elMat(0,3) += w * tmp69*tmp77;
      elMat(0,4) += w * tmp68*tmp81;
      elMat(0,5) += w * tmp68*tmp84;
      elMat(0,6) += w * tmp68*tmp89;
      elMat(0,7) += w * tmp68*tmp93;
      elMat(0,8) += w * tmp68*tmp96;
      elMat(0,9) += w * tmp68*tmp98;
      elMat(1,0) += w * tmp101*tmp99;
      elMat(1,1) += w * 16.0*tmp100*tmp53*std::pow(x_hat[0] - 0.25, 2);
      elMat(1,2) += w * tmp102*tmp74;
      elMat(1,3) += w * tmp102*tmp103;
      elMat(1,4) += w * tmp104*tmp81;
      elMat(1,5) += w * tmp104*tmp84;
      elMat(1,6) += w * tmp104*tmp89;
      elMat(1,7) += w * tmp104*tmp93;
      elMat(1,8) += w * tmp104*tmp96;
      elMat(1,9) += w * tmp104*tmp98;
      elMat(2,0) += w * tmp106*tmp99;
      elMat(2,1) += w * tmp107*tmp72;
      elMat(2,2) += w * 16.0*tmp105*tmp57*std::pow(x_hat[1] - 0.25, 2);
      elMat(2,3) += w * tmp103*tmp107;
      elMat(2,4) += w * tmp108*tmp81;
      elMat(2,5) += w * tmp108*tmp84;
      elMat(2,6) += w * tmp108*tmp89;
      elMat(2,7) += w * tmp108*tmp93;
      elMat(2,8) += w * tmp108*tmp96;
      elMat(2,9) += w * tmp108*tmp98;
      elMat(3,0) += w * tmp110*tmp99;
      elMat(3,1) += w * tmp111*tmp72;
      elMat(3,2) += w * tmp111*tmp74;
      elMat(3,3) += w * 16.0*tmp109*tmp42*std::pow(x_hat[2] - 0.25, 2);
      elMat(3,4) += w * tmp112*tmp81;
      elMat(3,5) += w * tmp112*tmp84;
      elMat(3,6) += w * tmp112*tmp89;
      elMat(3,7) += w * tmp112*tmp93;
      elMat(3,8) += w * tmp112*tmp96;
      elMat(3,9) += w * tmp112*tmp98;
      elMat(4,0) += w * tmp116*tmp58;
      elMat(4,1) += w * tmp118*tmp72;
      elMat(4,2) += w * tmp118*tmp74;
      elMat(4,3) += w * tmp117*tmp77;
      elMat(4,4) += w * tmp116*tmp81;
      elMat(4,5) += w * tmp116*tmp84;
      elMat(4,6) += w * tmp116*tmp89;
      elMat(4,7) += w * tmp116*tmp93;
      elMat(4,8) += w * tmp116*tmp96;
      elMat(4,9) += w * tmp116*tmp98;
      elMat(5,0) += w * tmp122*tmp58;
      elMat(5,1) += w * tmp124*tmp72;
      elMat(5,2) += w * tmp124*tmp74;
      elMat(5,3) += w * tmp123*tmp77;
      elMat(5,4) += w * tmp122*tmp81;
      elMat(5,5) += w * tmp122*tmp84;
      elMat(5,6) += w * tmp122*tmp89;
      elMat(5,7) += w * tmp122*tmp93;
      elMat(5,8) += w * tmp122*tmp96;
      elMat(5,9) += w * tmp122*tmp98;
      elMat(6,0) += w * tmp128*tmp58;
      elMat(6,1) += w * tmp130*tmp72;
      elMat(6,2) += w * tmp130*tmp74;
      elMat(6,3) += w * tmp129*tmp77;
      elMat(6,4) += w * tmp128*tmp81;
      elMat(6,5) += w * tmp128*tmp84;
      elMat(6,6) += w * tmp128*tmp89;
      elMat(6,7) += w * tmp128*tmp93;
      elMat(6,8) += w * tmp128*tmp96;
      elMat(6,9) += w * tmp128*tmp98;
      elMat(7,0) += w * tmp132*tmp58;
      elMat(7,1) += w * tmp134*tmp72;
      elMat(7,2) += w * tmp134*tmp74;
      elMat(7,3) += w * tmp133*tmp77;
      elMat(7,4) += w * tmp132*tmp81;
      elMat(7,5) += w * tmp132*tmp84;
      elMat(7,6) += w * tmp132*tmp89;
      elMat(7,7) += w * tmp132*tmp93;
      elMat(7,8) += w * tmp132*tmp96;
      elMat(7,9) += w * tmp132*tmp98;
      elMat(8,0) += w * tmp136*tmp58;
      elMat(8,1) += w * tmp138*tmp72;
      elMat(8,2) += w * tmp138*tmp74;
      elMat(8,3) += w * tmp137*tmp77;
      elMat(8,4) += w * tmp136*tmp81;
      elMat(8,5) += w * tmp136*tmp84;
      elMat(8,6) += w * tmp136*tmp89;
      elMat(8,7) += w * tmp136*tmp93;
      elMat(8,8) += w * tmp136*tmp96;
      elMat(8,9) += w * tmp136*tmp98;
      elMat(9,0) += w * tmp140*tmp58;
      elMat(9,1) += w * tmp142*tmp72;
      elMat(9,2) += w * tmp142*tmp74;
      elMat(9,3) += w * tmp141*tmp77;
      elMat(9,4) += w * tmp140*tmp81;
      elMat(9,5) += w * tmp140*tmp84;
      elMat(9,6) += w * tmp140*tmp89;
      elMat(9,7) += w * tmp140*tmp93;
      elMat(9,8) += w * tmp140*tmp96;
      elMat(9,9) += w * tmp140*tmp98;
   }

   void integrateAll( const std::array< Point3D, 4 >& coords, Matrix10r& elMat ) const final
   {
      Point3D x_hat;
      Point3D x_tilde;
      Matrix3r DF;
      elMat(0,0) = 0;
      elMat(0,1) = 0;
      elMat(0,2) = 0;
      elMat(0,3) = 0;
      elMat(0,4) = 0;
      elMat(0,5) = 0;
      elMat(0,6) = 0;
      elMat(0,7) = 0;
      elMat(0,8) = 0;
      elMat(0,9) = 0;
      elMat(1,0) = 0;
      elMat(1,1) = 0;
      elMat(1,2) = 0;
      elMat(1,3) = 0;
      elMat(1,4) = 0;
      elMat(1,5) = 0;
      elMat(1,6) = 0;
      elMat(1,7) = 0;
      elMat(1,8) = 0;
      elMat(1,9) = 0;
      elMat(2,0) = 0;
      elMat(2,1) = 0;
      elMat(2,2) = 0;
      elMat(2,3) = 0;
      elMat(2,4) = 0;
      elMat(2,5) = 0;
      elMat(2,6) = 0;
      elMat(2,7) = 0;
      elMat(2,8) = 0;
      elMat(2,9) = 0;
      elMat(3,0) = 0;
      elMat(3,1) = 0;
      elMat(3,2) = 0;
      elMat(3,3) = 0;
      elMat(3,4) = 0;
      elMat(3,5) = 0;
      elMat(3,6) = 0;
      elMat(3,7) = 0;
      elMat(3,8) = 0;
      elMat(3,9) = 0;
      elMat(4,0) = 0;
      elMat(4,1) = 0;
      elMat(4,2) = 0;
      elMat(4,3) = 0;
      elMat(4,4) = 0;
      elMat(4,5) = 0;
      elMat(4,6) = 0;
      elMat(4,7) = 0;
      elMat(4,8) = 0;
      elMat(4,9) = 0;
      elMat(5,0) = 0;
      elMat(5,1) = 0;
      elMat(5,2) = 0;
      elMat(5,3) = 0;
      elMat(5,4) = 0;
      elMat(5,5) = 0;
      elMat(5,6) = 0;
      elMat(5,7) = 0;
      elMat(5,8) = 0;
      elMat(5,9) = 0;
      elMat(6,0) = 0;
      elMat(6,1) = 0;
      elMat(6,2) = 0;
      elMat(6,3) = 0;
      elMat(6,4) = 0;
      elMat(6,5) = 0;
      elMat(6,6) = 0;
      elMat(6,7) = 0;
      elMat(6,8) = 0;
      elMat(6,9) = 0;
      elMat(7,0) = 0;
      elMat(7,1) = 0;
      elMat(7,2) = 0;
      elMat(7,3) = 0;
      elMat(7,4) = 0;
      elMat(7,5) = 0;
      elMat(7,6) = 0;
      elMat(7,7) = 0;
      elMat(7,8) = 0;
      elMat(7,9) = 0;
      elMat(8,0) = 0;
      elMat(8,1) = 0;
      elMat(8,2) = 0;
      elMat(8,3) = 0;
      elMat(8,4) = 0;
      elMat(8,5) = 0;
      elMat(8,6) = 0;
      elMat(8,7) = 0;
      elMat(8,8) = 0;
      elMat(8,9) = 0;
      elMat(9,0) = 0;
      elMat(9,1) = 0;
      elMat(9,2) = 0;
      elMat(9,3) = 0;
      elMat(9,4) = 0;
      elMat(9,5) = 0;
      elMat(9,6) = 0;
      elMat(9,7) = 0;
      elMat(9,8) = 0;
      elMat(9,9) = 0;
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.5854101966249684;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.585410196624968*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.585410196624968*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.585410196624968*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.5854101966249684;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.585410196624968*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.585410196624968*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.585410196624968*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.5854101966249684;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.585410196624968*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.585410196624968*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.585410196624968*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.585410196624968*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.585410196624968*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.585410196624968*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
   }

   static std::function< real_t( const Point3D&, const std::shared_ptr< GeometryMap >& ) > callback;

};

class P2Form_epsilon_31 : public P2FormHyTeG {
 public:
   void evalQuadraturePoint2D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,3>& coords, const Matrix2r& DF, real_t w, Matrix6r& elMat) const
   {
      WALBERLA_ABORT("Not available in 2D");
   }

   void integrateAll( const std::array< Point3D, 3 >& coords, Matrix6r& elMat ) const final
   {
      WALBERLA_ABORT("Not available in 2D");
   }

   void evalQuadraturePoint3D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,4>& coords, const Matrix3r& DF, real_t w, Matrix10r& elMat) const
   {
      real_t tmp0 = coords[1][0]*coords[3][1];
      real_t tmp1 = coords[1][1]*coords[3][0];
      real_t tmp2 = coords[0][0]*coords[1][1];
      real_t tmp3 = coords[0][1]*coords[1][0];
      real_t tmp4 = tmp2 - tmp3;
      real_t tmp5 = coords[0][1]*coords[3][0];
      real_t tmp6 = coords[0][0]*coords[3][1];
      real_t tmp7 = tmp5 - tmp6;
      real_t tmp8 = tmp0 - tmp1 + tmp4 + tmp7;
      real_t tmp9 = DF(0,0)*DF(1,1);
      real_t tmp10 = DF(0,1)*DF(1,0);
      real_t tmp11 = DF(0,1)*DF(1,2);
      real_t tmp12 = DF(0,2)*DF(1,0);
      real_t tmp13 = DF(0,0)*DF(1,2);
      real_t tmp14 = DF(0,2)*DF(1,1);
      real_t tmp15 = DF(2,0)*tmp11 - DF(2,0)*tmp14 + DF(2,1)*tmp12 - DF(2,1)*tmp13 - DF(2,2)*tmp10 + DF(2,2)*tmp9;
      real_t tmp16 = coords[0][0]*coords[3][2];
      real_t tmp17 = coords[0][1]*coords[1][2];
      real_t tmp18 = coords[0][2]*coords[1][0];
      real_t tmp19 = coords[0][2]*coords[3][1];
      real_t tmp20 = coords[1][1]*coords[3][2];
      real_t tmp21 = coords[1][2]*coords[3][0];
      real_t tmp22 = coords[0][0]*coords[1][2];
      real_t tmp23 = coords[0][1]*coords[3][2];
      real_t tmp24 = coords[0][2]*coords[1][1];
      real_t tmp25 = coords[0][2]*coords[3][0];
      real_t tmp26 = coords[1][0]*coords[3][2];
      real_t tmp27 = coords[1][2]*coords[3][1];
      real_t tmp28 = -coords[0][2]*tmp0 + coords[0][2]*tmp1 - coords[1][2]*tmp5 + coords[1][2]*tmp6 + coords[2][0]*tmp17 + coords[2][0]*tmp19 + coords[2][0]*tmp20 - coords[2][0]*tmp23 - coords[2][0]*tmp24 - coords[2][0]*tmp27 + coords[2][1]*tmp16 + coords[2][1]*tmp18 + coords[2][1]*tmp21 - coords[2][1]*tmp22 - coords[2][1]*tmp25 - coords[2][1]*tmp26 + coords[2][2]*tmp0 - coords[2][2]*tmp1 + coords[2][2]*tmp2 - coords[2][2]*tmp3 + coords[2][2]*tmp5 - coords[2][2]*tmp6 - coords[3][2]*tmp2 + coords[3][2]*tmp3;
      real_t tmp29 = 1/(tmp15*tmp28);
      real_t tmp30 = tmp29*(-tmp10 + tmp9);
      real_t tmp31 = -tmp18 + tmp22;
      real_t tmp32 = -tmp16 + tmp25;
      real_t tmp33 = -tmp21 + tmp26 + tmp31 + tmp32;
      real_t tmp34 = tmp29*(-tmp12 + tmp13);
      real_t tmp35 = tmp17 - tmp24;
      real_t tmp36 = tmp19 - tmp23;
      real_t tmp37 = tmp20 - tmp27 + tmp35 + tmp36;
      real_t tmp38 = tmp29*(tmp11 - tmp14);
      real_t tmp39 = tmp30*tmp8 + tmp33*tmp34 + tmp37*tmp38;
      real_t tmp40 = 4.0*x_hat[0];
      real_t tmp41 = 4.0*x_hat[1];
      real_t tmp42 = 4.0*x_hat[2];
      real_t tmp43 = 0.5*tmp40 + 0.5*tmp41 + 0.5*tmp42 - 1.5;
      real_t tmp44 = coords[0][1]*coords[2][0];
      real_t tmp45 = coords[0][0]*coords[2][1];
      real_t tmp46 = coords[1][0]*coords[2][1] - coords[1][1]*coords[2][0] + tmp4 + tmp44 - tmp45;
      real_t tmp47 = coords[0][2]*coords[2][0];
      real_t tmp48 = coords[0][0]*coords[2][2];
      real_t tmp49 = coords[1][0]*coords[2][2] - coords[1][2]*coords[2][0] + tmp31 + tmp47 - tmp48;
      real_t tmp50 = coords[0][2]*coords[2][1];
      real_t tmp51 = coords[0][1]*coords[2][2];
      real_t tmp52 = coords[1][1]*coords[2][2] - coords[1][2]*coords[2][1] + tmp35 + tmp50 - tmp51;
      real_t tmp53 = -tmp30*tmp46 - tmp34*tmp49 - tmp38*tmp52;
      real_t tmp54 = coords[2][0]*coords[3][1] - coords[2][1]*coords[3][0] - tmp44 + tmp45 + tmp7;
      real_t tmp55 = coords[2][0]*coords[3][2] - coords[2][2]*coords[3][0] + tmp32 - tmp47 + tmp48;
      real_t tmp56 = coords[2][1]*coords[3][2] - coords[2][2]*coords[3][1] + tmp36 - tmp50 + tmp51;
      real_t tmp57 = -tmp30*tmp54 - tmp34*tmp55 - tmp38*tmp56;
      real_t tmp58 = tmp39*tmp43 + tmp43*tmp53 + tmp43*tmp57;
      real_t tmp59 = tmp29*(DF(1,0)*DF(2,1) - DF(1,1)*DF(2,0));
      real_t tmp60 = tmp29*(DF(1,0)*DF(2,2) - DF(1,2)*DF(2,0));
      real_t tmp61 = tmp29*(DF(1,1)*DF(2,2) - DF(1,2)*DF(2,1));
      real_t tmp62 = tmp33*tmp60 + tmp37*tmp61 + tmp59*tmp8;
      real_t tmp63 = -tmp46*tmp59 - tmp49*tmp60 - tmp52*tmp61;
      real_t tmp64 = -tmp54*tmp59 - tmp55*tmp60 - tmp56*tmp61;
      real_t tmp65 = tmp43*tmp62 + tmp43*tmp63 + tmp43*tmp64;
      real_t tmp66 = std::fabs(tmp15*tmp28);
      real_t tmp67 = 4*tmp66;
      real_t tmp68 = tmp65*tmp67;
      real_t tmp69 = tmp65*tmp66;
      real_t tmp70 = 2.0*tmp69;
      real_t tmp71 = tmp40 - 1.0;
      real_t tmp72 = tmp57*tmp71;
      real_t tmp73 = tmp41 - 1.0;
      real_t tmp74 = tmp39*tmp73;
      real_t tmp75 = tmp42 - 1.0;
      real_t tmp76 = 2.0*tmp53;
      real_t tmp77 = tmp75*tmp76;
      real_t tmp78 = 2.0*x_hat[2];
      real_t tmp79 = tmp39*tmp78;
      real_t tmp80 = tmp76*x_hat[1];
      real_t tmp81 = tmp79 + tmp80;
      real_t tmp82 = tmp76*x_hat[0];
      real_t tmp83 = tmp57*tmp78;
      real_t tmp84 = tmp82 + tmp83;
      real_t tmp85 = 2.0*x_hat[0];
      real_t tmp86 = tmp39*tmp85;
      real_t tmp87 = 2.0*x_hat[1];
      real_t tmp88 = tmp57*tmp87;
      real_t tmp89 = tmp86 + tmp88;
      real_t tmp90 = -tmp41;
      real_t tmp91 = 4.0 - tmp40;
      real_t tmp92 = 0.5*tmp90 + 0.5*tmp91 - 4.0*x_hat[2];
      real_t tmp93 = tmp53*tmp92 - tmp79 - tmp83;
      real_t tmp94 = -tmp42;
      real_t tmp95 = 0.5*tmp91 + 0.5*tmp94 - 4.0*x_hat[1];
      real_t tmp96 = tmp39*tmp95 - tmp80 - tmp88;
      real_t tmp97 = 0.5*tmp90 + 0.5*tmp94 - 4.0*x_hat[0] + 2.0;
      real_t tmp98 = tmp57*tmp97 - tmp82 - tmp86;
      real_t tmp99 = 2.0*tmp58;
      real_t tmp100 = tmp64*tmp66;
      real_t tmp101 = tmp100*tmp71;
      real_t tmp102 = 1.0*tmp101;
      real_t tmp103 = tmp53*tmp75;
      real_t tmp104 = 2.0*tmp101;
      real_t tmp105 = tmp62*tmp66;
      real_t tmp106 = tmp105*tmp73;
      real_t tmp107 = 1.0*tmp106;
      real_t tmp108 = 2.0*tmp106;
      real_t tmp109 = tmp63*tmp66;
      real_t tmp110 = tmp109*tmp75;
      real_t tmp111 = 1.0*tmp110;
      real_t tmp112 = 2.0*tmp110;
      real_t tmp113 = tmp62*tmp78;
      real_t tmp114 = tmp63*tmp87;
      real_t tmp115 = tmp113 + tmp114;
      real_t tmp116 = tmp115*tmp67;
      real_t tmp117 = tmp115*tmp66;
      real_t tmp118 = 2.0*tmp117;
      real_t tmp119 = tmp63*tmp85;
      real_t tmp120 = tmp64*tmp78;
      real_t tmp121 = tmp119 + tmp120;
      real_t tmp122 = tmp121*tmp67;
      real_t tmp123 = tmp121*tmp66;
      real_t tmp124 = 2.0*tmp123;
      real_t tmp125 = tmp62*tmp85;
      real_t tmp126 = tmp64*tmp87;
      real_t tmp127 = tmp125 + tmp126;
      real_t tmp128 = tmp127*tmp67;
      real_t tmp129 = tmp127*tmp66;
      real_t tmp130 = 2.0*tmp129;
      real_t tmp131 = -tmp113 - tmp120 + tmp63*tmp92;
      real_t tmp132 = tmp131*tmp67;
      real_t tmp133 = tmp131*tmp66;
      real_t tmp134 = 2.0*tmp133;
      real_t tmp135 = -tmp114 - tmp126 + tmp62*tmp95;
      real_t tmp136 = tmp135*tmp67;
      real_t tmp137 = tmp135*tmp66;
      real_t tmp138 = 2.0*tmp137;
      real_t tmp139 = -tmp119 - tmp125 + tmp64*tmp97;
      real_t tmp140 = tmp139*tmp67;
      real_t tmp141 = tmp139*tmp66;
      real_t tmp142 = 2.0*tmp141;
      elMat(0,0) += w * tmp58*tmp68;
      elMat(0,1) += w * tmp70*tmp72;
      elMat(0,2) += w * tmp70*tmp74;
      elMat(0,3) += w * tmp69*tmp77;
      elMat(0,4) += w * tmp68*tmp81;
      elMat(0,5) += w * tmp68*tmp84;
      elMat(0,6) += w * tmp68*tmp89;
      elMat(0,7) += w * tmp68*tmp93;
      elMat(0,8) += w * tmp68*tmp96;
      elMat(0,9) += w * tmp68*tmp98;
      elMat(1,0) += w * tmp101*tmp99;
      elMat(1,1) += w * 16.0*tmp100*tmp57*std::pow(x_hat[0] - 0.25, 2);
      elMat(1,2) += w * tmp102*tmp74;
      elMat(1,3) += w * tmp102*tmp103;
      elMat(1,4) += w * tmp104*tmp81;
      elMat(1,5) += w * tmp104*tmp84;
      elMat(1,6) += w * tmp104*tmp89;
      elMat(1,7) += w * tmp104*tmp93;
      elMat(1,8) += w * tmp104*tmp96;
      elMat(1,9) += w * tmp104*tmp98;
      elMat(2,0) += w * tmp106*tmp99;
      elMat(2,1) += w * tmp107*tmp72;
      elMat(2,2) += w * 16.0*tmp105*tmp39*std::pow(x_hat[1] - 0.25, 2);
      elMat(2,3) += w * tmp103*tmp107;
      elMat(2,4) += w * tmp108*tmp81;
      elMat(2,5) += w * tmp108*tmp84;
      elMat(2,6) += w * tmp108*tmp89;
      elMat(2,7) += w * tmp108*tmp93;
      elMat(2,8) += w * tmp108*tmp96;
      elMat(2,9) += w * tmp108*tmp98;
      elMat(3,0) += w * tmp110*tmp99;
      elMat(3,1) += w * tmp111*tmp72;
      elMat(3,2) += w * tmp111*tmp74;
      elMat(3,3) += w * 16.0*tmp109*tmp53*std::pow(x_hat[2] - 0.25, 2);
      elMat(3,4) += w * tmp112*tmp81;
      elMat(3,5) += w * tmp112*tmp84;
      elMat(3,6) += w * tmp112*tmp89;
      elMat(3,7) += w * tmp112*tmp93;
      elMat(3,8) += w * tmp112*tmp96;
      elMat(3,9) += w * tmp112*tmp98;
      elMat(4,0) += w * tmp116*tmp58;
      elMat(4,1) += w * tmp118*tmp72;
      elMat(4,2) += w * tmp118*tmp74;
      elMat(4,3) += w * tmp117*tmp77;
      elMat(4,4) += w * tmp116*tmp81;
      elMat(4,5) += w * tmp116*tmp84;
      elMat(4,6) += w * tmp116*tmp89;
      elMat(4,7) += w * tmp116*tmp93;
      elMat(4,8) += w * tmp116*tmp96;
      elMat(4,9) += w * tmp116*tmp98;
      elMat(5,0) += w * tmp122*tmp58;
      elMat(5,1) += w * tmp124*tmp72;
      elMat(5,2) += w * tmp124*tmp74;
      elMat(5,3) += w * tmp123*tmp77;
      elMat(5,4) += w * tmp122*tmp81;
      elMat(5,5) += w * tmp122*tmp84;
      elMat(5,6) += w * tmp122*tmp89;
      elMat(5,7) += w * tmp122*tmp93;
      elMat(5,8) += w * tmp122*tmp96;
      elMat(5,9) += w * tmp122*tmp98;
      elMat(6,0) += w * tmp128*tmp58;
      elMat(6,1) += w * tmp130*tmp72;
      elMat(6,2) += w * tmp130*tmp74;
      elMat(6,3) += w * tmp129*tmp77;
      elMat(6,4) += w * tmp128*tmp81;
      elMat(6,5) += w * tmp128*tmp84;
      elMat(6,6) += w * tmp128*tmp89;
      elMat(6,7) += w * tmp128*tmp93;
      elMat(6,8) += w * tmp128*tmp96;
      elMat(6,9) += w * tmp128*tmp98;
      elMat(7,0) += w * tmp132*tmp58;
      elMat(7,1) += w * tmp134*tmp72;
      elMat(7,2) += w * tmp134*tmp74;
      elMat(7,3) += w * tmp133*tmp77;
      elMat(7,4) += w * tmp132*tmp81;
      elMat(7,5) += w * tmp132*tmp84;
      elMat(7,6) += w * tmp132*tmp89;
      elMat(7,7) += w * tmp132*tmp93;
      elMat(7,8) += w * tmp132*tmp96;
      elMat(7,9) += w * tmp132*tmp98;
      elMat(8,0) += w * tmp136*tmp58;
      elMat(8,1) += w * tmp138*tmp72;
      elMat(8,2) += w * tmp138*tmp74;
      elMat(8,3) += w * tmp137*tmp77;
      elMat(8,4) += w * tmp136*tmp81;
      elMat(8,5) += w * tmp136*tmp84;
      elMat(8,6) += w * tmp136*tmp89;
      elMat(8,7) += w * tmp136*tmp93;
      elMat(8,8) += w * tmp136*tmp96;
      elMat(8,9) += w * tmp136*tmp98;
      elMat(9,0) += w * tmp140*tmp58;
      elMat(9,1) += w * tmp142*tmp72;
      elMat(9,2) += w * tmp142*tmp74;
      elMat(9,3) += w * tmp141*tmp77;
      elMat(9,4) += w * tmp140*tmp81;
      elMat(9,5) += w * tmp140*tmp84;
      elMat(9,6) += w * tmp140*tmp89;
      elMat(9,7) += w * tmp140*tmp93;
      elMat(9,8) += w * tmp140*tmp96;
      elMat(9,9) += w * tmp140*tmp98;
   }

   void integrateAll( const std::array< Point3D, 4 >& coords, Matrix10r& elMat ) const final
   {
      Point3D x_hat;
      Point3D x_tilde;
      Matrix3r DF;
      elMat(0,0) = 0;
      elMat(0,1) = 0;
      elMat(0,2) = 0;
      elMat(0,3) = 0;
      elMat(0,4) = 0;
      elMat(0,5) = 0;
      elMat(0,6) = 0;
      elMat(0,7) = 0;
      elMat(0,8) = 0;
      elMat(0,9) = 0;
      elMat(1,0) = 0;
      elMat(1,1) = 0;
      elMat(1,2) = 0;
      elMat(1,3) = 0;
      elMat(1,4) = 0;
      elMat(1,5) = 0;
      elMat(1,6) = 0;
      elMat(1,7) = 0;
      elMat(1,8) = 0;
      elMat(1,9) = 0;
      elMat(2,0) = 0;
      elMat(2,1) = 0;
      elMat(2,2) = 0;
      elMat(2,3) = 0;
      elMat(2,4) = 0;
      elMat(2,5) = 0;
      elMat(2,6) = 0;
      elMat(2,7) = 0;
      elMat(2,8) = 0;
      elMat(2,9) = 0;
      elMat(3,0) = 0;
      elMat(3,1) = 0;
      elMat(3,2) = 0;
      elMat(3,3) = 0;
      elMat(3,4) = 0;
      elMat(3,5) = 0;
      elMat(3,6) = 0;
      elMat(3,7) = 0;
      elMat(3,8) = 0;
      elMat(3,9) = 0;
      elMat(4,0) = 0;
      elMat(4,1) = 0;
      elMat(4,2) = 0;
      elMat(4,3) = 0;
      elMat(4,4) = 0;
      elMat(4,5) = 0;
      elMat(4,6) = 0;
      elMat(4,7) = 0;
      elMat(4,8) = 0;
      elMat(4,9) = 0;
      elMat(5,0) = 0;
      elMat(5,1) = 0;
      elMat(5,2) = 0;
      elMat(5,3) = 0;
      elMat(5,4) = 0;
      elMat(5,5) = 0;
      elMat(5,6) = 0;
      elMat(5,7) = 0;
      elMat(5,8) = 0;
      elMat(5,9) = 0;
      elMat(6,0) = 0;
      elMat(6,1) = 0;
      elMat(6,2) = 0;
      elMat(6,3) = 0;
      elMat(6,4) = 0;
      elMat(6,5) = 0;
      elMat(6,6) = 0;
      elMat(6,7) = 0;
      elMat(6,8) = 0;
      elMat(6,9) = 0;
      elMat(7,0) = 0;
      elMat(7,1) = 0;
      elMat(7,2) = 0;
      elMat(7,3) = 0;
      elMat(7,4) = 0;
      elMat(7,5) = 0;
      elMat(7,6) = 0;
      elMat(7,7) = 0;
      elMat(7,8) = 0;
      elMat(7,9) = 0;
      elMat(8,0) = 0;
      elMat(8,1) = 0;
      elMat(8,2) = 0;
      elMat(8,3) = 0;
      elMat(8,4) = 0;
      elMat(8,5) = 0;
      elMat(8,6) = 0;
      elMat(8,7) = 0;
      elMat(8,8) = 0;
      elMat(8,9) = 0;
      elMat(9,0) = 0;
      elMat(9,1) = 0;
      elMat(9,2) = 0;
      elMat(9,3) = 0;
      elMat(9,4) = 0;
      elMat(9,5) = 0;
      elMat(9,6) = 0;
      elMat(9,7) = 0;
      elMat(9,8) = 0;
      elMat(9,9) = 0;
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.5854101966249684;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.585410196624968*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.585410196624968*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.585410196624968*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.5854101966249684;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.585410196624968*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.585410196624968*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.585410196624968*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.5854101966249684;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.585410196624968*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.585410196624968*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.585410196624968*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.585410196624968*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.585410196624968*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.585410196624968*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
   }

};

class P2Form_epsilon_32 : public P2FormHyTeG {
 public:
   void evalQuadraturePoint2D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,3>& coords, const Matrix2r& DF, real_t w, Matrix6r& elMat) const
   {
      WALBERLA_ABORT("Not available in 2D");
   }

   void integrateAll( const std::array< Point3D, 3 >& coords, Matrix6r& elMat ) const final
   {
      WALBERLA_ABORT("Not available in 2D");
   }

   void evalQuadraturePoint3D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,4>& coords, const Matrix3r& DF, real_t w, Matrix10r& elMat) const
   {
      real_t tmp0 = coords[1][0]*coords[3][1];
      real_t tmp1 = coords[1][1]*coords[3][0];
      real_t tmp2 = coords[0][0]*coords[1][1];
      real_t tmp3 = coords[0][1]*coords[1][0];
      real_t tmp4 = tmp2 - tmp3;
      real_t tmp5 = coords[0][1]*coords[3][0];
      real_t tmp6 = coords[0][0]*coords[3][1];
      real_t tmp7 = tmp5 - tmp6;
      real_t tmp8 = tmp0 - tmp1 + tmp4 + tmp7;
      real_t tmp9 = DF(0,0)*DF(1,1);
      real_t tmp10 = DF(0,1)*DF(1,0);
      real_t tmp11 = DF(0,1)*DF(1,2);
      real_t tmp12 = DF(0,2)*DF(1,0);
      real_t tmp13 = DF(0,0)*DF(1,2);
      real_t tmp14 = DF(0,2)*DF(1,1);
      real_t tmp15 = DF(2,0)*tmp11 - DF(2,0)*tmp14 + DF(2,1)*tmp12 - DF(2,1)*tmp13 - DF(2,2)*tmp10 + DF(2,2)*tmp9;
      real_t tmp16 = coords[0][0]*coords[3][2];
      real_t tmp17 = coords[0][1]*coords[1][2];
      real_t tmp18 = coords[0][2]*coords[1][0];
      real_t tmp19 = coords[0][2]*coords[3][1];
      real_t tmp20 = coords[1][1]*coords[3][2];
      real_t tmp21 = coords[1][2]*coords[3][0];
      real_t tmp22 = coords[0][0]*coords[1][2];
      real_t tmp23 = coords[0][1]*coords[3][2];
      real_t tmp24 = coords[0][2]*coords[1][1];
      real_t tmp25 = coords[0][2]*coords[3][0];
      real_t tmp26 = coords[1][0]*coords[3][2];
      real_t tmp27 = coords[1][2]*coords[3][1];
      real_t tmp28 = -coords[0][2]*tmp0 + coords[0][2]*tmp1 - coords[1][2]*tmp5 + coords[1][2]*tmp6 + coords[2][0]*tmp17 + coords[2][0]*tmp19 + coords[2][0]*tmp20 - coords[2][0]*tmp23 - coords[2][0]*tmp24 - coords[2][0]*tmp27 + coords[2][1]*tmp16 + coords[2][1]*tmp18 + coords[2][1]*tmp21 - coords[2][1]*tmp22 - coords[2][1]*tmp25 - coords[2][1]*tmp26 + coords[2][2]*tmp0 - coords[2][2]*tmp1 + coords[2][2]*tmp2 - coords[2][2]*tmp3 + coords[2][2]*tmp5 - coords[2][2]*tmp6 - coords[3][2]*tmp2 + coords[3][2]*tmp3;
      real_t tmp29 = 1/(tmp15*tmp28);
      real_t tmp30 = tmp29*(-tmp10 + tmp9);
      real_t tmp31 = -tmp18 + tmp22;
      real_t tmp32 = -tmp16 + tmp25;
      real_t tmp33 = -tmp21 + tmp26 + tmp31 + tmp32;
      real_t tmp34 = tmp29*(-tmp12 + tmp13);
      real_t tmp35 = tmp17 - tmp24;
      real_t tmp36 = tmp19 - tmp23;
      real_t tmp37 = tmp20 - tmp27 + tmp35 + tmp36;
      real_t tmp38 = tmp29*(tmp11 - tmp14);
      real_t tmp39 = tmp30*tmp8 + tmp33*tmp34 + tmp37*tmp38;
      real_t tmp40 = 4.0*x_hat[0];
      real_t tmp41 = 4.0*x_hat[1];
      real_t tmp42 = 4.0*x_hat[2];
      real_t tmp43 = 0.5*tmp40 + 0.5*tmp41 + 0.5*tmp42 - 1.5;
      real_t tmp44 = coords[0][1]*coords[2][0];
      real_t tmp45 = coords[0][0]*coords[2][1];
      real_t tmp46 = coords[1][0]*coords[2][1] - coords[1][1]*coords[2][0] + tmp4 + tmp44 - tmp45;
      real_t tmp47 = coords[0][2]*coords[2][0];
      real_t tmp48 = coords[0][0]*coords[2][2];
      real_t tmp49 = coords[1][0]*coords[2][2] - coords[1][2]*coords[2][0] + tmp31 + tmp47 - tmp48;
      real_t tmp50 = coords[0][2]*coords[2][1];
      real_t tmp51 = coords[0][1]*coords[2][2];
      real_t tmp52 = coords[1][1]*coords[2][2] - coords[1][2]*coords[2][1] + tmp35 + tmp50 - tmp51;
      real_t tmp53 = -tmp30*tmp46 - tmp34*tmp49 - tmp38*tmp52;
      real_t tmp54 = coords[2][0]*coords[3][1] - coords[2][1]*coords[3][0] - tmp44 + tmp45 + tmp7;
      real_t tmp55 = coords[2][0]*coords[3][2] - coords[2][2]*coords[3][0] + tmp32 - tmp47 + tmp48;
      real_t tmp56 = coords[2][1]*coords[3][2] - coords[2][2]*coords[3][1] + tmp36 - tmp50 + tmp51;
      real_t tmp57 = -tmp30*tmp54 - tmp34*tmp55 - tmp38*tmp56;
      real_t tmp58 = tmp39*tmp43 + tmp43*tmp53 + tmp43*tmp57;
      real_t tmp59 = tmp29*(DF(0,0)*DF(2,1) - DF(0,1)*DF(2,0));
      real_t tmp60 = tmp29*(DF(0,0)*DF(2,2) - DF(0,2)*DF(2,0));
      real_t tmp61 = tmp29*(DF(0,1)*DF(2,2) - DF(0,2)*DF(2,1));
      real_t tmp62 = tmp46*tmp59 + tmp49*tmp60 + tmp52*tmp61;
      real_t tmp63 = tmp54*tmp59 + tmp55*tmp60 + tmp56*tmp61;
      real_t tmp64 = -tmp33*tmp60 - tmp37*tmp61 - tmp59*tmp8;
      real_t tmp65 = tmp43*tmp62 + tmp43*tmp63 + tmp43*tmp64;
      real_t tmp66 = std::fabs(tmp15*tmp28);
      real_t tmp67 = 4*tmp66;
      real_t tmp68 = tmp65*tmp67;
      real_t tmp69 = tmp65*tmp66;
      real_t tmp70 = 2.0*tmp69;
      real_t tmp71 = tmp40 - 1.0;
      real_t tmp72 = tmp57*tmp71;
      real_t tmp73 = tmp41 - 1.0;
      real_t tmp74 = tmp39*tmp73;
      real_t tmp75 = tmp42 - 1.0;
      real_t tmp76 = 2.0*tmp53;
      real_t tmp77 = tmp75*tmp76;
      real_t tmp78 = 2.0*x_hat[2];
      real_t tmp79 = tmp39*tmp78;
      real_t tmp80 = tmp76*x_hat[1];
      real_t tmp81 = tmp79 + tmp80;
      real_t tmp82 = tmp76*x_hat[0];
      real_t tmp83 = tmp57*tmp78;
      real_t tmp84 = tmp82 + tmp83;
      real_t tmp85 = 2.0*x_hat[0];
      real_t tmp86 = tmp39*tmp85;
      real_t tmp87 = 2.0*x_hat[1];
      real_t tmp88 = tmp57*tmp87;
      real_t tmp89 = tmp86 + tmp88;
      real_t tmp90 = -tmp41;
      real_t tmp91 = 4.0 - tmp40;
      real_t tmp92 = 0.5*tmp90 + 0.5*tmp91 - 4.0*x_hat[2];
      real_t tmp93 = tmp53*tmp92 - tmp79 - tmp83;
      real_t tmp94 = -tmp42;
      real_t tmp95 = 0.5*tmp91 + 0.5*tmp94 - 4.0*x_hat[1];
      real_t tmp96 = tmp39*tmp95 - tmp80 - tmp88;
      real_t tmp97 = 0.5*tmp90 + 0.5*tmp94 - 4.0*x_hat[0] + 2.0;
      real_t tmp98 = tmp57*tmp97 - tmp82 - tmp86;
      real_t tmp99 = 2.0*tmp58;
      real_t tmp100 = tmp63*tmp66;
      real_t tmp101 = tmp100*tmp71;
      real_t tmp102 = 1.0*tmp101;
      real_t tmp103 = tmp53*tmp75;
      real_t tmp104 = 2.0*tmp101;
      real_t tmp105 = tmp64*tmp66;
      real_t tmp106 = tmp105*tmp73;
      real_t tmp107 = 1.0*tmp106;
      real_t tmp108 = 2.0*tmp106;
      real_t tmp109 = tmp62*tmp66;
      real_t tmp110 = tmp109*tmp75;
      real_t tmp111 = 1.0*tmp110;
      real_t tmp112 = 2.0*tmp110;
      real_t tmp113 = tmp62*tmp87;
      real_t tmp114 = tmp64*tmp78;
      real_t tmp115 = tmp113 + tmp114;
      real_t tmp116 = tmp115*tmp67;
      real_t tmp117 = tmp115*tmp66;
      real_t tmp118 = 2.0*tmp117;
      real_t tmp119 = tmp62*tmp85;
      real_t tmp120 = tmp63*tmp78;
      real_t tmp121 = tmp119 + tmp120;
      real_t tmp122 = tmp121*tmp67;
      real_t tmp123 = tmp121*tmp66;
      real_t tmp124 = 2.0*tmp123;
      real_t tmp125 = tmp63*tmp87;
      real_t tmp126 = tmp64*tmp85;
      real_t tmp127 = tmp125 + tmp126;
      real_t tmp128 = tmp127*tmp67;
      real_t tmp129 = tmp127*tmp66;
      real_t tmp130 = 2.0*tmp129;
      real_t tmp131 = -tmp114 - tmp120 + tmp62*tmp92;
      real_t tmp132 = tmp131*tmp67;
      real_t tmp133 = tmp131*tmp66;
      real_t tmp134 = 2.0*tmp133;
      real_t tmp135 = -tmp113 - tmp125 + tmp64*tmp95;
      real_t tmp136 = tmp135*tmp67;
      real_t tmp137 = tmp135*tmp66;
      real_t tmp138 = 2.0*tmp137;
      real_t tmp139 = -tmp119 - tmp126 + tmp63*tmp97;
      real_t tmp140 = tmp139*tmp67;
      real_t tmp141 = tmp139*tmp66;
      real_t tmp142 = 2.0*tmp141;
      elMat(0,0) += w * tmp58*tmp68;
      elMat(0,1) += w * tmp70*tmp72;
      elMat(0,2) += w * tmp70*tmp74;
      elMat(0,3) += w * tmp69*tmp77;
      elMat(0,4) += w * tmp68*tmp81;
      elMat(0,5) += w * tmp68*tmp84;
      elMat(0,6) += w * tmp68*tmp89;
      elMat(0,7) += w * tmp68*tmp93;
      elMat(0,8) += w * tmp68*tmp96;
      elMat(0,9) += w * tmp68*tmp98;
      elMat(1,0) += w * tmp101*tmp99;
      elMat(1,1) += w * 16.0*tmp100*tmp57*std::pow(x_hat[0] - 0.25, 2);
      elMat(1,2) += w * tmp102*tmp74;
      elMat(1,3) += w * tmp102*tmp103;
      elMat(1,4) += w * tmp104*tmp81;
      elMat(1,5) += w * tmp104*tmp84;
      elMat(1,6) += w * tmp104*tmp89;
      elMat(1,7) += w * tmp104*tmp93;
      elMat(1,8) += w * tmp104*tmp96;
      elMat(1,9) += w * tmp104*tmp98;
      elMat(2,0) += w * tmp106*tmp99;
      elMat(2,1) += w * tmp107*tmp72;
      elMat(2,2) += w * 16.0*tmp105*tmp39*std::pow(x_hat[1] - 0.25, 2);
      elMat(2,3) += w * tmp103*tmp107;
      elMat(2,4) += w * tmp108*tmp81;
      elMat(2,5) += w * tmp108*tmp84;
      elMat(2,6) += w * tmp108*tmp89;
      elMat(2,7) += w * tmp108*tmp93;
      elMat(2,8) += w * tmp108*tmp96;
      elMat(2,9) += w * tmp108*tmp98;
      elMat(3,0) += w * tmp110*tmp99;
      elMat(3,1) += w * tmp111*tmp72;
      elMat(3,2) += w * tmp111*tmp74;
      elMat(3,3) += w * 16.0*tmp109*tmp53*std::pow(x_hat[2] - 0.25, 2);
      elMat(3,4) += w * tmp112*tmp81;
      elMat(3,5) += w * tmp112*tmp84;
      elMat(3,6) += w * tmp112*tmp89;
      elMat(3,7) += w * tmp112*tmp93;
      elMat(3,8) += w * tmp112*tmp96;
      elMat(3,9) += w * tmp112*tmp98;
      elMat(4,0) += w * tmp116*tmp58;
      elMat(4,1) += w * tmp118*tmp72;
      elMat(4,2) += w * tmp118*tmp74;
      elMat(4,3) += w * tmp117*tmp77;
      elMat(4,4) += w * tmp116*tmp81;
      elMat(4,5) += w * tmp116*tmp84;
      elMat(4,6) += w * tmp116*tmp89;
      elMat(4,7) += w * tmp116*tmp93;
      elMat(4,8) += w * tmp116*tmp96;
      elMat(4,9) += w * tmp116*tmp98;
      elMat(5,0) += w * tmp122*tmp58;
      elMat(5,1) += w * tmp124*tmp72;
      elMat(5,2) += w * tmp124*tmp74;
      elMat(5,3) += w * tmp123*tmp77;
      elMat(5,4) += w * tmp122*tmp81;
      elMat(5,5) += w * tmp122*tmp84;
      elMat(5,6) += w * tmp122*tmp89;
      elMat(5,7) += w * tmp122*tmp93;
      elMat(5,8) += w * tmp122*tmp96;
      elMat(5,9) += w * tmp122*tmp98;
      elMat(6,0) += w * tmp128*tmp58;
      elMat(6,1) += w * tmp130*tmp72;
      elMat(6,2) += w * tmp130*tmp74;
      elMat(6,3) += w * tmp129*tmp77;
      elMat(6,4) += w * tmp128*tmp81;
      elMat(6,5) += w * tmp128*tmp84;
      elMat(6,6) += w * tmp128*tmp89;
      elMat(6,7) += w * tmp128*tmp93;
      elMat(6,8) += w * tmp128*tmp96;
      elMat(6,9) += w * tmp128*tmp98;
      elMat(7,0) += w * tmp132*tmp58;
      elMat(7,1) += w * tmp134*tmp72;
      elMat(7,2) += w * tmp134*tmp74;
      elMat(7,3) += w * tmp133*tmp77;
      elMat(7,4) += w * tmp132*tmp81;
      elMat(7,5) += w * tmp132*tmp84;
      elMat(7,6) += w * tmp132*tmp89;
      elMat(7,7) += w * tmp132*tmp93;
      elMat(7,8) += w * tmp132*tmp96;
      elMat(7,9) += w * tmp132*tmp98;
      elMat(8,0) += w * tmp136*tmp58;
      elMat(8,1) += w * tmp138*tmp72;
      elMat(8,2) += w * tmp138*tmp74;
      elMat(8,3) += w * tmp137*tmp77;
      elMat(8,4) += w * tmp136*tmp81;
      elMat(8,5) += w * tmp136*tmp84;
      elMat(8,6) += w * tmp136*tmp89;
      elMat(8,7) += w * tmp136*tmp93;
      elMat(8,8) += w * tmp136*tmp96;
      elMat(8,9) += w * tmp136*tmp98;
      elMat(9,0) += w * tmp140*tmp58;
      elMat(9,1) += w * tmp142*tmp72;
      elMat(9,2) += w * tmp142*tmp74;
      elMat(9,3) += w * tmp141*tmp77;
      elMat(9,4) += w * tmp140*tmp81;
      elMat(9,5) += w * tmp140*tmp84;
      elMat(9,6) += w * tmp140*tmp89;
      elMat(9,7) += w * tmp140*tmp93;
      elMat(9,8) += w * tmp140*tmp96;
      elMat(9,9) += w * tmp140*tmp98;
   }

   void integrateAll( const std::array< Point3D, 4 >& coords, Matrix10r& elMat ) const final
   {
      Point3D x_hat;
      Point3D x_tilde;
      Matrix3r DF;
      elMat(0,0) = 0;
      elMat(0,1) = 0;
      elMat(0,2) = 0;
      elMat(0,3) = 0;
      elMat(0,4) = 0;
      elMat(0,5) = 0;
      elMat(0,6) = 0;
      elMat(0,7) = 0;
      elMat(0,8) = 0;
      elMat(0,9) = 0;
      elMat(1,0) = 0;
      elMat(1,1) = 0;
      elMat(1,2) = 0;
      elMat(1,3) = 0;
      elMat(1,4) = 0;
      elMat(1,5) = 0;
      elMat(1,6) = 0;
      elMat(1,7) = 0;
      elMat(1,8) = 0;
      elMat(1,9) = 0;
      elMat(2,0) = 0;
      elMat(2,1) = 0;
      elMat(2,2) = 0;
      elMat(2,3) = 0;
      elMat(2,4) = 0;
      elMat(2,5) = 0;
      elMat(2,6) = 0;
      elMat(2,7) = 0;
      elMat(2,8) = 0;
      elMat(2,9) = 0;
      elMat(3,0) = 0;
      elMat(3,1) = 0;
      elMat(3,2) = 0;
      elMat(3,3) = 0;
      elMat(3,4) = 0;
      elMat(3,5) = 0;
      elMat(3,6) = 0;
      elMat(3,7) = 0;
      elMat(3,8) = 0;
      elMat(3,9) = 0;
      elMat(4,0) = 0;
      elMat(4,1) = 0;
      elMat(4,2) = 0;
      elMat(4,3) = 0;
      elMat(4,4) = 0;
      elMat(4,5) = 0;
      elMat(4,6) = 0;
      elMat(4,7) = 0;
      elMat(4,8) = 0;
      elMat(4,9) = 0;
      elMat(5,0) = 0;
      elMat(5,1) = 0;
      elMat(5,2) = 0;
      elMat(5,3) = 0;
      elMat(5,4) = 0;
      elMat(5,5) = 0;
      elMat(5,6) = 0;
      elMat(5,7) = 0;
      elMat(5,8) = 0;
      elMat(5,9) = 0;
      elMat(6,0) = 0;
      elMat(6,1) = 0;
      elMat(6,2) = 0;
      elMat(6,3) = 0;
      elMat(6,4) = 0;
      elMat(6,5) = 0;
      elMat(6,6) = 0;
      elMat(6,7) = 0;
      elMat(6,8) = 0;
      elMat(6,9) = 0;
      elMat(7,0) = 0;
      elMat(7,1) = 0;
      elMat(7,2) = 0;
      elMat(7,3) = 0;
      elMat(7,4) = 0;
      elMat(7,5) = 0;
      elMat(7,6) = 0;
      elMat(7,7) = 0;
      elMat(7,8) = 0;
      elMat(7,9) = 0;
      elMat(8,0) = 0;
      elMat(8,1) = 0;
      elMat(8,2) = 0;
      elMat(8,3) = 0;
      elMat(8,4) = 0;
      elMat(8,5) = 0;
      elMat(8,6) = 0;
      elMat(8,7) = 0;
      elMat(8,8) = 0;
      elMat(8,9) = 0;
      elMat(9,0) = 0;
      elMat(9,1) = 0;
      elMat(9,2) = 0;
      elMat(9,3) = 0;
      elMat(9,4) = 0;
      elMat(9,5) = 0;
      elMat(9,6) = 0;
      elMat(9,7) = 0;
      elMat(9,8) = 0;
      elMat(9,9) = 0;
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.5854101966249684;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.585410196624968*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.585410196624968*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.585410196624968*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.5854101966249684;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.585410196624968*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.585410196624968*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.585410196624968*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.5854101966249684;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.585410196624968*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.585410196624968*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.585410196624968*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.585410196624968*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.585410196624968*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.585410196624968*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
   }

};

class P2Form_epsilon_33 : public P2FormHyTeG {
 public:
   void evalQuadraturePoint2D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,3>& coords, const Matrix2r& DF, real_t w, Matrix6r& elMat) const
   {
      WALBERLA_ABORT("Not available in 2D");
   }

   void integrateAll( const std::array< Point3D, 3 >& coords, Matrix6r& elMat ) const final
   {
      WALBERLA_ABORT("Not available in 2D");
   }

   void evalQuadraturePoint3D(const Point3D& x_hat, const Point3D& x_tilde, const std::array<Point3D,4>& coords, const Matrix3r& DF, real_t w, Matrix10r& elMat) const
   {
      real_t tmp0 = 4.0*x_hat[0];
      real_t tmp1 = 4.0*x_hat[1];
      real_t tmp2 = 4.0*x_hat[2];
      real_t tmp3 = tmp0 + tmp1 + tmp2 - 3.0;
      real_t tmp4 = coords[0][1]*coords[2][0];
      real_t tmp5 = coords[0][0]*coords[2][1];
      real_t tmp6 = coords[0][0]*coords[1][1];
      real_t tmp7 = coords[0][1]*coords[1][0];
      real_t tmp8 = tmp6 - tmp7;
      real_t tmp9 = coords[1][0]*coords[2][1] - coords[1][1]*coords[2][0] + tmp4 - tmp5 + tmp8;
      real_t tmp10 = DF(0,0)*DF(1,1);
      real_t tmp11 = DF(0,1)*DF(1,2);
      real_t tmp12 = DF(0,2)*DF(1,0);
      real_t tmp13 = DF(0,0)*DF(1,2);
      real_t tmp14 = DF(0,1)*DF(1,0);
      real_t tmp15 = DF(0,2)*DF(1,1);
      real_t tmp16 = DF(2,0)*tmp11 - DF(2,0)*tmp15 + DF(2,1)*tmp12 - DF(2,1)*tmp13 + DF(2,2)*tmp10 - DF(2,2)*tmp14;
      real_t tmp17 = coords[0][0]*coords[3][1];
      real_t tmp18 = coords[0][0]*coords[3][2];
      real_t tmp19 = coords[0][1]*coords[1][2];
      real_t tmp20 = coords[0][1]*coords[3][0];
      real_t tmp21 = coords[0][2]*coords[1][0];
      real_t tmp22 = coords[1][1]*coords[3][0];
      real_t tmp23 = coords[0][2]*coords[3][1];
      real_t tmp24 = coords[1][0]*coords[3][1];
      real_t tmp25 = coords[1][1]*coords[3][2];
      real_t tmp26 = coords[1][2]*coords[3][0];
      real_t tmp27 = coords[0][0]*coords[1][2];
      real_t tmp28 = coords[0][1]*coords[3][2];
      real_t tmp29 = coords[0][2]*coords[1][1];
      real_t tmp30 = coords[0][2]*coords[3][0];
      real_t tmp31 = coords[1][0]*coords[3][2];
      real_t tmp32 = coords[1][2]*coords[3][1];
      real_t tmp33 = coords[0][2]*tmp22 - coords[0][2]*tmp24 + coords[1][2]*tmp17 - coords[1][2]*tmp20 + coords[2][0]*tmp19 + coords[2][0]*tmp23 + coords[2][0]*tmp25 - coords[2][0]*tmp28 - coords[2][0]*tmp29 - coords[2][0]*tmp32 + coords[2][1]*tmp18 + coords[2][1]*tmp21 + coords[2][1]*tmp26 - coords[2][1]*tmp27 - coords[2][1]*tmp30 - coords[2][1]*tmp31 - coords[2][2]*tmp17 + coords[2][2]*tmp20 - coords[2][2]*tmp22 + coords[2][2]*tmp24 + coords[2][2]*tmp6 - coords[2][2]*tmp7 - coords[3][2]*tmp6 + coords[3][2]*tmp7;
      real_t tmp34 = 1/(tmp16*tmp33);
      real_t tmp35 = tmp34*(DF(0,0)*DF(2,1) - DF(0,1)*DF(2,0));
      real_t tmp36 = coords[0][2]*coords[2][0];
      real_t tmp37 = coords[0][0]*coords[2][2];
      real_t tmp38 = -tmp21 + tmp27;
      real_t tmp39 = coords[1][0]*coords[2][2] - coords[1][2]*coords[2][0] + tmp36 - tmp37 + tmp38;
      real_t tmp40 = tmp34*(DF(0,0)*DF(2,2) - DF(0,2)*DF(2,0));
      real_t tmp41 = coords[0][2]*coords[2][1];
      real_t tmp42 = coords[0][1]*coords[2][2];
      real_t tmp43 = tmp19 - tmp29;
      real_t tmp44 = coords[1][1]*coords[2][2] - coords[1][2]*coords[2][1] + tmp41 - tmp42 + tmp43;
      real_t tmp45 = tmp34*(DF(0,1)*DF(2,2) - DF(0,2)*DF(2,1));
      real_t tmp46 = tmp35*tmp9 + tmp39*tmp40 + tmp44*tmp45;
      real_t tmp47 = tmp3*tmp46;
      real_t tmp48 = -tmp17 + tmp20;
      real_t tmp49 = coords[2][0]*coords[3][1] - coords[2][1]*coords[3][0] - tmp4 + tmp48 + tmp5;
      real_t tmp50 = -tmp18 + tmp30;
      real_t tmp51 = coords[2][0]*coords[3][2] - coords[2][2]*coords[3][0] - tmp36 + tmp37 + tmp50;
      real_t tmp52 = tmp23 - tmp28;
      real_t tmp53 = coords[2][1]*coords[3][2] - coords[2][2]*coords[3][1] - tmp41 + tmp42 + tmp52;
      real_t tmp54 = tmp35*tmp49 + tmp40*tmp51 + tmp45*tmp53;
      real_t tmp55 = tmp3*tmp54;
      real_t tmp56 = -tmp22 + tmp24 + tmp48 + tmp8;
      real_t tmp57 = -tmp26 + tmp31 + tmp38 + tmp50;
      real_t tmp58 = tmp25 - tmp32 + tmp43 + tmp52;
      real_t tmp59 = -tmp35*tmp56 - tmp40*tmp57 - tmp45*tmp58;
      real_t tmp60 = tmp3*tmp59;
      real_t tmp61 = tmp34*(DF(1,0)*DF(2,1) - DF(1,1)*DF(2,0));
      real_t tmp62 = tmp34*(DF(1,0)*DF(2,2) - DF(1,2)*DF(2,0));
      real_t tmp63 = tmp34*(DF(1,1)*DF(2,2) - DF(1,2)*DF(2,1));
      real_t tmp64 = tmp56*tmp61 + tmp57*tmp62 + tmp58*tmp63;
      real_t tmp65 = tmp3*tmp64;
      real_t tmp66 = -tmp39*tmp62 - tmp44*tmp63 - tmp61*tmp9;
      real_t tmp67 = tmp3*tmp66;
      real_t tmp68 = -tmp49*tmp61 - tmp51*tmp62 - tmp53*tmp63;
      real_t tmp69 = tmp3*tmp68;
      real_t tmp70 = tmp34*(tmp10 - tmp14);
      real_t tmp71 = tmp34*(-tmp12 + tmp13);
      real_t tmp72 = tmp34*(tmp11 - tmp15);
      real_t tmp73 = tmp56*tmp70 + tmp57*tmp71 + tmp58*tmp72;
      real_t tmp74 = 1.0*tmp3;
      real_t tmp75 = -tmp39*tmp71 - tmp44*tmp72 - tmp70*tmp9;
      real_t tmp76 = -tmp49*tmp70 - tmp51*tmp71 - tmp53*tmp72;
      real_t tmp77 = tmp73*tmp74 + tmp74*tmp75 + tmp74*tmp76;
      real_t tmp78 = 2*std::fabs(tmp16*tmp33);
      real_t tmp79 = 0.5*tmp47 + 0.5*tmp55 + 0.5*tmp60;
      real_t tmp80 = tmp0 - 1.0;
      real_t tmp81 = 1.0*tmp80;
      real_t tmp82 = tmp54*tmp81;
      real_t tmp83 = tmp76*tmp81;
      real_t tmp84 = 0.5*tmp65 + 0.5*tmp67 + 0.5*tmp69;
      real_t tmp85 = tmp68*tmp81;
      real_t tmp86 = tmp78*(tmp77*tmp83 + tmp79*tmp82 + tmp84*tmp85);
      real_t tmp87 = tmp1 - 1.0;
      real_t tmp88 = 1.0*tmp87;
      real_t tmp89 = tmp73*tmp88;
      real_t tmp90 = tmp59*tmp88;
      real_t tmp91 = tmp64*tmp88;
      real_t tmp92 = tmp78*(tmp77*tmp89 + tmp79*tmp90 + tmp84*tmp91);
      real_t tmp93 = tmp2 - 1.0;
      real_t tmp94 = 1.0*tmp93;
      real_t tmp95 = tmp46*tmp94;
      real_t tmp96 = tmp75*tmp94;
      real_t tmp97 = tmp66*tmp94;
      real_t tmp98 = tmp78*(tmp77*tmp96 + tmp79*tmp95 + tmp84*tmp97);
      real_t tmp99 = tmp46*x_hat[1];
      real_t tmp100 = 2.0*tmp99;
      real_t tmp101 = tmp59*x_hat[2];
      real_t tmp102 = 2.0*tmp101;
      real_t tmp103 = tmp100 + tmp102;
      real_t tmp104 = 2*tmp79;
      real_t tmp105 = tmp2*tmp73;
      real_t tmp106 = tmp1*tmp75;
      real_t tmp107 = tmp105 + tmp106;
      real_t tmp108 = tmp64*x_hat[2];
      real_t tmp109 = 2.0*tmp108;
      real_t tmp110 = tmp66*x_hat[1];
      real_t tmp111 = 2.0*tmp110;
      real_t tmp112 = tmp109 + tmp111;
      real_t tmp113 = 2*tmp84;
      real_t tmp114 = tmp78*(tmp103*tmp104 + tmp107*tmp77 + tmp112*tmp113);
      real_t tmp115 = tmp46*x_hat[0];
      real_t tmp116 = 2.0*tmp115;
      real_t tmp117 = tmp54*x_hat[2];
      real_t tmp118 = 2.0*tmp117;
      real_t tmp119 = tmp116 + tmp118;
      real_t tmp120 = tmp0*tmp75;
      real_t tmp121 = tmp2*tmp76;
      real_t tmp122 = tmp120 + tmp121;
      real_t tmp123 = tmp66*x_hat[0];
      real_t tmp124 = 2.0*tmp123;
      real_t tmp125 = tmp68*x_hat[2];
      real_t tmp126 = 2.0*tmp125;
      real_t tmp127 = tmp124 + tmp126;
      real_t tmp128 = tmp78*(tmp104*tmp119 + tmp113*tmp127 + tmp122*tmp77);
      real_t tmp129 = tmp54*x_hat[1];
      real_t tmp130 = 2.0*tmp129;
      real_t tmp131 = tmp59*x_hat[0];
      real_t tmp132 = 2.0*tmp131;
      real_t tmp133 = tmp130 + tmp132;
      real_t tmp134 = tmp0*tmp73;
      real_t tmp135 = tmp1*tmp76;
      real_t tmp136 = tmp134 + tmp135;
      real_t tmp137 = tmp64*x_hat[0];
      real_t tmp138 = 2.0*tmp137;
      real_t tmp139 = tmp68*x_hat[1];
      real_t tmp140 = 2.0*tmp139;
      real_t tmp141 = tmp138 + tmp140;
      real_t tmp142 = tmp78*(tmp104*tmp133 + tmp113*tmp141 + tmp136*tmp77);
      real_t tmp143 = -tmp1;
      real_t tmp144 = 4.0 - tmp0;
      real_t tmp145 = tmp143 + tmp144 - 8.0*x_hat[2];
      real_t tmp146 = 0.5*tmp145;
      real_t tmp147 = -tmp102 - tmp118 + tmp146*tmp46;
      real_t tmp148 = tmp145*tmp75;
      real_t tmp149 = -tmp105 - tmp121 + 1.0*tmp148;
      real_t tmp150 = -tmp109 - tmp126 + tmp146*tmp66;
      real_t tmp151 = tmp78*(tmp104*tmp147 + tmp113*tmp150 + tmp149*tmp77);
      real_t tmp152 = -tmp2;
      real_t tmp153 = tmp144 + tmp152 - 8.0*x_hat[1];
      real_t tmp154 = 0.5*tmp153;
      real_t tmp155 = -tmp100 - tmp130 + tmp154*tmp59;
      real_t tmp156 = tmp153*tmp73;
      real_t tmp157 = -tmp106 - tmp135 + 1.0*tmp156;
      real_t tmp158 = -tmp111 - tmp140 + tmp154*tmp64;
      real_t tmp159 = tmp78*(tmp104*tmp155 + tmp113*tmp158 + tmp157*tmp77);
      real_t tmp160 = tmp143 + tmp152 - 8.0*x_hat[0] + 4.0;
      real_t tmp161 = 0.5*tmp160;
      real_t tmp162 = -tmp116 - tmp132 + tmp161*tmp54;
      real_t tmp163 = tmp160*tmp76;
      real_t tmp164 = -tmp120 - tmp134 + 1.0*tmp163;
      real_t tmp165 = -tmp124 - tmp138 + tmp161*tmp68;
      real_t tmp166 = tmp78*(tmp104*tmp162 + tmp113*tmp165 + tmp164*tmp77);
      real_t tmp167 = std::pow(x_hat[0] - 0.25, 2);
      real_t tmp168 = 8.0*tmp167;
      real_t tmp169 = 0.5*tmp80;
      real_t tmp170 = tmp169*tmp87;
      real_t tmp171 = tmp78*(tmp170*tmp54*tmp59 + tmp170*tmp64*tmp68 + tmp73*tmp83*tmp87);
      real_t tmp172 = tmp169*tmp93;
      real_t tmp173 = tmp75*tmp93;
      real_t tmp174 = tmp78*(tmp172*tmp46*tmp54 + tmp172*tmp66*tmp68 + tmp173*tmp83);
      real_t tmp175 = tmp78*(tmp103*tmp82 + tmp107*tmp83 + tmp112*tmp85);
      real_t tmp176 = tmp78*(tmp119*tmp82 + tmp122*tmp83 + tmp127*tmp85);
      real_t tmp177 = tmp78*(tmp133*tmp82 + tmp136*tmp83 + tmp141*tmp85);
      real_t tmp178 = tmp78*(tmp147*tmp82 + tmp149*tmp83 + tmp150*tmp85);
      real_t tmp179 = tmp78*(tmp155*tmp82 + tmp157*tmp83 + tmp158*tmp85);
      real_t tmp180 = tmp78*(tmp162*tmp82 + tmp164*tmp83 + tmp165*tmp85);
      real_t tmp181 = std::pow(x_hat[1] - 0.25, 2);
      real_t tmp182 = 8.0*tmp181;
      real_t tmp183 = 0.5*tmp87*tmp93;
      real_t tmp184 = tmp78*(tmp173*tmp89 + tmp183*tmp46*tmp59 + tmp183*tmp64*tmp66);
      real_t tmp185 = tmp78*(tmp103*tmp90 + tmp107*tmp89 + tmp112*tmp91);
      real_t tmp186 = tmp78*(tmp119*tmp90 + tmp122*tmp89 + tmp127*tmp91);
      real_t tmp187 = tmp78*(tmp133*tmp90 + tmp136*tmp89 + tmp141*tmp91);
      real_t tmp188 = tmp78*(tmp147*tmp90 + tmp149*tmp89 + tmp150*tmp91);
      real_t tmp189 = tmp78*(tmp155*tmp90 + tmp157*tmp89 + tmp158*tmp91);
      real_t tmp190 = tmp78*(tmp162*tmp90 + tmp164*tmp89 + tmp165*tmp91);
      real_t tmp191 = std::pow(x_hat[2] - 0.25, 2);
      real_t tmp192 = 8.0*tmp191;
      real_t tmp193 = tmp78*(tmp103*tmp95 + tmp107*tmp96 + tmp112*tmp97);
      real_t tmp194 = tmp78*(tmp119*tmp95 + tmp122*tmp96 + tmp127*tmp97);
      real_t tmp195 = tmp78*(tmp133*tmp95 + tmp136*tmp96 + tmp141*tmp97);
      real_t tmp196 = tmp78*(tmp147*tmp95 + tmp149*tmp96 + tmp150*tmp97);
      real_t tmp197 = tmp78*(tmp155*tmp95 + tmp157*tmp96 + tmp158*tmp97);
      real_t tmp198 = tmp78*(tmp162*tmp95 + tmp164*tmp96 + tmp165*tmp97);
      real_t tmp199 = tmp73*x_hat[2];
      real_t tmp200 = tmp75*x_hat[1];
      real_t tmp201 = 2*tmp103;
      real_t tmp202 = 2*tmp112;
      real_t tmp203 = tmp78*(tmp107*tmp122 + tmp119*tmp201 + tmp127*tmp202);
      real_t tmp204 = tmp78*(tmp107*tmp136 + tmp133*tmp201 + tmp141*tmp202);
      real_t tmp205 = tmp78*(tmp107*tmp149 + tmp147*tmp201 + tmp150*tmp202);
      real_t tmp206 = tmp78*(tmp107*tmp157 + tmp155*tmp201 + tmp158*tmp202);
      real_t tmp207 = tmp78*(tmp107*tmp164 + tmp162*tmp201 + tmp165*tmp202);
      real_t tmp208 = tmp75*x_hat[0];
      real_t tmp209 = tmp76*x_hat[2];
      real_t tmp210 = 2*tmp119;
      real_t tmp211 = 2*tmp127;
      real_t tmp212 = tmp78*(tmp122*tmp136 + tmp133*tmp210 + tmp141*tmp211);
      real_t tmp213 = tmp78*(tmp122*tmp149 + tmp147*tmp210 + tmp150*tmp211);
      real_t tmp214 = tmp78*(tmp122*tmp157 + tmp155*tmp210 + tmp158*tmp211);
      real_t tmp215 = tmp78*(tmp122*tmp164 + tmp162*tmp210 + tmp165*tmp211);
      real_t tmp216 = tmp73*x_hat[0];
      real_t tmp217 = tmp76*x_hat[1];
      real_t tmp218 = 2*tmp133;
      real_t tmp219 = 2*tmp141;
      real_t tmp220 = tmp78*(tmp136*tmp149 + tmp147*tmp218 + tmp150*tmp219);
      real_t tmp221 = tmp78*(tmp136*tmp157 + tmp155*tmp218 + tmp158*tmp219);
      real_t tmp222 = tmp78*(tmp136*tmp164 + tmp162*tmp218 + tmp165*tmp219);
      real_t tmp223 = 0.25*tmp145;
      real_t tmp224 = 2*tmp147;
      real_t tmp225 = 2*tmp150;
      real_t tmp226 = tmp78*(tmp149*tmp157 + tmp155*tmp224 + tmp158*tmp225);
      real_t tmp227 = tmp78*(tmp149*tmp164 + tmp162*tmp224 + tmp165*tmp225);
      real_t tmp228 = 0.25*tmp153;
      real_t tmp229 = tmp78*(2*tmp155*tmp162 + tmp157*tmp164 + 2*tmp158*tmp165);
      real_t tmp230 = 0.25*tmp160;
      elMat(0,0) += w * tmp78*(std::pow(tmp77, 2) + 0.5*std::pow(tmp47 + tmp55 + tmp60, 2) + 0.5*std::pow(tmp65 + tmp67 + tmp69, 2));
      elMat(0,1) += w * tmp86;
      elMat(0,2) += w * tmp92;
      elMat(0,3) += w * tmp98;
      elMat(0,4) += w * tmp114;
      elMat(0,5) += w * tmp128;
      elMat(0,6) += w * tmp142;
      elMat(0,7) += w * tmp151;
      elMat(0,8) += w * tmp159;
      elMat(0,9) += w * tmp166;
      elMat(1,0) += w * tmp86;
      elMat(1,1) += w * tmp78*(16.0*tmp167*std::pow(tmp76, 2) + tmp168*std::pow(tmp54, 2) + tmp168*std::pow(tmp68, 2));
      elMat(1,2) += w * tmp171;
      elMat(1,3) += w * tmp174;
      elMat(1,4) += w * tmp175;
      elMat(1,5) += w * tmp176;
      elMat(1,6) += w * tmp177;
      elMat(1,7) += w * tmp178;
      elMat(1,8) += w * tmp179;
      elMat(1,9) += w * tmp180;
      elMat(2,0) += w * tmp92;
      elMat(2,1) += w * tmp171;
      elMat(2,2) += w * tmp78*(16.0*tmp181*std::pow(tmp73, 2) + tmp182*std::pow(tmp59, 2) + tmp182*std::pow(tmp64, 2));
      elMat(2,3) += w * tmp184;
      elMat(2,4) += w * tmp185;
      elMat(2,5) += w * tmp186;
      elMat(2,6) += w * tmp187;
      elMat(2,7) += w * tmp188;
      elMat(2,8) += w * tmp189;
      elMat(2,9) += w * tmp190;
      elMat(3,0) += w * tmp98;
      elMat(3,1) += w * tmp174;
      elMat(3,2) += w * tmp184;
      elMat(3,3) += w * tmp78*(16.0*tmp191*std::pow(tmp75, 2) + tmp192*std::pow(tmp46, 2) + tmp192*std::pow(tmp66, 2));
      elMat(3,4) += w * tmp193;
      elMat(3,5) += w * tmp194;
      elMat(3,6) += w * tmp195;
      elMat(3,7) += w * tmp196;
      elMat(3,8) += w * tmp197;
      elMat(3,9) += w * tmp198;
      elMat(4,0) += w * tmp114;
      elMat(4,1) += w * tmp175;
      elMat(4,2) += w * tmp185;
      elMat(4,3) += w * tmp193;
      elMat(4,4) += w * tmp78*(8.0*std::pow(tmp101 + tmp99, 2) + 8.0*std::pow(tmp108 + tmp110, 2) + 16.0*std::pow(tmp199 + tmp200, 2));
      elMat(4,5) += w * tmp203;
      elMat(4,6) += w * tmp204;
      elMat(4,7) += w * tmp205;
      elMat(4,8) += w * tmp206;
      elMat(4,9) += w * tmp207;
      elMat(5,0) += w * tmp128;
      elMat(5,1) += w * tmp176;
      elMat(5,2) += w * tmp186;
      elMat(5,3) += w * tmp194;
      elMat(5,4) += w * tmp203;
      elMat(5,5) += w * tmp78*(8.0*std::pow(tmp115 + tmp117, 2) + 8.0*std::pow(tmp123 + tmp125, 2) + 16.0*std::pow(tmp208 + tmp209, 2));
      elMat(5,6) += w * tmp212;
      elMat(5,7) += w * tmp213;
      elMat(5,8) += w * tmp214;
      elMat(5,9) += w * tmp215;
      elMat(6,0) += w * tmp142;
      elMat(6,1) += w * tmp177;
      elMat(6,2) += w * tmp187;
      elMat(6,3) += w * tmp195;
      elMat(6,4) += w * tmp204;
      elMat(6,5) += w * tmp212;
      elMat(6,6) += w * tmp78*(8.0*std::pow(tmp129 + tmp131, 2) + 8.0*std::pow(tmp137 + tmp139, 2) + 16.0*std::pow(tmp216 + tmp217, 2));
      elMat(6,7) += w * tmp220;
      elMat(6,8) += w * tmp221;
      elMat(6,9) += w * tmp222;
      elMat(7,0) += w * tmp151;
      elMat(7,1) += w * tmp178;
      elMat(7,2) += w * tmp188;
      elMat(7,3) += w * tmp196;
      elMat(7,4) += w * tmp205;
      elMat(7,5) += w * tmp213;
      elMat(7,6) += w * tmp220;
      elMat(7,7) += w * tmp78*(8.0*std::pow(-tmp101 - tmp117 + tmp223*tmp46, 2) + 8.0*std::pow(-tmp108 - tmp125 + tmp223*tmp66, 2) + 16.0*std::pow(0.25*tmp148 - tmp199 - tmp209, 2));
      elMat(7,8) += w * tmp226;
      elMat(7,9) += w * tmp227;
      elMat(8,0) += w * tmp159;
      elMat(8,1) += w * tmp179;
      elMat(8,2) += w * tmp189;
      elMat(8,3) += w * tmp197;
      elMat(8,4) += w * tmp206;
      elMat(8,5) += w * tmp214;
      elMat(8,6) += w * tmp221;
      elMat(8,7) += w * tmp226;
      elMat(8,8) += w * tmp78*(8.0*std::pow(-tmp110 - tmp139 + tmp228*tmp64, 2) + 8.0*std::pow(-tmp129 + tmp228*tmp59 - tmp99, 2) + 16.0*std::pow(0.25*tmp156 - tmp200 - tmp217, 2));
      elMat(8,9) += w * tmp229;
      elMat(9,0) += w * tmp166;
      elMat(9,1) += w * tmp180;
      elMat(9,2) += w * tmp190;
      elMat(9,3) += w * tmp198;
      elMat(9,4) += w * tmp207;
      elMat(9,5) += w * tmp215;
      elMat(9,6) += w * tmp222;
      elMat(9,7) += w * tmp227;
      elMat(9,8) += w * tmp229;
      elMat(9,9) += w * tmp78*(8.0*std::pow(-tmp115 - tmp131 + tmp230*tmp54, 2) + 8.0*std::pow(-tmp123 - tmp137 + tmp230*tmp68, 2) + 16.0*std::pow(0.25*tmp163 - tmp208 - tmp216, 2));
   }

   void integrateAll( const std::array< Point3D, 4 >& coords, Matrix10r& elMat ) const final
   {
      Point3D x_hat;
      Point3D x_tilde;
      Matrix3r DF;
      elMat(0,0) = 0;
      elMat(0,1) = 0;
      elMat(0,2) = 0;
      elMat(0,3) = 0;
      elMat(0,4) = 0;
      elMat(0,5) = 0;
      elMat(0,6) = 0;
      elMat(0,7) = 0;
      elMat(0,8) = 0;
      elMat(0,9) = 0;
      elMat(1,0) = 0;
      elMat(1,1) = 0;
      elMat(1,2) = 0;
      elMat(1,3) = 0;
      elMat(1,4) = 0;
      elMat(1,5) = 0;
      elMat(1,6) = 0;
      elMat(1,7) = 0;
      elMat(1,8) = 0;
      elMat(1,9) = 0;
      elMat(2,0) = 0;
      elMat(2,1) = 0;
      elMat(2,2) = 0;
      elMat(2,3) = 0;
      elMat(2,4) = 0;
      elMat(2,5) = 0;
      elMat(2,6) = 0;
      elMat(2,7) = 0;
      elMat(2,8) = 0;
      elMat(2,9) = 0;
      elMat(3,0) = 0;
      elMat(3,1) = 0;
      elMat(3,2) = 0;
      elMat(3,3) = 0;
      elMat(3,4) = 0;
      elMat(3,5) = 0;
      elMat(3,6) = 0;
      elMat(3,7) = 0;
      elMat(3,8) = 0;
      elMat(3,9) = 0;
      elMat(4,0) = 0;
      elMat(4,1) = 0;
      elMat(4,2) = 0;
      elMat(4,3) = 0;
      elMat(4,4) = 0;
      elMat(4,5) = 0;
      elMat(4,6) = 0;
      elMat(4,7) = 0;
      elMat(4,8) = 0;
      elMat(4,9) = 0;
      elMat(5,0) = 0;
      elMat(5,1) = 0;
      elMat(5,2) = 0;
      elMat(5,3) = 0;
      elMat(5,4) = 0;
      elMat(5,5) = 0;
      elMat(5,6) = 0;
      elMat(5,7) = 0;
      elMat(5,8) = 0;
      elMat(5,9) = 0;
      elMat(6,0) = 0;
      elMat(6,1) = 0;
      elMat(6,2) = 0;
      elMat(6,3) = 0;
      elMat(6,4) = 0;
      elMat(6,5) = 0;
      elMat(6,6) = 0;
      elMat(6,7) = 0;
      elMat(6,8) = 0;
      elMat(6,9) = 0;
      elMat(7,0) = 0;
      elMat(7,1) = 0;
      elMat(7,2) = 0;
      elMat(7,3) = 0;
      elMat(7,4) = 0;
      elMat(7,5) = 0;
      elMat(7,6) = 0;
      elMat(7,7) = 0;
      elMat(7,8) = 0;
      elMat(7,9) = 0;
      elMat(8,0) = 0;
      elMat(8,1) = 0;
      elMat(8,2) = 0;
      elMat(8,3) = 0;
      elMat(8,4) = 0;
      elMat(8,5) = 0;
      elMat(8,6) = 0;
      elMat(8,7) = 0;
      elMat(8,8) = 0;
      elMat(8,9) = 0;
      elMat(9,0) = 0;
      elMat(9,1) = 0;
      elMat(9,2) = 0;
      elMat(9,3) = 0;
      elMat(9,4) = 0;
      elMat(9,5) = 0;
      elMat(9,6) = 0;
      elMat(9,7) = 0;
      elMat(9,8) = 0;
      elMat(9,9) = 0;
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.5854101966249684;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.585410196624968*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.585410196624968*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.585410196624968*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.5854101966249684;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.138196601125011*coords[1][0] + 0.585410196624968*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.138196601125011*coords[1][1] + 0.585410196624968*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.138196601125011*coords[1][2] + 0.585410196624968*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.5854101966249684;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.138196601125011*coords[0][0] + 0.585410196624968*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.138196601125011*coords[0][1] + 0.585410196624968*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.138196601125011*coords[0][2] + 0.585410196624968*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
      x_hat[0] = 0.1381966011250105;
      x_hat[1] = 0.1381966011250105;
      x_hat[2] = 0.1381966011250105;
      x_tilde[0] = 0.585410196624968*coords[0][0] + 0.138196601125011*coords[1][0] + 0.138196601125011*coords[2][0] + 0.138196601125011*coords[3][0];
      x_tilde[1] = 0.585410196624968*coords[0][1] + 0.138196601125011*coords[1][1] + 0.138196601125011*coords[2][1] + 0.138196601125011*coords[3][1];
      x_tilde[2] = 0.585410196624968*coords[0][2] + 0.138196601125011*coords[1][2] + 0.138196601125011*coords[2][2] + 0.138196601125011*coords[3][2];
      geometryMap_->evalDF(x_tilde, DF);
      evalQuadraturePoint3D(x_hat, x_tilde, coords, DF, 0.04166666666666666, elMat);
   }

};

}
