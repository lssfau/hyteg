/*
 * Copyright (c) 2017-2020 Dominik Thoennes, Nils Kohl, Marcus Mohr.
 *
 * This file is part of HyTeG
 * (see https://i10git.cs.fau.de/hyteg/hyteg).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#include <cmath>

#include "core/DataTypes.h"
#include "core/Environment.h"
#include "core/config/Config.h"
#include "core/mpi/MPIManager.h"

#include "hyteg/FunctionProperties.hpp"
#include "hyteg/dataexport/VTKOutput.hpp"
#include "hyteg/elementwiseoperators/P1ElementwiseOperator.hpp"
#include "hyteg/elementwiseoperators/P2ElementwiseOperator.hpp"
#include "hyteg/geometry/IcosahedralShellMap.hpp"
#include "hyteg/mesh/MeshInfo.hpp"
#include "hyteg/numerictools/SphericalHarmonicsTool.hpp"
#include "hyteg/primitivestorage/PrimitiveStorage.hpp"
#include "hyteg/primitivestorage/SetupPrimitiveStorage.hpp"
#include "hyteg/primitivestorage/Visualization.hpp"
#include "hyteg/primitivestorage/loadbalancing/DistributedBalancer.hpp"
#include "hyteg/primitivestorage/loadbalancing/SimpleBalancer.hpp"

using walberla::real_c;
using walberla::real_t;
using namespace hyteg;

void integrateSPHfunc( uint_t degree, int order, uint_t level, std::shared_ptr< hyteg::PrimitiveStorage > storage )
{
   uint_t                                    lmax    = degree;
   std::shared_ptr< SphericalHarmonicsTool > sphTool = std::make_shared< SphericalHarmonicsTool >( lmax );

#define SPH_STD
#ifdef SPH_STD
   // This will be our scalar spherical harmonics function (constant radial component)
   std::function< real_t( const Point3D& ) > sphFunc = [sphTool, degree, order]( const Point3D& x ) {
      return sphTool->shconvert_eval( degree, order, x[0], x[1], x[2] );
   };
#else
   // This will be our scalar spherical harmonics function (non-constant radial component)
   std::function< real_t( const Point3D& ) > sphFunc = [sphTool, degree, order]( const Point3D& x ) {
      real_t rad = std::sqrt( x[0]*x[0] + x[1]*x[1] + x[2]*x[2] );
      return sphTool->shconvert_eval( degree, order, x[0], x[1], x[2] ) / rad;
   };
#endif

   P1Function<real_t> sph( "harmonic", storage, level, level );
   sph.interpolate( sphFunc, level, All );

   P1ElementwiseBlendingMassOperator3D massOp( storage, level, level );
   P1Function<real_t> aux( "aux", storage, level, level );

   massOp.apply( sph, aux, level, All );
   real_t measure = sph.dotGlobal( aux, level );
   WALBERLA_LOG_INFO_ON_ROOT( "L_2 norm of harmonic = " << std::scientific << std::sqrt( measure ) );

   hyteg::VTKOutput vtkOutput( "./output", "SPHdemo", storage );
   vtkOutput.add( sph );
   vtkOutput.add( aux );
   vtkOutput.write( level, 0 );
}

int main( int argc, char* argv[] )
{
   walberla::Environment env( argc, argv );
   walberla::MPIManager::instance()->useWorldComm();

   // ============
   //  Parameters
   // ============

   // check if a config was given on command line or load default file otherwise
   auto cfg = std::make_shared< walberla::config::Config >();
   if ( env.config() == nullptr )
   {
      auto defaultFile = "./SPHdemo.prm";
      WALBERLA_LOG_INFO_ON_ROOT( "No Parameter file given loading default parameter file: " << defaultFile );
      cfg->readParameterFile( defaultFile );
   }
   else
   {
      cfg = env.config();
   }

   const walberla::Config::BlockHandle params = cfg->getBlock( "Parameters" );

   // =========
   //  Meshing
   // =========
   const uint_t level = params.getParameter< uint_t >( "level" );
   const uint_t nRad  = params.getParameter< uint_t >( "nRad" );
   const uint_t nTan  = params.getParameter< uint_t >( "nTan" );

   hyteg::MeshInfo              meshInfo = hyteg::MeshInfo::meshSphericalShell( nTan, nRad, 1.0, 2.0 );
   hyteg::SetupPrimitiveStorage setupStorage( meshInfo,
                                              walberla::uint_c( walberla::mpi::MPIManager::instance()->numProcesses() ) );
   hyteg::loadbalancing::roundRobin( setupStorage );

   setupStorage.setMeshBoundaryFlagsOnBoundary( 1, 0, true );
   IcosahedralShellMap::setMap( setupStorage );

   std::shared_ptr< walberla::WcTimingTree >  timingTree( new walberla::WcTimingTree() );
   std::shared_ptr< hyteg::PrimitiveStorage > storage = std::make_shared< hyteg::PrimitiveStorage >( setupStorage, timingTree );

   // ===========
   //  SPH Stuff
   // ===========
   uint_t degree = params.getParameter< uint_t >( "degree" );
   int    order  = params.getParameter< int >( "order" );

   integrateSPHfunc( degree, order, level, storage );

   return EXIT_SUCCESS;
}
